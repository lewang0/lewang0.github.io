<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小碼哥</title>
    <link>//lewang.dev/</link>
    <description>Recent content on 小碼哥</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 21 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="//lewang.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 grep，xargs 和 sed 命令批量替换所有 Markdown 文件中的链接</title>
      <link>//lewang.dev/posts/2022-05-21-replace-strings-in-all-files/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2022-05-21-replace-strings-in-all-files/</guid>
      <description>&lt;p&gt;趁着周末空隙把自己年久失修博客整理了一下，用到了 grep，xargs 和 sed 命令，使用 grep，xargs 和 sed 这 3 个命令组合批量替换所有 Markdown 文件中的图片链接。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我的博客从我的学生时代就开始了，不断折腾自己的博客，所以学会了 HTML/CSS/JS，下次和大家分享一下我的博客旅程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里不详细讲解这 3 个命令的使用，如果希望详细的了解这些命令，可以在 Linux 的终端下输入这样的命令查看文档，例如查看 grep 如何使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;man grep
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;man 命令的常用操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;退出: 按 q 键&lt;/li&gt;
&lt;li&gt;查找：按 / 后输入查找关键字&lt;/li&gt;
&lt;li&gt;下一页: 按 ctrl + d 或者 ctrl + f，&lt;strong&gt;tips: 这里的 d 大概是 down，f 大概是 forward&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;上一页: 按 ctrl + u 或者 ctrl + b，&lt;strong&gt;tips: 这里的 d 大概是 up，b 大概是 backward&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看其它命令的手册也是类似的。&lt;/p&gt;
&lt;h2 id=&#34;我博客的问题&#34;&gt;我博客的问题&lt;/h2&gt;
&lt;p&gt;我的博客是用 hugo 构建的，所有的文章都放在 post 下面的目录里，图片则需要放在 static 的 images 下面，这样在用 vscode 写博客 Markdown 的时候无法在预览里面看到图片。于是我在 hugo 项目的根目录下添加了的一个 images 的符号链接到 static 目录下的 images， 才能解决图片预览的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/2022-05-21-replace-strings-in-all-files/hugo-images-links.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;另外博客里面的图片越来越多也导致博客的 Git 仓库的体积越来越大，会导致上传下载都变得较慢，于是决定把博客里面的图片二进制文件单独放到一个 GitHub 仓库里面去，这个存放图片等二进制文件的仓库地址是 &lt;a href=&#34;https://github.com/lewangdev/picb0&#34;&gt;picb0&lt;/a&gt;，让博客仓库本身只保留一些主题文件和文章的 Markdown。&lt;/p&gt;
&lt;h2 id=&#34;开始替换&#34;&gt;开始替换&lt;/h2&gt;
&lt;h3 id=&#34;grep&#34;&gt;grep&lt;/h3&gt;
&lt;p&gt;使用 grep 命令查找出所有包括图片的文件，并且显示将要被替换的文件内容&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep -nr &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;/images&amp;#39;&lt;/span&gt; .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-n: 表示查找文件的名字并且显示匹配的文件行号和内容&lt;/li&gt;
&lt;li&gt;-r: 表示递归查找当前目录下的所有目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输入结果是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/2022-05-21-replace-strings-in-all-files/grep-nr.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;sed&#34;&gt;sed&lt;/h3&gt;
&lt;p&gt;我常用的 sed 是这样替换文件内容，一般处理单个文件内容的替换，我会直接用 vim 来进行，替换的语法和 sed 也是差不多的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed -i &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;s/oldstr/newstr/g&amp;#39;&lt;/span&gt; filename
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i: 表示修改文件后保持到原文件名，并且创建一个 .bak 结尾的备份&lt;/li&gt;
&lt;li&gt;oldstr：为需要被替换的字符串&lt;/li&gt;
&lt;li&gt;newstr：为替换后的字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了修改博客 Markdown 文件的图片链接，需要这样来修改&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed -i &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;s/\/images/https:\/\/raw.githubusercontent.com\/lewangdev\/picb0\/main\/oh-my-blog/g&amp;#39;&lt;/span&gt; 2013-03-04-so-load-path-in-linux.markdown
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意如果 oldstr 或者 newstr 中有 &lt;code&gt;/&lt;/code&gt; 符号，需要进行转义为 &lt;code&gt;\/&lt;/code&gt;, 所以这里:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;oldstr&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\/images
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;newstr&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;https:\/\/raw.githubusercontent.com\/lewangdev\/picb0\/main\/oh-my-blog
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;xargs&#34;&gt;xargs&lt;/h3&gt;
&lt;p&gt;弄清楚 grep 和 sed 之后，在使用 xargs 和|(管道符)把这几个命令连起来&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep -rl  &amp;#34;oldstr&amp;#34; .| xargs sed -i &amp;#39;s/oldstr/newstr/g&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;grep 的 n 参数换成了 l，因为我只需要文件名&lt;/li&gt;
&lt;li&gt;xargs 命令可以使用分割标准输入的内容作为另外一个命令的参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;替换为我博客的实际需要替换的内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep -rl  &amp;#34;/images&amp;#34; .| xargs sed -i &amp;#39;s/\/images/https:\/\/raw.githubusercontent.com\/lewangdev\/picb0\/main\/oh-my-blog/g&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;git log -p&lt;/code&gt; 查看一下是否替换成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/2022-05-21-replace-strings-in-all-files/grep-sed-replaced.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;其它的替换方法&#34;&gt;其它的替换方法&lt;/h2&gt;
&lt;p&gt;除了命令行，我们使用 ide 或者编辑器也很容易进行替换，比如 vscode 和 idea 系列的。&lt;/p&gt;
&lt;h3 id=&#34;vscode&#34;&gt;vscode&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/2022-05-21-replace-strings-in-all-files/vscode-replace-in-files.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;idea&#34;&gt;idea&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/2022-05-21-replace-strings-in-all-files/idea-replace-in-files.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>命令行格式化 JSON</title>
      <link>//lewang.dev/posts/2022-05-20-format-json-in-command-line-copy/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2022-05-20-format-json-in-command-line-copy/</guid>
      <description>&lt;p&gt;今天要改 Docker 的两个配置 hostconfig.json 和 config.v2.json，打开一看，这个文件是单行的，在编辑器里面显示这是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/2022-05-20-format-json-in-command-line/format-json-1-mac.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;代码都堆在一起，用 vim 格式化也没啥效果，编辑起来不是很方便。&lt;/p&gt;
&lt;h2 id=&#34;python-自带模块格式化-json&#34;&gt;Python 自带模块格式化 JSON&lt;/h2&gt;
&lt;p&gt;格式化 JSON 文件有很多方法，我最常用的就是 Python 自带的 json.tool 这个模块，只要安装了 Python 的电脑，都可以直接使用，这样就可以了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python -m json.tool hostconfig.json &amp;gt; hostconfig-formatted.json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;格式化以后再打开看一看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/2022-05-20-format-json-in-command-line/format-json-2-mac.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样编辑文件就方便多了。&lt;/p&gt;
&lt;h2 id=&#34;与管道符一起使用&#34;&gt;与管道符一起使用&lt;/h2&gt;
&lt;p&gt;前面的例子我们还可以使用管道符(|)来实现，例如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat hostconfig.json | python -m json.tool &amp;gt; hostconfig-formatted.json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从 RESTful 接口直接获取数据并且格式化:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -s https://api.github.com/users/lewangdev | python -m json.tool
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;其它本地格式化工具&#34;&gt;其它本地格式化工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ObuchiYuki/DevToysMac&#34;&gt;DevToysMac&lt;/a&gt;: MacOS 版的 &lt;a href=&#34;https://github.com/veler/DevToys&#34;&gt;DevToys or Windows&lt;/a&gt;，我是用 Windows 11 时候看到这个软件的，于是顺手搜了一下 MacOS 版的，也挺好用的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/2022-05-20-format-json-in-command-line/devtoysmac-preview.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stedolan/jq&#34;&gt;jq&lt;/a&gt;: 除了像 sed 一样的处理 JSON 以外，还能把输出的 JSON 变成彩色的。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;https://api.github.com/users/lewangdev&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出这样效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/2022-05-20-format-json-in-command-line/jq-mac.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>国内开发者可能有点用的网络工具 cndevnet</title>
      <link>//lewang.dev/posts/2022-05-16-cndevnet-intro/</link>
      <pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2022-05-16-cndevnet-intro/</guid>
      <description>&lt;p&gt;一个国内开发者可能有点用的网络工具，cndevnet 帮助开发者，尤其是初学者不用再费心折腾 pip/npm/golang/flutter/android/blockchain 等等无法访问的问题。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;由于某些原因，国内开发者需要的不少技术站点或者镜像源都无法直接访问，这使得在开发者在日常工作中会消耗额外的时间，去设置各种代理或者寻找国内的可替代的镜像源来使用。&lt;/p&gt;
&lt;p&gt;在开源软件的世界里，几乎所有的知名项目，原本只要把代码 clone 回来，不需要做额外任何配置，只需要按照它的说明就可以直接编译源码。但由于网络的原因，在国内甚至连开源软件的源码都不太方便直接下载，一些原本只需要从 GitHub 拉下来代码就可以直接编译成功的项目，在国内也是连编译都编译不过。&lt;/p&gt;
&lt;p&gt;国内开发者群体是非常庞大的，所以我看到了很多知名的开源项目为中国用户在 README.md 文档或是页面的显著位置都增加了中文提示，去引导国内开发者去使用国内的镜像。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://flutter.dev/&#34;&gt;Flutter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-notes/8370906848784f34a368a35724c2532c.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/romkatv/powerlevel10k#manual&#34;&gt;powerlevel10k&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-notes/96b11231089b47469e9d2d6e8d6395a5.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是，我想这种做法应该不属于 i18n，因为我很少看到有引导日本的开发者去用日本的镜像，或者引导德国的开发者去用德国的镜像，这看似解决了访问慢或者无法访问的问题，但其实是加剧了国内开发者与全球互联网的割裂，在开发者的世界里面，也形成了国内和国外两个网络。&lt;/p&gt;
&lt;p&gt;给系统或软件单独设置代理，或者寻找国内的可替代的镜像源我都觉得不是一个好方案，因为这样在国内的你总会遇到各种各样的国外开发者就不会遇到的问题，最好还是能够拥有一个与国外开发者“用起来”好像是一样的网络环境。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lewangdev/cndevnet&#34;&gt;cndevnet&lt;/a&gt; 就是为了解决这个问题而创建的，希望能帮助到和我一样遇到相同问题的国内开发者。&lt;/p&gt;
&lt;h2 id=&#34;从-linux-开始&#34;&gt;从 Linux 开始&lt;/h2&gt;
&lt;p&gt;cndevnet 可以在 Linux 环境下搭建一个专为初学开发者设置的开发网络，搭配使用 vscode 进行远程开发是一种不错的体验，适合学习 python/golang 等。&lt;/p&gt;
&lt;p&gt;Linux 环境可以是在国内云平台上的一台云主机，也可以是运行在本地虚拟机里面的主机，或者是局域网中的一台 Linux 主机。&lt;/p&gt;
&lt;p&gt;Debian 是一个非常棒的 Linux 发行版，推荐希望学习 Linux 的初学者使用。如果希望使用带有图形界面的 Linux 系统，Ubuntu 也是一个非常好的选择。&lt;/p&gt;
&lt;h2 id=&#34;cndevnet-使用了以下软件和服务&#34;&gt;cndevnet 使用了以下软件和服务&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.debian.org/&#34;&gt;Debian&lt;/a&gt;：目前支持的 Linux 系统&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/install/debian/&#34;&gt;Docker&lt;/a&gt;: 用于运行 gost 和 smartdns 服务&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ginuerzh/gost&#34;&gt;gost&lt;/a&gt;: 用于建立 WSS(Websocket over TLS) 服务&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pymumu/smartdns&#34;&gt;smartdns&lt;/a&gt;： 用于解决 DNS 污染&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/felixonmars/dnsmasq-china-list/&#34;&gt;dnsmasq-china-list&lt;/a&gt;： 国内域名&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudflare.com/zh-cn/ips/&#34;&gt;Cloudflare IP Range&lt;/a&gt;: Cloudflare 的 IP 范围&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudflare.com/zh-cn/ips/&#34;&gt;Cloudflare&lt;/a&gt;: Cloudflare 的 WSS 代理服务&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.oracle.com&#34;&gt;Oracle Cloud&lt;/a&gt;: Oracle Cloud 的云主机&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cndevnet-原理&#34;&gt;cndevnet 原理&lt;/h2&gt;
&lt;p&gt;cndevnet 通过 iptables 等工具和数据实现了系统的透明代理，由于是系统级的透明代理，所以在启用了 cndevnet 的 Linux 系统上，是不需要为系统或者各类开发工具或者服务单独设置代理的。&lt;/p&gt;
&lt;h2 id=&#34;cndevnet-是免费的&#34;&gt;cndevnet 是免费的&lt;/h2&gt;
&lt;p&gt;cndevnet 所使用的所有的软件都是开源免费的，另外 cndevnet 使用了 Cloudflare 的免费版域名和 CDN 服务以及 Oracle Cloud 的永久免费的云主机。&lt;/p&gt;
&lt;p&gt;正是因为有 Cloudflare 和 Oracle Cloud 的免费服务，我才想到可以用它们来搭建一个给国内初学者使用的开发环境。&lt;/p&gt;
&lt;p&gt;但是不得不说，这是一种薅羊毛的行为。资源有限，为了防止滥用，cndevnet 的密钥每天会在北京时间 0 点重新生成，如果希望继续使用，请在使用前，从 GitHub 拉取最新的代码来获取正确的密钥。&lt;/p&gt;
&lt;h2 id=&#34;安装和使用&#34;&gt;安装和使用&lt;/h2&gt;
&lt;p&gt;请访问 &lt;a href=&#34;https://github.com/lewangdev/cndevnet&#34;&gt;cndevnet&lt;/a&gt; 查看。&lt;/p&gt;
&lt;h2 id=&#34;视频教程&#34;&gt;视频教程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCCplvOAql3tou-cyjxxXfqw&#34;&gt;小码哥的 YouTube 频道&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>机房不能访问互联网，轻松搞定系统部署</title>
      <link>//lewang.dev/posts/2020-11-27-go-through-the-system-firewall/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2020-11-27-go-through-the-system-firewall/</guid>
      <description>&lt;p&gt;创业这段时间以来，我们的 IoT 系统已经在不少客户的机房做了私有化部署，客户大多都是机加工厂、商业大楼、医院和大学实验室等，客户的机房都有一个相同的特点：私有云，与外网隔离，不能访问互联网。或者更为准确的说，是我们部署的服务器不能访问互联网，在没有互联网访问权限的情况下，系统的包管理工具(yum/apt/docker)都无法使用了，在这种情况下进行系统部署安装，费时费力，而且无法进行远程部署维护，也大大增加了项目的实施成本。&lt;/p&gt;
&lt;p&gt;在最近的一个客户项目的实施过程中，看到客户的一些其他供应商在系统部署过程中非常艰难，甚至是 CentOS 系统初始化和 Docker 的安装就花掉了两个礼拜的人力，不排除一些供应商这样折腾会给他的客户留下工作敬业钱花的值的好印象，但对于我们这样的小创业公司来说，这样的时间浪费和低效是无法承担的成本，因为来实操部署的人就是公司老板本人了，我也不想出差在客户这里待上两个礼拜。&lt;/p&gt;
&lt;p&gt;在工作完成之后，想想可以把解决问题的方法记录一下，也许能给遇到相同问题的同行一些启发和帮助。好了，废话不多说，接下来我们就来解决这个无外网的部署问题，顺便再解决一下远程维护的问题。&lt;/p&gt;
&lt;h2 id=&#34;一面临的问题&#34;&gt;一、面临的问题&lt;/h2&gt;
&lt;p&gt;在部署和维护一个私有化企业内部使用且无互联网访问的系统中，可能会面临以下问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;机房服务器无法访问 Internet&lt;/li&gt;
&lt;li&gt;可通过接入企业内网来访问服务器，而从服务器无法直连办公室网络，即机房和办公室在不同的网段&lt;/li&gt;
&lt;li&gt;无互联网访问权限的情况下，无法直接使用系统的配置工具，如 yum/apt/docker 等，配置系统和部署服务费时费力&lt;/li&gt;
&lt;li&gt;无法远程进行维护&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;客户内网拓扑示意图，此处省略了防火墙，简化拓扑图的复杂度，如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/go-through-the-system-firewall/network-topo-basic.png&#34; alt=&#34;network-topo&#34;&gt;&lt;/p&gt;
&lt;p&gt;网络拓扑图说明:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;机房和办公室不在一个网段&lt;/li&gt;
&lt;li&gt;机房网段假设为 172.22.0.0/16，办公室内网 WiFi 的网段为 192.168.137.0/24&lt;/li&gt;
&lt;li&gt;机房服务器之间是互通的，办公室可以 ping 通机房服务器，在机房服务器上无法 ping 通办公室部署控制主机，这里假设办公室网络作为一个 NAT 放在上层交换机后面&lt;/li&gt;
&lt;li&gt;内网没有互联网访问权限，包括机房服务器和办公室内网 WiFI&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二解决问题的方法&#34;&gt;二、解决问题的方法&lt;/h2&gt;
&lt;p&gt;既然是由于机房服务器没有互联网访问权限，不能联网下载安装包，那就想办法让机房服务器可以连接互联网或者搭建内网的软件包镜像服务，于是想到一些方法来达到目的:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;告知客户问题，申请开通互联网访问权限，可以限定为指定的网址和协议(HTTP/HTTPS)，需要远程维护的化，还需要申请可以连接到服务器的 VPN。这个方法在需要客户的进行审批，可能时间比较长。我们的客户中有不少都没有自建 VPN，或这不方便给我们开通 VPN，另外也无法开通需要我们部署的服务器的互联网访问权限，所以不能使用这个方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在客户机房放置可以通过 4G 上网的堡垒机，堡垒机接入客户机房网络。在客户机房放一个堡垒机，虽然说是堡垒机，但可能客户那边的机房管理也还是不容许放置这样的机器的，所以也不能使用这个方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;搭建 yum(CentOS)/apt(Debian/Ubuntu)/docker 的内网镜像服务，搭建内网镜像服务可能就是一个比较艰巨的任务，难以接受给自己又添加了一个艰难的任务，此方法也作罢&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过在办公室网里放置部署控制机，同时连接内网和 4G 路由器提供的外网(互联网)，在部署控制机上搭建 SDWAN 或者 HTTP 代理，yum/apt/docker 都支持 HTTP 代理，这样修改系统配置之后，就可以通过代理安装部署服务，这个方法比较简单，而且几乎不需要客户的参与就可以完成。不过也有一些前置条件，例如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;办公室中主机可以接入客户网络&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户服务器允许办公室网络中主机通过 TCP 或者 UDP 访问其任意或者指定的端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户办公室的 4G 网络信号要足够好，这样可以提供更好的外网速度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拥有服务器的 root 管理员权限(需要安装软件和修改系统配置)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过权衡利弊，我们最终使用的是第 4 个方法来搭建的，下面来讲讲搭建的过程。&lt;/p&gt;
&lt;h2 id=&#34;三搭建可以访问互联网的部署环境&#34;&gt;三、搭建可以访问互联网的部署环境&lt;/h2&gt;
&lt;p&gt;我们希望使用第 4 个方法来搭建部署的网络环境，通过测试客户的内网环境，几个前置条件都已满足，这样第 4 个方法的搭建过程不需要客户的参与就可以完成。首先要解决的是网络通路问题，我们在客户办公室添加了一台 4G 路由器，添加 4G 路由器之后的网络拓扑图如图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/go-through-the-system-firewall/network-topo-4g-router.png&#34; alt=&#34;network-topo&#34;&gt;&lt;/p&gt;
&lt;p&gt;部署控制主机连接好 4G 路由器之后，获取到一个 &lt;code&gt;192.168.8.106&lt;/code&gt; 的 IP，注意 4G 路由器的网段要与办公室网段不同，例如办公室网段是 192.168.137.0/24 (也就是子网掩码为 255.255.255.0)，4G  路由器的网段为 192.168.8.0/24，也就是说部署控制主机需要有两个网络接口(网卡)：一个接内网，一个接外网（4G 路由器），如果部署控制主机刚好有一个 RJ45 的以太网卡和一个WiFI网卡（很多笔记本电脑就是这样），那部署控制主机在硬件上就不需要在添加额外的硬件了。&lt;/p&gt;
&lt;p&gt;关于网络搭建过程中的使用到硬件就讲这些，各位读者可以根据自己的情况选用合适的网络设备，比如 4G 无线网卡，带 4G 模块的工控主机等等，原则上只要能建立一个互联网访问的通道就行了。&lt;/p&gt;
&lt;p&gt;接下来我们再一起探讨一下如果利用开源软件来搭建互联网访问的通道，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/go-through-the-system-firewall/network-topo-tunnel.png&#34; alt=&#34;network-topo&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在解决问题的思路应该更加清晰了：需要在机房服务器和办公室部署控制主机之间建立一个通道。建立通道可以使用的开源软件有不少，相信很多人因为某些原因都或多或少使用过，从我自己长期实际使用的经验来看，&lt;a href=&#34;https://github.com/fatedier/frp/blob/dev/README_zh.md&#34;&gt;frp&lt;/a&gt; 和 &lt;a href=&#34;https://www.wireguard.com/&#34;&gt;WireGuard&lt;/a&gt; 非常适合用在当前情况下建立通道，&lt;a href=&#34;https://github.com/ginuerzh/gost&#34;&gt;gost&lt;/a&gt; 也十分容易搭建 HTTP 或者 SOCK5 代理。&lt;/p&gt;
&lt;p&gt;可以用一句话来描述搭建的过程：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在机房一台服务器上面安装 frp 或 WireGuard 做服务端，在可以连接外网内网的部署控制主机上安装 frp  或 WireGuard 做客户端，并且在部署控制主机上安装 gost 服务启用  HTTP 代理服务，最后在服务器端的修改系统配置，让 yum 和 docker 拉镜像走 HTTP 代理。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为部署系统使用 HTTP 代理就够了，这样 frp + gost 的组合可能比 WireGuard + gost 的组合配置起来会更加简单，WireGuard 是一个可以用于 SDWAN 组网的高性能通道软件，本文就不说明如何使用它来搭建，如果对 WireGuard 搭建 SDWAN 感兴趣，可以自行研究一下或者留言私信给我。&lt;/p&gt;
&lt;p&gt;以下使用 frp + gost 来说明具体的搭建过程。&lt;/p&gt;
&lt;h3 id=&#34;31-准备需要的软件&#34;&gt;3.1 准备需要的软件&lt;/h3&gt;
&lt;p&gt;请根据自己部署控制主机对应的平台下载需要的软件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fatedier/frp/releases&#34;&gt;frp&lt;/a&gt; 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。
&lt;ul&gt;
&lt;li&gt;Windows x86_64 系统请下载 &lt;a href=&#34;https://github.com/fatedier/frp/releases/download/v0.34.3/frp_0.34.3_windows_amd64.zip&#34;&gt;frp_0.34.3_windows_amd64.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux x86_64 系统请下载 &lt;a href=&#34;https://github.com/fatedier/frp/releases/download/v0.34.3/frp_0.34.3_linux_amd64.tar.gz&#34;&gt;frp_0.34.3_linux_amd64.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MacOS 系统请下载 &lt;a href=&#34;https://github.com/fatedier/frp/releases/download/v0.34.3/frp_0.34.3_darwin_amd64.tar.gz&#34;&gt;frp_0.34.3_darwin_amd64.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ginuerzh/gost/releases&#34;&gt;gost&lt;/a&gt; 是 GO 语言实现的安全隧道
&lt;ul&gt;
&lt;li&gt;Windows x86_64 系统请下载 &lt;a href=&#34;https://github.com/ginuerzh/gost/releases/download/v2.11.1/gost-windows-amd64-2.11.1.zip&#34;&gt;gost-windows-amd64-2.11.1.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux x86_64 系统请下载 &lt;a href=&#34;https://github.com/ginuerzh/gost/releases/download/v2.11.1/gost-linux-amd64-2.11.1.gz&#34;&gt;gost-linux-amd64-2.11.1.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MacOS 系统请下载 &lt;a href=&#34;https://github.com/ginuerzh/gost/releases/download/v2.11.1/gost-darwin-amd64-2.11.1.gz&#34;&gt;gost-darwin-amd64-2.11.1.gz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果部署控制主机是 ARM 或者 MIPS 架构的，需要上面两个软件需要下载对应的版本来安装，在使用上没有任何差异。&lt;/p&gt;
&lt;h3 id=&#34;32-配置路由和安装软件&#34;&gt;3.2 配置路由和安装软件&lt;/h3&gt;
&lt;p&gt;frp 和 gost 安装都比较简单，上传到服务器上解压后就就可以了，我们只需要在其中一台机房服务器上安装 frp 作为服务端启动，机房其它服务器不需要安装 frp，总结一下需要进行的安装步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在部署控制主机上面配置路由，使得部署控制主机可以访问机房网络也可以访问互联网&lt;/li&gt;
&lt;li&gt;其中一台机房服务器上安装 frp，作为服务端启动&lt;/li&gt;
&lt;li&gt;部署控制主机上安装 gost，启动一个 HTTP 代理服务器&lt;/li&gt;
&lt;li&gt;部署控制主机上安装 frp，作为客户端启动&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下部署过程以部署控制主机系统为 MacOS，机房服务器系统为 CentOS 7.6 为例，如果读者在实际部署过程中由于系统与本文不同而遇到问题不知如何解决，比如服务器为 Ubuntu，部署机是 Windows 10，欢迎留言一起探讨。&lt;/p&gt;
&lt;h4 id=&#34;在部署控制主机上面配置路由&#34;&gt;在部署控制主机上面配置路由&lt;/h4&gt;
&lt;p&gt;如果部署控制主机和机房服务器在同一个子网，则不需要添加路由。由于本次部署控制主机和机房服务器不在一个子网，在接了两个网卡之后，在部署控制主机上的 IP 包是不知道如何路由到机房网络的，如果不做路由设置，172.22.0.0/16 网段会走系统默认的路由，可能无法访问到机房网络。所以在部署控制主机上（ MacOS系统）添加以下路由:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo route add -net 172.22.0.0/16 192.168.137.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果部署控制主机为 Linux 或者 Windows 也需要手动添加路由。&lt;/p&gt;
&lt;h4 id=&#34;在机房任意一台服务器上安装-frp&#34;&gt;在机房任意一台服务器上安装 frp&lt;/h4&gt;
&lt;p&gt;上传 frp_0.34.3_linux_amd64.tar.gz 到服务器，解压 frp_0.34.3_linux_amd64.tar.gz 安装包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tar -zxvf frp_0.34.3_linux_amd64.tar.gz 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;frp_0.34.3_linux_amd64/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;frp_0.34.3_linux_amd64/frps_full.ini
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;frp_0.34.3_linux_amd64/frps.ini
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;frp_0.34.3_linux_amd64/frpc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;frp_0.34.3_linux_amd64/frpc_full.ini
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;frp_0.34.3_linux_amd64/frps
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;frp_0.34.3_linux_amd64/LICENSE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;frp_0.34.3_linux_amd64/frpc.ini
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进入 frp_0.34.3_linux_amd64 目录并新建 frps-deployment.ini 文件，内容为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[common]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;bind_port&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;7000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找到 frps 命令后启动：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./frps -c frps-deployment.ini
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/11/30 06:53:01 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;I&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;service.go:128&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; frps tcp listen on 0.0.0.0:7000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/11/30 06:53:01 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;I&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;root.go:190&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; Start frps success
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果服务无法启动，可能是 7000 端口已经被占用或者是 frps 没有执行权限，请注意具体的报错信息。&lt;/p&gt;
&lt;h4 id=&#34;在部署控制主机上安装-gost&#34;&gt;在部署控制主机上安装 gost&lt;/h4&gt;
&lt;p&gt;解压 gost 包，并且添加执行权限&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gunzip gost-darwin-amd64-2.11.1.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ chmod +x gost-darwin-amd64-2.11.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动 HTTP 代理, 在端口 18080 上监听&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./gost-darwin-amd64-2.11.1 -L http://:18080
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;在控制主机上安装-frp&#34;&gt;在控制主机上安装 frp&lt;/h4&gt;
&lt;p&gt;解压 frp 安装包后在目录中新建 frpc-deployment.ini 文件，内容为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[common]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;server_addr&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;192.168.52.79&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;server_port&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;7000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[gost]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;tcp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;local_ip&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;127.0.0.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;local_port&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;18080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;remote_port&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;18080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;作为客户端启动 frpc&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./frpc -c frpc-deployment.ini
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/11/30 14:59:30 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;I&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;proxy_manager.go:300&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; proxy removed: &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/11/30 14:59:30 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;I&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;proxy_manager.go:310&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; proxy added: &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;gost&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/11/30 14:59:30 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;I&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;proxy_manager.go:333&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; visitor removed: &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/11/30 14:59:30 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;I&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;proxy_manager.go:342&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; visitor added: &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/11/30 14:59:30 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;I&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;control.go:246&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;f51d0bf5d26ef627&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; login to server success, get run id &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;f51d0bf5d26ef627&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;, server udp port &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/11/30 14:59:30 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;I&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;control.go:169&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;f51d0bf5d26ef627&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;gost&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; start proxy success
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;至此通道就搭建完成了，如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/go-through-the-system-firewall/network-topo-tunnel-proxy.png&#34; alt=&#34;network-topo&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;33-启用代理&#34;&gt;3.3 启用代理&lt;/h3&gt;
&lt;p&gt;机房服务器使用的都是 CentOS 7.6 的系统，需要用到的 yum 和 docker 也都支持通过 HTTP 代理进行软件包和容器镜像的下载，如果使用的是 ubuntu 系统，通过 apt 也可以配置为通过 HTTP 代理下载软件包，以下还是以 CentOS 7.6 系统为例。&lt;/p&gt;
&lt;h4 id=&#34;yum-启用-http-代理&#34;&gt;yum 启用 http 代理&lt;/h4&gt;
&lt;p&gt;修改 &lt;code&gt;/etc/yum.conf&lt;/code&gt; 文件，添加代理配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;proxy&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;http://127.0.0.1:18080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们测试一下代理是否成功&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo yum makecache
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Loaded plugins: fastestmirror
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Loading mirror speeds from cached hostfile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;epel/x86_64/metalink                                                                                                                                                                                                 |  &lt;span style=&#34;color:#099&#34;&gt;23&lt;/span&gt; kB  00:00:01     
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; * base: mirrors.neusoft.edu.cn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; * epel: ftp.iij.ad.jp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; * extras: ftp.sjtu.edu.cn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; * updates: ftp.sjtu.edu.cn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;base                                                                                                                                                                                                                 | 3.6 kB  00:00:00     
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker-ce-stable                                                                                                                                                                                                     | 3.5 kB  00:00:00     
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;epel                                                                                                                                                                                                                 | 4.7 kB  00:00:00     
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;extras                                                                                                                                                                                                               | 2.9 kB  00:00:00     
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;updates                                                                                                                                                                                                              | 2.9 kB  00:00:00     
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;2/3&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;: epel/x86_64/primary_db                                                                           20% &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[===================&lt;/span&gt;                                                                          &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;790&lt;/span&gt; kB/s | 4.6 MB  00:00:22 ETA 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代理看起来没有问题，我们来安装 git 试试。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo yum install -y git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Loaded plugins: fastestmirror
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Loading mirror speeds from cached hostfile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; * base: mirrors.neusoft.edu.cn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; * epel: d2lzkl7pfhq30w.cloudfront.net
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; * extras: ftp.sjtu.edu.cn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; * updates: ftp.sjtu.edu.cn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Resolving Dependencies
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--&amp;gt; Running transaction check
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---&amp;gt; Package git.x86_64 0:1.8.3.1-23.el7_8 will be installed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--&amp;gt; Processing Dependency: perl-Git &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; 1.8.3.1-23.el7_8 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; package: git-1.8.3.1-23.el7_8.x86_64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--&amp;gt; Processing Dependency: perl&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;Git&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; package: git-1.8.3.1-23.el7_8.x86_64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--&amp;gt; Running transaction check
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---&amp;gt; Package perl-Git.noarch 0:1.8.3.1-23.el7_8 will be installed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--&amp;gt; Finished Dependency Resolution
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Dependencies &lt;span style=&#34;color:#008080&#34;&gt;Resolved&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;============================================================================================================================================================================================================================================&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Package                                                 Arch                                                  Version                                                            Repository                                           &lt;span style=&#34;color:#008080&#34;&gt;Size&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;============================================================================================================================================================================================================================================&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Installing:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; git                                                     x86_64                                                1.8.3.1-23.el7_8                                                   base                                                4.4 M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Installing &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; dependencies:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; perl-Git                                                noarch                                                1.8.3.1-23.el7_8                                                   base                                                 &lt;span style=&#34;color:#099&#34;&gt;56&lt;/span&gt; k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Transaction &lt;span style=&#34;color:#008080&#34;&gt;Summary&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;============================================================================================================================================================================================================================================&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Install  &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; Package &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;+1 Dependent package&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Total download size: 4.5 M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Installed size: &lt;span style=&#34;color:#099&#34;&gt;22&lt;/span&gt; M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Downloading packages:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;1/2&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;: perl-Git-1.8.3.1-23.el7_8.noarch.rpm                                                                                                                                                                          |  &lt;span style=&#34;color:#099&#34;&gt;56&lt;/span&gt; kB  00:00:01
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;2/2&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;: git-1.8.3.1-23.el7_8.x86_64.rpm                                                                                                                                                                               | 4.4 MB  00:00:06
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Total                                                                                                                                                                                                       &lt;span style=&#34;color:#099&#34;&gt;669&lt;/span&gt; kB/s | 4.5 MB  00:00:06
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Running transaction check
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Running transaction &lt;span style=&#34;color:#0086b3&#34;&gt;test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Transaction &lt;span style=&#34;color:#0086b3&#34;&gt;test&lt;/span&gt; succeeded
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Running transaction
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Installing : perl-Git-1.8.3.1-23.el7_8.noarch                                                                                                                                                                                         1/2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Installing : git-1.8.3.1-23.el7_8.x86_64                                                                                                                                                                                              2/2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Verifying  : git-1.8.3.1-23.el7_8.x86_64                                                                                                                                                                                              1/2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Verifying  : perl-Git-1.8.3.1-23.el7_8.noarch                                                                                                                                                                                         2/2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Installed:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  git.x86_64 0:1.8.3.1-23.el7_8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Dependency Installed:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  perl-Git.noarch 0:1.8.3.1-23.el7_8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Complete!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;太令人激动了，我们的代理起作用了，接下来可以愉快的安装软件了。&lt;/p&gt;
&lt;h4 id=&#34;docker-启用-http-代理&#34;&gt;docker 启用 http 代理&lt;/h4&gt;
&lt;p&gt;首先需要通过 yum 安装 docker 服务，关于 docker 的安装本文不再说明，请参考官方文档 &lt;a href=&#34;https://docs.docker.com/engine/install/centos/&#34;&gt;Install Docker Engine on CentOS&lt;/a&gt;。安装完 docker 服务之后，通过以下步骤来配置&lt;a href=&#34;https://docs.docker.com/config/daemon/systemd/&#34;&gt; Docker 服务使用 HTTP 代理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建目录和文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkdir -p /etc/systemd/system/docker.service.d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo touch /etc/systemd/system/docker.service.d/http-proxy.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;添加以下内容到配置文件 http-proxy.conf 中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[Service]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;Environment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;HTTP_PROXY=http://127.0.0.1:18080&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;Environment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;NO_PROXY=localhost,127.0.0.1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重启 docker 服务，使得配置生效&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl daemon-reload
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl restart docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;验证配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl show --property&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;Environment docker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;Environment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;HTTP_PROXY&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;http://127.0.0.1:18080 &lt;span style=&#34;color:#008080&#34;&gt;NO_PROXY&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;localhost,127.0.0.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们来运行一个 docker 镜像试试&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo docker run hello-world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Unable to find image &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;hello-world:latest&amp;#39;&lt;/span&gt; locally
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;latest: Pulling from library/hello-world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0e03bdcc26d7: Pull &lt;span style=&#34;color:#0086b3&#34;&gt;complete&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Digest: sha256:e7c70bb24b462baa86c102610182e3efcb12a04854e8c582838d92970a09f323
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Status: Downloaded newer image &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; hello-world:latest
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello from Docker!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This message shows that your installation appears to be working correctly.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;To generate this message, Docker took the following steps:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 1. The Docker client contacted the Docker daemon.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 2. The Docker daemon pulled the &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hello-world&amp;#34;&lt;/span&gt; image from the Docker Hub.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;amd64&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 3. The Docker daemon created a new container from that image which runs the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    executable that produces the output you are currently reading.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 4. The Docker daemon streamed that output to the Docker client, which sent it
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    to your terminal.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;To try something more ambitious, you can run an Ubuntu container with:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; $ docker run -it ubuntu bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Share images, automate workflows, and more with a free Docker ID:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; https://hub.docker.com/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;For more examples and ideas, visit:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; https://docs.docker.com/get-started/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过代理拉取 docker 镜像也成功了，这样就可以直接从我们的公网上搭建的 docker registry 服务拉取待部署的镜像，真是太省事了。&lt;/p&gt;
&lt;h4 id=&#34;命令行全局启用代理&#34;&gt;命令行全局启用代理&lt;/h4&gt;
&lt;p&gt;也可以在 shell 中启用 HTTP 代理，请根据需要启用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#0086b3&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;HTTP_PROXY&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;”http://127.0.0.1:18080”
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;在机房其它服务器上使用-http-代理&#34;&gt;在机房其它服务器上使用 HTTP 代理&lt;/h4&gt;
&lt;p&gt;我们是把 frp 安装到 172.22.121.110 这台服务器上并启动了 frps 服务，通过 frp 的穿透，相当于在 172.22.121.110 这台服务器上启动了一个 HTTP 代理，在 172.22.121.110 本机上使用 http://127.0.0.1:18080 来使用 HTTP 代理，在机房其它服务器上则需要使用 http://172.22.121.110:18080 来使用 HTTP 代理。&lt;/p&gt;
&lt;h2 id=&#34;四实验测试环境的搭建&#34;&gt;四、实验测试环境的搭建&lt;/h2&gt;
&lt;p&gt;需要 CentOS 7 环境，且虚拟机不能访问外网&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 vagrant 启动一个 centos/7 虚拟机，并且使用桥接模式获取局域网 IP, 例如 IP 为 192.168.52.79&lt;/li&gt;
&lt;li&gt;在网关路由器上进行配置使得测试的 CentOS 7 虚拟机无法访问互联网，如果网关路由器是个linux based 的系统则可以尝试用 iptables 限制虚拟机访问互联网: &lt;code&gt;iptables -A FORWARD -s 192.168.52.79 -j DROP&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;五远程维护&#34;&gt;五、远程维护&lt;/h2&gt;
&lt;p&gt;通过前面关于 frp 的使用，不难看出来，只要在部署控制主机再启动一个 frp 客户端，把机房或者部署控制主机的 SSH 端口映射到到公网中的 frp 服务器可以了。当然这种情况下还在需要多做一些配置工作，比如在部署控制主机上配置好服务的自启动，然后把部署控制主机放在客户的办公室，在需要远程维护的时候，开机就好。&lt;/p&gt;
&lt;p&gt;对于远程维护，使用 frp 可能不太安全，毕竟直接把 SSH 端口暴露在公网之中，所以在这种情况下，推荐使用 WireGuard 进行 SDWAN 组网，把部署控制主机加入到自建的私有网络中。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>大象（Gradle）的故事：一见如故</title>
      <link>//lewang.dev/posts/2020-02-22-hello-gradle-1/</link>
      <pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2020-02-22-hello-gradle-1/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/gradle.png&#34; alt=&#34;gralde&#34;&gt;&lt;/p&gt;
&lt;p&gt;小码哥：“与大象（Gradle）一见如故？你就是 &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;？”&lt;br&gt;
大象：“对，我就是那个用来构建 Java 项目的 Gradle 大象。 ”&lt;br&gt;
小码哥：“我好像天天都在用你啊。看，我的项目都是用你构建的。”&lt;br&gt;
大象：“但你不一定真的认识我，你每次修改点构建代码时是不是都要问下谷哥哥（&lt;a href=&#34;https://www.google.com&#34;&gt;Google&lt;/a&gt;）或溢栈哥哥（&lt;a href=&#34;https://stackoverflow.com/questions/tagged/gradle&#34;&gt;StackOverflow&lt;/a&gt;）？”&lt;br&gt;
小码哥：“额。。。”&lt;br&gt;
大象：“我是你的老朋友了，不要天天如初见哦，咱们得多聊聊，我爸妈给我写了&lt;a href=&#34;https://docs.gradle.org/6.2/userguide/userguide.html&#34;&gt;传记&lt;/a&gt;（&lt;del&gt;文档&lt;/del&gt;），估计你也懒得细看，不如我给你做个自我介绍吧。”&lt;br&gt;
小码哥：“👌ok”&lt;br&gt;
大象：“你有用 InteliJ IDEA 吗？ ”&lt;br&gt;
小码哥：“对，用的社区版。”&lt;br&gt;
大象：“那我就用 InteliJ IDEA CE 版来给你介绍自己”。&lt;/p&gt;
&lt;h2 id=&#34;你好我是-gradle&#34;&gt;你好，我是 Gradle！&lt;/h2&gt;
&lt;p&gt;Gradle 是一个用来自动化构建项目的的工具，可以用来构建你常用的 Java、Kotlin 等 JVM 语言开发的项目。我的配置文件可以使用 Gvoovy 或者 Kotlin 来编写，不像隔壁前辈 Maven 那样，要写一大段 XML，你可以很开心的像写代码一样来调整我的配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/gradle-org-hero.png&#34; alt=&#34;gralde-org-hero&#34;&gt;&lt;/p&gt;
&lt;p&gt;其实我就是你的代码自动化产线，产线有几个工序（Task），你负责喂我代码，我负责打包（Jar/War/JavaDoc/Test）。是不是觉得与科幻片里面的工厂很像？&lt;/p&gt;
&lt;h2 id=&#34;创建项目&#34;&gt;创建项目&lt;/h2&gt;
&lt;p&gt;请打开你的 InteliJ IDEA CE，使用 idea 可以很方便的创建一个由我构建的项目(File &amp;gt; New &amp;gt; Project&amp;hellip;)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/new-project-with-intelij-1.png&#34; alt=&#34;new-project-with-intelij-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里在对话框的左边栏选择 Gradle，右边选择 Java 项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/new-project-with-intelij-2.png&#34; alt=&#34;new-project-with-intelij-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;输入好项目名之后点击 Finish 就可以啦。&lt;/p&gt;
&lt;h2 id=&#34;探索项目&#34;&gt;探索项目&lt;/h2&gt;
&lt;p&gt;idea 帮我们创建了一个 Java 项目，浏览项目很容易发现两个以 gradle 为结尾的文件： build.gradle 和 settings.gradle。我们来看一下它们俩的内容。&lt;/p&gt;
&lt;p&gt;settings.gradle&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rootProject&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;MyProject&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;build.gradle&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plugins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;java&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;group &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;org.example&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;version &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;1.0-SNAPSHOT&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sourceCompatibility &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1.8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;repositories &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mavenCentral&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    testCompile &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;group:&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;junit&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;junit&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;version:&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;4.12&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;小码哥插话：“settings.gradle 很好懂，给 rootProject.name 这个变量赋了一个值，但是 build.gradle 里面写的是什么啊？”&lt;br&gt;
大象：“gradle 的魔法确实就在 build.gradle 之中。build.gradle 是使用 Groovy 编写的脚本，我先介绍一下 Groovy 同学吧。”&lt;/p&gt;
&lt;h2 id=&#34;你好groovy-同学&#34;&gt;你好，Groovy 同学&lt;/h2&gt;
&lt;p&gt;Gradle 的构建脚本可以使用 Groovy 编写（Kotlin 也可以）。Groovy 也是一种 JVM 语言，并且与 Java 比较相似，写起来比 Java 要简洁得多 (Kotlin 也是)，Groovy 是 Java 的超集，也就是说 Java 代码可以当成是 Groovy 代码运行。我们来了解一下 Groovy，以便更容易读懂和修改 build.gradle。&lt;/p&gt;
&lt;h3 id=&#34;初识-groovy&#34;&gt;初识 Groovy&lt;/h3&gt;
&lt;p&gt;在 idea 中打开 Groovy 控制台（Tools &amp;gt; Groovy Console&amp;hellip;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/tools-groovy-console-1.png&#34; alt=&#34;tools-groovy-console-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;接着在控制台里输入一些 Java 代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/tools-groovy-console-2.png&#34; alt=&#34;tools-groovy-console-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击绿色三角形来运行这段代码，可以在下面的窗口看到输出&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/tools-groovy-console-3.png&#34; alt=&#34;tools-groovy-console-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;小码哥：“大象，你说这是 Java 代码，为什么没有定义 class 和 main 函数呢？”&lt;br&gt;
大象：“只是看起来是 Java，其实这个就是 Groovy 了，Grovvy 脚本不需要定义 class 和 main 函数就可以执行的，我们继续把它变得更 Groovy 一些吧。”&lt;/p&gt;
&lt;p&gt;由于 Groovy 会自动导入 System.out，我们可以把代码简写成这样&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/tools-groovy-console-4.png&#34; alt=&#34;tools-groovy-console-4&#34;&gt;&lt;/p&gt;
&lt;p&gt;是不是看起来与 Java 里面函数静态导入写起来一样，我们可以更进一步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Groovy 里面如果函数只有一个参数，那么括弧可以省略;&lt;/li&gt;
&lt;li&gt;语句末尾的分号也可以省略；&lt;/li&gt;
&lt;li&gt;单引号和双引号是（大部分情况下）可以替换（推荐用双引号，方便迁移到 Kotlin DSL）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/tools-groovy-console-5.png&#34; alt=&#34;tools-groovy-console-5&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在很清楚了：原来 println 是一个函数，在代码里面调用了它，并且给它参数传了一个字符串 my project。&lt;/p&gt;
&lt;h3 id=&#34;groovy-闭包groovy-closure&#34;&gt;Groovy 闭包(Groovy Closure)&lt;/h3&gt;
&lt;p&gt;提到闭包，应该或多或少都听说过，Gradle 的 build.gradle 脚本中大量使用了闭包，我们还是用一段代码来说明。&lt;/p&gt;
&lt;p&gt;先定义一个类&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/tools-groovy-console-6.png&#34; alt=&#34;tools-groovy-console-6&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个类看起来和 Java 没什么区别，我们再添加一个可以接受 Closure 类型参数的函数&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/tools-groovy-console-7.png&#34; alt=&#34;tools-groovy-console-7&#34;&gt;&lt;/p&gt;
&lt;p&gt;大象：“是不是看起来与 Java 8 的 Lambda 非常的像，比如 Function 接口？”&lt;br&gt;
小码哥：“是的，难道是一样的东西，只是不同语言写法不同？那在 Groovy 里面如何来使用闭包呢？”&lt;br&gt;
大象：“正是如此，我们来看下如何在 Groovy 里面来使用闭包吧。”&lt;/p&gt;
&lt;p&gt;首先需要创建一个 MyProject 实例，然后再调用 doTask 方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/tools-groovy-console-8.png&#34; alt=&#34;tools-groovy-console-8&#34;&gt;&lt;/p&gt;
&lt;p&gt;同样点击绿色三角形，运行这段代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/tools-groovy-console-9.png&#34; alt=&#34;tools-groovy-console-9&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们再回过头来看看 build.gradle, 比如这段代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    testCompile &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;group:&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;junit&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;junit&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;version:&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;4.12&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;是不是很好理解：脚本调用了 dependencies 方法，它的参数是一个闭包，在这个闭包里面又调用了 testCompile 方法，并传入了一个字典（Map）参数： group: &amp;lsquo;junit&amp;rsquo;, name: &amp;lsquo;junit&amp;rsquo;, version: &amp;lsquo;4.12&amp;rsquo;&lt;/p&gt;
&lt;p&gt;好了，Groovy 同学暂时就介绍到这里，我要继续介绍我自己了。&lt;/p&gt;
&lt;h2 id=&#34;探索-buildgradle&#34;&gt;探索 build.gradle&lt;/h2&gt;
&lt;p&gt;Gradle 最核心的部分就是 Project 和 Task 了 ，build.gradle 可以直接操控 Project 对象（org.gradle.api.Project 的实例) ，遵循“代码即配置”的基本原则。项目代码可以包括多个 build.gradle, 多个 Project 需要在 settings.gradle 定义。每一个 build.gradle 文件都会对应一个 Project 对象，我们每一个项目的构建信息都会存在对应的 Project 对象中。&lt;/p&gt;
&lt;p&gt;站在写代码的角度上可以这样来理解，Gradle 会根据 settings.gradle 定义为每个 Project 创建 org.gradle.api.Project 对象，之后会根据 build.gradle 的配置执行相应的任务（Task）。除了“代码即配置”这个原则之外，还有“约定即配置”这个原则。比如 Gradle 会有默认约定的 Java 项目结构（&lt;a href=&#34;https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_project_layout&#34;&gt;Java Plugin Project Layout&lt;/a&gt;），每一个 Gradle 项目也会约定一些默认的 Task 等。&lt;/p&gt;
&lt;p&gt;也就是说，Gradle 的 Project 构建过程是由一系列 Task 组成的，我们可以通过这个命令查看项目默认的有哪些 Task。好，我们把 idea 创建的 build.gradle 清空，然后执行下面的命令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gradle tasks
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到所有默认的 Task。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/gradle-tasks.png&#34; alt=&#34;gradle-tasks&#34;&gt;&lt;/p&gt;
&lt;p&gt;接着一步步恢复 idea 默认创建的 build.gradle，先往空的 build.gradle 文件中添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plugins &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;java&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以理解这段代码了么？没错，我们往 build.gradle 中添加了 Java 插件，这样就可以很方便的构建 Java 项目，再次查看 Task。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/gradle-tasks-java-plugin.png&#34; alt=&#34;gradle-tasks-java-plugin&#34;&gt;&lt;/p&gt;
&lt;p&gt;插件可以在 Project 中添加 Task，Gradle 会把这些 Task 构建成一个有向无环图（DAG，Directed Acyclic Graph），加了 Java 插件之后的 DAG 是这样的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/java-plugin-tasks-dag.png&#34; alt=&#34;java-plugin-tasks-dag&#34;&gt;&lt;/p&gt;
&lt;p&gt;每一个 Project 包括一系列的 Task，同样，每个 Project 也有很多的属性，例如添加这里代码来修改属性：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;group &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;org.example&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;version &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;1.0-SNAPSHOT&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sourceCompatibility &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1.8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以在 build.gradle 中对 Project 的属性进行修改，也可以像查看 Task 一样来查看 Project 所有的属性：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gradle properties
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;哇，Project 的属性还真不少（只截取了部分属性）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/gradle-properties.png&#34; alt=&#34;gradle-properties&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;自定义-task&#34;&gt;自定义 Task&lt;/h3&gt;
&lt;p&gt;Gradle 的构建过程包括三个阶段：初始化（Initialization）、配置（Configuration）和执行（Execution），为了弄清楚这三个阶段，我们在 build.gradle 中添加这样代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;println &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;task task1 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    println &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;config in task1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;task task2 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    doLast &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        println &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;do last in task2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    println &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;config in task2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;task task3 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    doFirst &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        println &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;do first in task3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    doLast &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        println &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;do last in task3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    println &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;config in task3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 settings.gradle 中添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;println &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;init&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gradle task2 task3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到这样的输出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/gradle-task-phase.png&#34; alt=&#34;gradle-task-phase&#34;&gt;&lt;/p&gt;
&lt;p&gt;从输出日志中可以清晰的看到，Gradle 第一步初始化，然后进行配置，最后执行具体任务，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/hello-gradle/gradle-build-phase.png&#34; alt=&#34;gradle-build-phase&#34;&gt;&lt;/p&gt;
&lt;p&gt;弄清楚构建过程之后，我们可以很容易根据我们的需要对 Task 进行自定义配置或者是新建一个 Task。&lt;/p&gt;
&lt;h2 id=&#34;老朋友你好&#34;&gt;老朋友，你好&lt;/h2&gt;
&lt;p&gt;大象：“我就说到这里，有没有一见如故的感觉？我的 API 非常多，想弄清楚我的细枝末节还是得去看文档，希望我的这个介绍能帮助到你去理解文档。 ”&lt;br&gt;
小码哥：“有种恍然大悟的感觉，配置 Gradle 确实就像写 Java 代码差不多，原来 Gradle 只用通过 build.gradle 想办法修改 Project 对象就可以了。哦对，我还个问题，gradlew 是什么啊？”&lt;br&gt;
大象：“呃，gradlew 我也不知道它是啥啊，你自己查查去吧。”&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://pyscript.net/&#34;&gt;PyScript 官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://anaconda.cloud/pyscript-python-in-the-browser&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pyodide.org/en/stable/&#34;&gt;Pyodide - 基于 WebAssembly 的 Python&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>WireGuard 使用简介</title>
      <link>//lewang.dev/posts/2019-10-30-wireguard-go-setup/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2019-10-30-wireguard-go-setup/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;搭建 VPN 方便连接无公网 IP 云主机进行开发，WireGuard 配置比 OpenVPN 要简单很多，WireGuard 是通过 Linux 内核模块的方式实现的，这样性能最好，但是只能用在 Linux 系统上。本文使用的  wireguard-go， 则是使用 Golang 实现的 WireGuard 协议，属于用户空间(User Space)的实现，性能没有内核模块方式好，但好处就是跨平台且更简单易用。&lt;/p&gt;
&lt;p&gt;VPN 的用处非常的多，不像 &lt;a href=&#34;https://github.com/fatedier/frp&#34;&gt;frp&lt;/a&gt; 之类的端口穿透应用，它是直接建立虚拟的网络，网络中的每个客户端也都可以拥有自己独立的 IP，于是测试调试就没有了端口的限制，非常的方便。&lt;/p&gt;
&lt;p&gt;除了方便安全连接云服务器，还可以通过 VPN 搭建工业设备的远程部署和维护的解决方案。&lt;/p&gt;
&lt;h2 id=&#34;编译-wireguard-go&#34;&gt;编译 wireguard-go&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 使用 GitHub 的源码镜像，速度会快一些&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone git@github.com:wireguard/wireguard-go.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 在 MacOS 下交叉编译&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;CGO_ENABLED&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;GOOS&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;linux &lt;span style=&#34;color:#008080&#34;&gt;GOARCH&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;amd64 go build -v -o &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;wireguard-go&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Linux 环境下直接编译&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go build -v -o &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;wireguard-go&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp wireguard-go /usr/sbin/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;编译-wireguard-tools&#34;&gt;编译 WireGuard tools&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone git@github.com:wireguard/wireguard.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 安装依赖&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;## debian&amp;amp;ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install libmnl-dev libelf-dev
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;## centos&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo yum install libmnl-devel elfutils-libelf-devel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;cd&lt;/span&gt; wireguard/src/tools
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo make install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置-wireguard&#34;&gt;配置 WireGuard&lt;/h2&gt;
&lt;p&gt;生成密钥&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;cd&lt;/span&gt; /etc/wireguard
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wg genkey | tee server_privatekey | wg pubkey &amp;gt; server_publickey
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成服务器端配置文件 wg0.conf&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;[Interface]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;PrivateKey = &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;$(&lt;/span&gt;cat server_privatekey&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;Address = 10.0.0.1/24 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;PostUp   = iptables -A FORWARD -i wg0 -o eth0 -j ACCEPT; iptables -A FORWARD -i eth0 -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;PostDown = iptables -D FORWARD -i wg0 -o eth0 -j ACCEPT; iptables -D FORWARD -i eth0 -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;ListenPort = 1194
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;MTU = 1420
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt;&amp;gt; wg0.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成客户端配置文件 client-wg0.conf&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;[Interface]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;PrivateKey = &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;$(&lt;/span&gt;cat client_privatekey&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;Address = 10.0.0.2/24
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;DNS = 8.8.8.8
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;MTU = 1420
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;[Peer]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;PublicKey = &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;$(&lt;/span&gt;cat server_publickey&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;Endpoint = &lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;server_ip&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;:1194
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;AllowedIPs = 0.0.0.0/0, ::0/0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;PersistentKeepalive = 30&amp;#34;&lt;/span&gt; | sed &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;/^#/d;/^\s*$/d&amp;#39;&lt;/span&gt; &amp;gt; client-wg0.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在服务器端开启数据包转发&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; &amp;gt; /proc/sys/net/ipv4/ip_forward
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;net.ipv4.ip_forward = 1&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/sysctl.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sysctl -p
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后在服务器端启动 WireGuard&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wg-quick up wg0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;客户端需要根据前面生成的配置文件进行配置&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wireguard.com&#34;&gt;https://www.wireguard.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@xtarin/%5Dwireguard%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-2ae1eb4bf670&#34;&gt;https://medium.com/@xtarin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linode.com/docs/networking/vpn/set-up-wireguard-vpn-on-ubuntu/&#34;&gt;https://www.linode.com/docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>树莓派系统日志配置</title>
      <link>//lewang.dev/posts/2019-09-19-rpi-log-config/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2019-09-19-rpi-log-config/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;树莓派 raspbian 系统日志默认的配置会导致日志过大而占用太多的存储空间，并且频繁写日志也可能减短 EMMC 和 SD 卡的寿命，需要重新配置来满足项目的需求。&lt;/p&gt;
&lt;h2 id=&#34;日志位置&#34;&gt;日志位置&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/syslog
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/daemon.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/mail.info
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/mail.warn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/mail.err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/mail.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/kern.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/auth.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/user.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/lpr.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/cron.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/debug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/messages
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置-rsyslog-与-logrotate&#34;&gt;配置 &lt;code&gt;rsyslog&lt;/code&gt; 与 &lt;code&gt;logrotate&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;rsyslog&lt;/code&gt; 的配置文件为 &lt;code&gt;/etc/rsyslog.conf&lt;/code&gt;, 找到其中 &lt;code&gt;RULES&lt;/code&gt; 段&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;###############
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#### RULES ####
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;###############
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# First some standard log files.  Log by facility.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;auth,authpriv.*                 /var/log/auth.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*.*;auth,authpriv.none          -/var/log/syslog
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#cron.*                         /var/log/cron.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#daemon.*                       -/var/log/daemon.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kern.*                          -/var/log/kern.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lpr.*                           -/var/log/lpr.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mail.*                          -/var/log/mail.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user.*                          -/var/log/user.log
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将其中 &lt;code&gt;daemon.*                       -/var/log/daemon.log&lt;/code&gt; 行注释掉，syslog中已经包含 daemon 的日志。&lt;/p&gt;
&lt;p&gt;修改 &lt;code&gt;rsyslog&lt;/code&gt; 的 &lt;code&gt;logrotate&lt;/code&gt; 配置 &lt;code&gt;/etc/logrotate.d/rsyslog&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/syslog
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/daemon.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        rotate 3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        daily
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        missingok
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        notifempty
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nodelaycompress
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        compress
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        postrotate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                invoke-rc.d rsyslog rotate &amp;gt; /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        endscript
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/mail.info
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/mail.warn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/mail.err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/mail.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/kern.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/auth.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/user.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/lpr.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/cron.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/debug
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/var/log/messages
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        rotate 3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        weekly
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        missingok
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        notifempty
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        compress
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nodelaycompress
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sharedscripts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        postrotate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                invoke-rc.d rsyslog rotate &amp;gt; /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        endscript
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将 &lt;code&gt;delaycompress &lt;/code&gt; 改为 &lt;code&gt;nodelaycompress &lt;/code&gt;，分割文件后立即压缩归档；另外 &lt;code&gt;rotate&lt;/code&gt; 都设置为 3&lt;/p&gt;
&lt;p&gt;立即测试一下配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo /usr/sbin/logrotate /etc/logrotate.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;写日志到内存&#34;&gt;写日志到内存&lt;/h2&gt;
&lt;p&gt;首先清空 &lt;code&gt;/var/log&lt;/code&gt; 目录下面的日志(如果日志不多，可以不用清空)。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;/etc/fstab&lt;/code&gt; 文件中添加以下内容, &lt;code&gt;/var/log&lt;/code&gt; 最大可以使用 100MB 内存，也同时给其他常用的写目录&lt;code&gt;/tmp&lt;/code&gt;、&lt;code&gt;/var/tmp&lt;/code&gt; 挂载到内存中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tmpfs /var/log tmpfs defaults,noatime,nosuid,mode=0755,size=100m 0 0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tmpfs /tmp tmpfs defaults,noatime,nosuid,size=10m 0 0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tmpfs /var/tmp tmpfs defaults,noatime,nosuid,size=10m 0 0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重启系统或者手动挂载文件系统使之生效。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何修改 Linux 用户的 UID 和组的 GID</title>
      <link>//lewang.dev/posts/2019-07-16-change-uid-gid-in-linux/</link>
      <pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2019-07-16-change-uid-gid-in-linux/</guid>
      <description>&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;p&gt;在使用 Docker 或者 NFS 的时候，需要文件系统挂在到不同的系统中拥有正确的读写权限，需要指定文件所属用户和组的 uid 和 gid。在创建用户和组的时候，系统会自动分配对应的值，这导致在不同的系统中很容易造成 uid 和 gid 不一样而造成读写权限混乱。&lt;/p&gt;
&lt;p&gt;例如在系统 A 中，用户 git 的 uid 和组 git 的gid 如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;sysops@cn-bj-aliyun-3 ~&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;$ id git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;uid&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;1001&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;git&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;gid&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;1001&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;git&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;groups&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;1001&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;git&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而系统 B 中的值如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;sysops@cn-bj-aliyun-3 ~&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;$ id git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;uid&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;998&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;git&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;gid&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;998&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;git&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;groups&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;998&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;git&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们在系统 A 以 git 用户创建目录或者文件:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;git@cn-bj-aliyun-3 data&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;$ ls -lh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;total 60K
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; git git  &lt;span style=&#34;color:#099&#34;&gt;100&lt;/span&gt; Jul  &lt;span style=&#34;color:#099&#34;&gt;5&lt;/span&gt; 23:22 file1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; git git  &lt;span style=&#34;color:#099&#34;&gt;400&lt;/span&gt; Dec &lt;span style=&#34;color:#099&#34;&gt;18&lt;/span&gt;  &lt;span style=&#34;color:#099&#34;&gt;2018&lt;/span&gt; file2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; git git  &lt;span style=&#34;color:#099&#34;&gt;349&lt;/span&gt; Dec &lt;span style=&#34;color:#099&#34;&gt;18&lt;/span&gt;  &lt;span style=&#34;color:#099&#34;&gt;2018&lt;/span&gt; file3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将这个目录挂在到 B 系统中时，将会出现这种情况:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;git@cn-bj-aliyun-3 data&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;$ ls -lh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;total 60K
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1001&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1001&lt;/span&gt;  &lt;span style=&#34;color:#099&#34;&gt;100&lt;/span&gt; Jul  &lt;span style=&#34;color:#099&#34;&gt;5&lt;/span&gt; 23:22 file1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1001&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1001&lt;/span&gt;  &lt;span style=&#34;color:#099&#34;&gt;400&lt;/span&gt; Dec &lt;span style=&#34;color:#099&#34;&gt;18&lt;/span&gt;  &lt;span style=&#34;color:#099&#34;&gt;2018&lt;/span&gt; file2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1001&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1001&lt;/span&gt;  &lt;span style=&#34;color:#099&#34;&gt;349&lt;/span&gt; Dec &lt;span style=&#34;color:#099&#34;&gt;18&lt;/span&gt;  &lt;span style=&#34;color:#099&#34;&gt;2018&lt;/span&gt; file3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就会导致在 B 系统中文件权限混乱，因为 B 系统中没有对应 uid 和 gid 的用户和组。接下来我们来修改 uid 和 gid，以下以修改系统 A 中的 git 为例。&lt;/p&gt;
&lt;h1 id=&#34;修改命令&#34;&gt;修改命令&lt;/h1&gt;
&lt;h3 id=&#34;修改-uid&#34;&gt;修改 UID&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo usermod -u &lt;span style=&#34;color:#099&#34;&gt;998&lt;/span&gt; git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;修改文件的所属用户&#34;&gt;修改文件的所属用户&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find / -user &lt;span style=&#34;color:#099&#34;&gt;1001&lt;/span&gt; -exec chown -h git &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;\;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;修改-gid&#34;&gt;修改 GID&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo groupmod -g &lt;span style=&#34;color:#099&#34;&gt;998&lt;/span&gt; git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;修改文件的所属用户-1&#34;&gt;修改文件的所属用户&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find / -group &lt;span style=&#34;color:#099&#34;&gt;1001&lt;/span&gt; -exec chgrp -h git &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;\;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;其它说明&#34;&gt;其它说明&lt;/h3&gt;
&lt;p&gt;另外在修改之前可以查看 &lt;code&gt;/etc/passwd&lt;/code&gt; 和 &lt;code&gt;/etc/group&lt;/code&gt; 文件，以便选取一个没有被使用的 uid 和 gid&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CentOS 7 上使用 pyenv 安装 Python 3.7.3</title>
      <link>//lewang.dev/posts/2019-05-29-centos7-pyenv-install-python-3/</link>
      <pubDate>Wed, 29 May 2019 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2019-05-29-centos7-pyenv-install-python-3/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;本文记录了在 CentOS 7.6 系统上通过 pyenv 安装 Python 3.7.3 的过程。&lt;/p&gt;
&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CentOS Linux release 7.6.1810 (Core)&lt;/li&gt;
&lt;li&gt;Kernel 3 3.10.0-957.el7.x86_64&lt;/li&gt;
&lt;li&gt;Pyenv 1.2.11&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装-pyenv&#34;&gt;安装 pyenv&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ curl https://pyenv.run | bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后根据提示把以下内容放到 &lt;code&gt;~/.bashrc&lt;/code&gt; 文件末尾&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Load pyenv automatically by adding
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# the following to ~/.bashrc:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export PATH=&amp;#34;/root/.pyenv/bin:$PATH&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eval &amp;#34;$(pyenv init -)&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eval &amp;#34;$(pyenv virtualenv-init -)&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;安装-python-373&#34;&gt;安装 Python 3.7.3&lt;/h2&gt;
&lt;p&gt;准备&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo yum -y install xz bzip2 bzip2-devel sqlite-devel gcc openssl-devel readline-devel zlib-devel libffi-devel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pyenv install 3.7.3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;验证&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pyenv versions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* system (set by /root/.pyenv/version)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  3.7.3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pyenv/pyenv/issues/1183&#34;&gt;https://github.com/pyenv/pyenv/issues/1183&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pyenv/pyenv-installer&#34;&gt;https://github.com/pyenv/pyenv-installer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pyenv/pyenv&#34;&gt;https://github.com/pyenv/pyenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Java 进阶要点</title>
      <link>//lewang.dev/posts/2019-03-06-keynotes-of-new-java/</link>
      <pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2019-03-06-keynotes-of-new-java/</guid>
      <description>&lt;p&gt;自己学习 Java 和用 Java 过程中的理解和备忘的知识点。&lt;/p&gt;
&lt;h2 id=&#34;jdk-11&#34;&gt;JDK 11&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Oracle 不在免费提供 LTS 版本了，包括 JDK 8&lt;/li&gt;
&lt;li&gt;ZGC, 可伸缩的、低延迟的垃圾收集器，STW 时间不超过 10ms&lt;/li&gt;
&lt;li&gt;Nashorn 标记为 Deprecate 了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jdk-9&#34;&gt;JDK 9&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;module&lt;/li&gt;
&lt;li&gt;try-catch 简化&lt;/li&gt;
&lt;li&gt;_ 为保留关键字&lt;/li&gt;
&lt;li&gt;var 将在 JDK 10 中作为关键字, 作为本地变量类型推断关键字&lt;/li&gt;
&lt;li&gt;字符串相关，主要是 Compact String, 用 byte[] 替换了 char[], char 在 Java 中占两个字节&lt;/li&gt;
&lt;li&gt;G1 作为默认垃圾回收器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jvm&#34;&gt;JVM&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;启动 JVM 相关的命令行参数&lt;/li&gt;
&lt;li&gt;G1 垃圾回收器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;内存&#34;&gt;内存&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JVM(Hotspot) 内存结构&lt;/li&gt;
&lt;li&gt;制造各种 OutOfMemery 和 StackOverflow&lt;/li&gt;
&lt;li&gt;各种 JVM 相关工具(jstat/jmap/jstack/jps 等)&lt;/li&gt;
&lt;li&gt;解决 FullGC 的问题&lt;/li&gt;
&lt;li&gt;引用：WeakRefrence/PhantomReference/SoftRefrence/FinalRefrence 等&lt;/li&gt;
&lt;li&gt;ClassLoader/URLClassLoader&lt;/li&gt;
&lt;li&gt;Spring Boot 的 ClassLoader&lt;/li&gt;
&lt;li&gt;自定义 ClassLoader&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多线程和并发&#34;&gt;多线程和并发&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JVM 的线程模型 1:1&lt;/li&gt;
&lt;li&gt;协程&lt;/li&gt;
&lt;li&gt;创建线程的方法&lt;/li&gt;
&lt;li&gt;线程同步 synchronzied/对象锁/类锁/锁方法/锁锁代码块&lt;/li&gt;
&lt;li&gt;线程池&lt;/li&gt;
&lt;li&gt;锁相关（Lock 接口和实现类）&lt;/li&gt;
&lt;li&gt;Condition&lt;/li&gt;
&lt;li&gt;volatile&lt;/li&gt;
&lt;li&gt;ThreadLocal 用途和实现&lt;/li&gt;
&lt;li&gt;并发（CAS/乐观锁/无锁/无等待/无阻塞）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;字节码&#34;&gt;字节码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基本结构&lt;/li&gt;
&lt;li&gt;操作字节码的工具 Javassist/ASM&lt;/li&gt;
&lt;li&gt;AOP&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;集合&#34;&gt;集合&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Collection,List,ArrayList,Vector,LinkedList, SkipList, Stack&lt;/li&gt;
&lt;li&gt;Queue&lt;/li&gt;
&lt;li&gt;HashMap/HashTable&lt;/li&gt;
&lt;li&gt;HashMap 扩容死循环问题&lt;/li&gt;
&lt;li&gt;LinkedHashMap&lt;/li&gt;
&lt;li&gt;TreeMap&lt;/li&gt;
&lt;li&gt;HashSet,TreeSet&lt;/li&gt;
&lt;li&gt;WeakHashMap&lt;/li&gt;
&lt;li&gt;并发相关的集合
&lt;ul&gt;
&lt;li&gt;ConcurrentHashMap&lt;/li&gt;
&lt;li&gt;CopyOnWriteArrayList&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;io&#34;&gt;IO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IO 模型&lt;/li&gt;
&lt;li&gt;NIO&lt;/li&gt;
&lt;li&gt;Non-blocking IO&lt;/li&gt;
&lt;li&gt;Java 8 IO 相关的接口和类&lt;/li&gt;
&lt;li&gt;Netty&lt;/li&gt;
&lt;li&gt;Vert.x&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;时间日期&#34;&gt;时间/日期&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SimpleDateFormat 问题&lt;/li&gt;
&lt;li&gt;Java 8&lt;/li&gt;
&lt;li&gt;Joda&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数值和二进制&#34;&gt;数值和二进制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数值类型在 Java 中的范围&lt;/li&gt;
&lt;li&gt;浮点类型有什么问题&lt;/li&gt;
&lt;li&gt;BigDecimal&lt;/li&gt;
&lt;li&gt;位运算&lt;/li&gt;
&lt;li&gt;格式化，有效数字&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;泛型&#34;&gt;泛型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;泛型使用中的一些点：类型擦除/父类中使用泛型的函数如何返回子类对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;异常&#34;&gt;异常&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;编译异常&lt;/li&gt;
&lt;li&gt;运行时异常&lt;/li&gt;
&lt;li&gt;非运行时异常&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>树莓派 CM3/CM3&#43; 刷写系统</title>
      <link>//lewang.dev/posts/2019-03-01-rpi-cm3-emmc-flashing/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2019-03-01-rpi-cm3-emmc-flashing/</guid>
      <description>&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;阅读&lt;a href=&#34;https://www.raspberrypi.org/documentation/hardware/computemodule/cm-emmc-flashing.md&#34;&gt;Flashing the Compute Module eMMC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;准备一个可以刷系统的底板，我用的是微雪&lt;a href=&#34;http://www.waveshare.net/shop/Compute-Module-IO-Board-Plus.htm&#34;&gt;Compute-Module-IO-Board-Plus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;步骤linux-系统下刷系统可以使用树莓派来刷机&#34;&gt;步骤(Linux 系统下刷系统，可以使用树莓派来刷机)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo apt install git libusb-1.0-0-dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone --depth=1 https://github.com/raspberrypi/usbboot &amp;amp;&amp;amp; cd usbboot &amp;amp;&amp;amp; make&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo ./rpiboot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;连好线，跳线部分见各自底板的手册
&lt;ul&gt;
&lt;li&gt;拔掉 USB SLAVE 1/2/3/4&lt;/li&gt;
&lt;li&gt;拔掉 SELECT 跳线帽&lt;/li&gt;
&lt;li&gt;将 BOOT ENABLE USB SLAVE 跳线帽接到 EN 端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo fdisk -l&lt;/code&gt; 查看磁盘名称，这里是 &lt;code&gt;/dev/sda&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo dd if=raspbian-lite.img of=/dev/sda bs=4MiB&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;刷入系统后，挂在启动分区，添加 &lt;code&gt;SSH&lt;/code&gt; 来开启 SSH 服务，&lt;code&gt;sudo mount /dev/sda1 /media&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd /media &amp;amp;&amp;amp; touch SSH&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;使用慧通科技httpshuitongtech出品的-huibox-700-底板&#34;&gt;使用&lt;a href=&#34;https://huitong.tech&#34;&gt;慧通科技&lt;/a&gt;出品的 HuiBox-700 底板&lt;/h2&gt;
&lt;p&gt;省略上述的第4步，其它步骤完全一样&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Docker 方式安装 Gitlab，没你想得那么简单</title>
      <link>//lewang.dev/posts/2018-12-18-gitlab-docker-install/</link>
      <pubDate>Tue, 18 Dec 2018 23:25:20 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2018-12-18-gitlab-docker-install/</guid>
      <description>&lt;h2 id=&#34;为什么要写这篇文章&#34;&gt;为什么要写这篇文章？&lt;/h2&gt;
&lt;p&gt;曾经几年前在 Docker 还没有广泛应用的时候，在公司使用过源码的方式安装和升级过 Gitlab，虽远没有 Docker 方便，因为自己对 Linux 系统的理解，所以整体上感觉还是挺简单的。这几年随着 Docker 的普及，使得安装 Gitlab 更加的容易，不仅方便了我这样的老鸟，也更方便了小白用户们。但是 Gitlab 官方的 &lt;a href=&#34;https://docs.gitlab.com/omnibus/docker/&#34;&gt;Docker 安装文档&lt;/a&gt;并没有写得很完善,
除了官方文档之外，检索出来的安装文档也是人云亦云，东拼西凑，结果也就是能运行起来，凑合着能用而已。避免出现下图中“我已经用 Docker 部署好啦”，其实已经翻车的情形。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/posts/docker-deployment.jpeg&#34; alt=&#34;docker-deployment&#34;&gt;&lt;/p&gt;
&lt;p&gt;我希望每做一件小事的时候也都能抱着“知其然知其所以然”的心态对待，用 Docker 方式安装 Gitlab，说简单来说就是一行命令的事儿，但是这样就够了吗？我看是不够的，所以就有了这篇文档。&lt;/p&gt;
&lt;h2 id=&#34;本文需要达成的事项&#34;&gt;本文需要达成的事项&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在 CentOS 7 系统中安装 Docker&lt;/li&gt;
&lt;li&gt;使用 Docker 方式安装中文版 Gitlab&lt;/li&gt;
&lt;li&gt;和宿主机器共用 22(SSH) 端口&lt;/li&gt;
&lt;li&gt;支持 SSH(22)/HTTPS(443) 方式推拉仓库&lt;/li&gt;
&lt;li&gt;使用 SMTP 方式配置通知邮箱(腾讯企业邮箱)&lt;/li&gt;
&lt;li&gt;改写默认的项目标签(Labels)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在-centos-7-系统中安装-docker&#34;&gt;在 CentOS 7 系统中安装 Docker&lt;/h2&gt;
&lt;p&gt;这部分参考 &lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/centos/&#34;&gt;Docker 的官方文档&lt;/a&gt;, 罗列一下安装步骤, 细节请看 &lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/centos/&#34;&gt;Docker 的官方文档&lt;/a&gt;。如果使用 root 用户安装，sudo 可以去掉。&lt;/p&gt;
&lt;h3 id=&#34;1-删除老版本-docker&#34;&gt;1. 删除老版本 Docker&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo yum remove docker &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;                  docker-client &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;                  docker-client-latest &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;                  docker-common &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;                  docker-latest &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;                  docker-latest-logrotate &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;                  docker-logrotate &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;                  docker-selinux &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;                  docker-engine-selinux &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;                  docker-engine
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-安装-docker-ce-的仓库配置&#34;&gt;2. 安装 Docker CE 的仓库配置&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo yum install -y yum-utils &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;  device-mapper-persistent-data &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;  lvm2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo yum-config-manager &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --add-repo &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    https://download.docker.com/linux/centos/docker-ce.repo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-安装仓库中最高版本-docker-ce&#34;&gt;3. 安装仓库中最高版本 Docker CE&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo yum install -y docker-ce
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4-启动-docker&#34;&gt;4. 启动 Docker&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo systemctl start docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5-验证-docker-是否安装成功&#34;&gt;5. 验证 Docker 是否安装成功&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo docker run hello-world
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使用-docker-方式安装中文版-gitlab&#34;&gt;使用 Docker 方式安装中文版 Gitlab&lt;/h2&gt;
&lt;p&gt;目前我的团队习惯使用中文版的 Gitlab 的，并且使用的版本是 &lt;code&gt;beginor/gitlab-ce:10.3.1-ce.0&lt;/code&gt;，所以还是以这个版本来说明安装配置过程。&lt;/p&gt;
&lt;p&gt;在启动 Gitlab 之前，创建几个目录作为 Docker 的卷，这样的配置或者升级 gitlab 的时候可以保留配置和数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo mkdir -p /data/var/lib/gitlab/etc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo mkdir -p /data/var/lib/gitlab/log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo mkdir -p /data/var/lib/gitlab/data
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动 Gitlab&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo docker run &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --detach &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --sysctl net.core.somaxconn&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --publish 8080:80 &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --publish 8022:22 &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --name gitlab &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --restart unless-stopped &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --volume /data/var/lib/gitlab/etc:/etc/gitlab &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --volume /data/var/lib/gitlab/log:/var/log/gitlab &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --volume /data/var/lib/gitlab/data:/var/opt/gitlab &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    beginor/gitlab-ce:10.3.1-ce.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个 Gitlab 的 Docker 镜像是基于  Ubuntu 16.04.3 LTS 这个版本来构建的，所以在 &lt;code&gt;docker exec -it gitlab /bin/bash&lt;/code&gt; 进入 Docker 容器之后跟使用 Ubuntu 就没有什么差别了。&lt;/p&gt;
&lt;p&gt;gitlab 容器中启动了很多服务，主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gitlab&lt;/li&gt;
&lt;li&gt;redis&lt;/li&gt;
&lt;li&gt;postgresql&lt;/li&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;li&gt;sshd&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过查看 Dockerfile 发现，除了可以使用 &lt;code&gt;docker exec -it gitlab /bin/bash&lt;/code&gt; 进入容器之外，还可以直接使用 SSH 登录到容器中。其实 Gitlab 这个镜像，并不符合 &lt;a href=&#34;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#decouple-applications&#34;&gt;Dockerfile 最佳实践规范&lt;/a&gt;, 因为将会有太多的服务在这个镜像构建的容器之中，不利于服务的扩容和重用。不过通过这种超级包的方式确实大大降低了用户的使用门槛，对于高段位选手，自然也会自己去拆分去解耦，进而去构建自己的镜像。&lt;/p&gt;
&lt;p&gt;讲到这里，gitlab 服务已经在运行了，大多数人也认为自己任务完成了，一切到此为止。但是对于有些许强迫症的人来说，是无法接受 HTTP 得用 8080 端口， SSH 得用 8022 端口，这样 Git 的 URL 就不太美观了。&lt;/p&gt;
&lt;p&gt;偷懒的人有个很简单的方法来解决这个端口的问题， 可以使用这样的命令启动 Docker&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo docker stop gitlab
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo docker rm gitlab
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo docker run &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --detach &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --sysctl net.core.somaxconn&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --publish 443:443 &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --publish 80:80 &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --publish 22:22 &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --name gitlab &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --restart unless-stopped &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --volume /data/var/lib/gitlab/etc:/etc/gitlab &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --volume /data/var/lib/gitlab/log:/var/log/gitlab &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --volume /data/var/lib/gitlab/data:/var/opt/gitlab &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    beginor/gitlab-ce:10.3.1-ce.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样有带来了新问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;80/443 将会被 gitlab 独占，宿主机器上 Nginx 等 HTTP/HTTPS 服务将无法使用 80/443&lt;/li&gt;
&lt;li&gt;22 将会被 gitlab 独占，那么宿主机器上的 SSHD 服务需要改为其它端口&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这两个新问题大概对于有些许强迫症的人来说也是无法接受的。 我们还是回到这样的方式启动 Gitlab&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo docker stop gitlab
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo docker rm gitlab
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo docker run &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --detach &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --sysctl net.core.somaxconn&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --publish 8080:80 &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --publish 8022:22 &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --name gitlab &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --restart unless-stopped &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --volume /data/var/lib/gitlab/etc:/etc/gitlab &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --volume /data/var/lib/gitlab/log:/var/log/gitlab &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    --volume /data/var/lib/gitlab/data:/var/opt/gitlab &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;    beginor/gitlab-ce:10.3.1-ce.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后寻找其它更好的解决方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 Nginx 代理 8080 端口，这样很容易实现 HTTP(80)/HTTPS(443) 端口共用&lt;/li&gt;
&lt;li&gt;共享宿主机器的 SSH(22) 端口，如果使用 git 这个账号登录，则转发 SSH 到 gitlab 的容器中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面来讲如何解决这两个问题。&lt;/p&gt;
&lt;h2 id=&#34;使用宿主机器上的-nginx-配置-http-和-https&#34;&gt;使用宿主机器上的 Nginx 配置 HTTP 和 HTTPS&lt;/h2&gt;
&lt;p&gt;使用宿主机器上的 Nginx 使得我们安装 Gitlab 更加灵活。先停用 Gitlab 容器中的 HTTPS 服务, 需要这样改写配置文件, 需要编辑
&lt;code&gt;/data/var/lib/gitlab/etc/gitlab.rb&lt;/code&gt; 文件相应的行，&lt;a href=&#34;https://docs.gitlab.com/omnibus/settings/nginx.html#using-a-non-bundled-web-server&#34;&gt;具体配置可以参考这里&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;external_url &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;https://gitlab.example.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nginx&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;listen_port&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nginx&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;listen_https&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改完成之后，可以在 Docker 容器中执行 &lt;code&gt;gitlab-ctl reconfigure&lt;/code&gt; 来使之生效。这样配置以后，容器中讲只提供 HTTP 服务，不会根据 &lt;code&gt;external_url&lt;/code&gt; 解析来自动启动 HTTPS 而导致日志中出现大量的缺少证书的日志。现在只需要配置宿主机器的 Nginx 就可以了。关于如何获取免费的 SSL 证书，这里就不在赘述了，读者可以自行搜索 Let&amp;rsquo;s Encrypt + Nginx 相关文章，如果没有域名，只有 IP，那可以试试 &lt;a href=&#34;https://www.trustocean.com/&#34;&gt;TrustOcean&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;gitlab-docker-和宿主服务器共享-ssh22-端口&#34;&gt;Gitlab Docker 和宿主服务器共享 SSH(22) 端口&lt;/h2&gt;
&lt;p&gt;Gitlab Docker 镜像中默认使用的 SSH 账户是 git，那能不能在宿主机器上也建一个账户 git，只是当 git 帐号进行操作的时候，我们转发命令到 gitlab 容器呢？答案是肯定的，宿主机器上非 git 帐号就不受影响了，还可以正常使用。&lt;/p&gt;
&lt;p&gt;我们在宿主机器上创建 git 账户，并且使他的 uid 和 gid 和容器中的值完全一样，Gitlab 容器中 uid 和 gid 都是 998, 修改宿主机器中的值，将便于未来容器的升级。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;adduser git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;id git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;uid&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;998&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;git&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;gid&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;998&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;git&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;groups&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;998&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;git&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要完成共享22端口，要求 gitlab 容器中的 git 账户的 uid 和 gid 和宿主机器上完全相同，这样读取 SSH Key 时就不会有权限问题。关于如何修改两个系统中 git 账户的 uid 和 gid，可以通过命令 &lt;code&gt;usermod&lt;/code&gt; 和 &lt;code&gt;groupmod&lt;/code&gt; 手动修改 git 用户的 uid 和 gid&lt;a href=&#34;//lewang.dev/posts/2019-07-16-change-uid-gid-in-linux&#34;&gt;参考文档&lt;/a&gt;。或者通过编辑 &lt;code&gt;/data/var/lib/gitlab/etc/gitlab.rb&lt;/code&gt; 这个配置文件，修改其中的行，来使用其他的用户&lt;a href=&#34;https://docs.gitlab.com/omnibus/settings/configuration.html#specify-numeric-user-and-group-identifiers&#34;&gt;具体请参考这里&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;other-git&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;group&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;other-git&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;uid&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;gid&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改完成之后，可以在 Docker 容器中执行 &lt;code&gt;gitlab-ctl reconfigure&lt;/code&gt; 来使之生效.&lt;/p&gt;
&lt;p&gt;在宿主机器上切换到 git 账户：&lt;code&gt;su - git&lt;/code&gt; 然后执行 &lt;code&gt;ln -s /data/var/lib/gitlab/data/.ssh .ssh&lt;/code&gt; 与 gitlab 容器共享 .ssh 下面的内容。为了在宿主机器上可以使用 git 账户无密码登录到 gitlab 容器中，需要创建在 .ssh 目录中添加一组密钥，并且把公钥加到 .ssh/authorized_keys 文件中去。&lt;/p&gt;
&lt;p&gt;在宿主机器上执行:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-keygen -t rsa -P &amp;#39;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;添加 &lt;code&gt;no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty&lt;/code&gt; 到 &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; 所在的行首，结果看起来是这样的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AAAAB3NzaC1yc2EAAA......CzGuj git@cn-bj-aliyun-3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;登录测试一下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh -p &lt;span style=&#34;color:#099&#34;&gt;8022&lt;/span&gt; 127.0.0.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;观察到 &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; 其它行都是这样&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;command&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;/opt/gitlab/embedded/service/gitlab-shell/bin/gitlab-shell key-32&amp;#34;&lt;/span&gt;,no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AAAAB3NzaC1yc2EAA......hOtpAl7J
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在宿主机看来，每次git账户进行操作是都会执行 &lt;code&gt;/opt/gitlab/embedded/service/gitlab-shell/bin/gitlab-shell&lt;/code&gt;, 我们恰好可以使用这个脚本来实现转发。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p /opt/gitlab/embedded/service/gitlab-shell/bin/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch gitlab-shell
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod +x gitlab-shell
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并且输入以下内容到 &lt;code&gt;/opt/gitlab/embedded/service/gitlab-shell/bin/gitlab-shell&lt;/code&gt; 中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-weight:bold;font-style:italic&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#999;font-weight:bold;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh -p &lt;span style=&#34;color:#099&#34;&gt;8022&lt;/span&gt; -o &lt;span style=&#34;color:#008080&#34;&gt;StrictHostKeyChecking&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;no git@127.0.0.1 &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;SSH_ORIGINAL_COMMAND=\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;$SSH_ORIGINAL_COMMAND&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;\&amp;#34; &lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;$0&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;$@&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一切就绪了， 可以使用 &lt;code&gt;https://gitlab.example.com/repo.git&lt;/code&gt; 或者 &lt;code&gt;git@gitlab.example.com:repo.git&lt;/code&gt; 这样的 URL 了。&lt;/p&gt;
&lt;h2 id=&#34;使用-smtp-方式配置通知邮箱腾讯企业邮箱&#34;&gt;使用 SMTP 方式配置通知邮箱(腾讯企业邮箱)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.gitlab.com/omnibus/settings/smtp.html&#34;&gt;Gitlab SMTP 文档参考这里&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gitlab_rails&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;smtp_enable&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gitlab_rails&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;smtp_address&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;smtp.exmail.qq.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gitlab_rails&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;smtp_port&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;465&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gitlab_rails&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;smtp_user_name&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;xxxx@xx.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gitlab_rails&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;smtp_password&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gitlab_rails&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;smtp_authentication&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;login&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gitlab_rails&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;smtp_enable_starttls_auto&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gitlab_rails&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;smtp_tls&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gitlab_rails&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;gitlab_email_from&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;xxxx@xx.com&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gitlab_rails&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;smtp_domain&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;exmail.qq.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;改写默认的项目标签labels&#34;&gt;改写默认的项目标签(Labels)&lt;/h2&gt;
&lt;p&gt;添加丰富的标准，方便进行项目管理。修改 &lt;code&gt;issues_labels.rb&lt;/code&gt; 文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;labels &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;优先级:P0(紧急)&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;#E99695&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;立即处理&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;优先级:P1(高)&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;#E99695&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;优先处理&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;优先级:P2(中)&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;#E99695&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;有时间再处理&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;优先级:P3(低)&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;#E99695&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;暂不处理&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;分类:BUG&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;#D4C5F9&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;发现的BUG&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;分类:功能增强&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;#D4C5F9&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;增强已有的功能，属于优化的环节&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;分类:功能完善&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;#D4C5F9&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;完善功能&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;分类:文档修改&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;#D4C5F9&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;只是做文档修改&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;分类:新功能&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;#D4C5F9&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;新的功能和需求&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;项目:已上线&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;#C5DEF5&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;已发布上线&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;项目:已排期&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;#C5DEF5&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;已经安排了开发时间milestone&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;项目:已确认&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;#C5DEF5&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;功能已经确认，后续进行排期&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;项目:延后&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;#C5DEF5&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;功能无法确定是否开发，延期处理&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;项目:开发中&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;#C5DEF5&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;功能正在开发&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;项目:待讨论&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;#C5DEF5&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;需求已经提出，但是需要讨论是否需要开发&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;项目:测试中&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;#C5DEF5&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;功能已经完成开发，正在测试&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;使用 Docker 方式安装 Gitlab 部署过程很简单，但是想达到一个理想的配置状况还是挺繁琐的，Docker 并不是治疗百病的良药，打铁还得自身硬。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>有关 2017 流水账和胡思乱想的记录</title>
      <link>//lewang.dev/posts/2017-12-31-year-end-reviews-of-2017/</link>
      <pubDate>Sun, 31 Dec 2017 00:08:25 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2017-12-31-year-end-reviews-of-2017/</guid>
      <description>&lt;p&gt;好久没有写过文字了，前几篇文也是自己从 Google Doc 中摘出来的工作日志，拿来凑凑数，刷新下 Github 的时间线，有点儿不太像话。看看自己书桌上叠起来超过一尺高的新书才知道，想看的还没来得及看完，想学的也还没来得及学会，想做的也没有做得很好，一年就过去了。2017 是我来魔都的第 5 年，回想这 5 年，自己的成长还是很多的，但 2017 这一年，好像与 2016 并没有什么大的不同，这让自己感到很担忧。&lt;/p&gt;
&lt;p&gt;在 2017 年的最后几天，终于离开了自己熟悉的工作环境，从自己的舒适空间加入了一个新的环境，我想这就是改变的开始，一个新的起点。&lt;/p&gt;
&lt;p&gt;2017 是平淡的，可能和未来的每一年也不会有太大差别，尽管我不希望这样。元旦假期这 3 天有空的时候都在回想，但是又想不起有那些特别印象深刻的事情，以至于总结都不太好写下去。我想那不如就回想几个和自己有关系的场景，做一个清单好了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bye 2017&lt;/li&gt;
&lt;li&gt;区块链和比特币&lt;/li&gt;
&lt;li&gt;人工智能（AI）&lt;/li&gt;
&lt;li&gt;物联网大数据&lt;/li&gt;
&lt;li&gt;Insurtech 和 Fintech&lt;/li&gt;
&lt;li&gt;关于个人职业发展的思考&lt;/li&gt;
&lt;li&gt;Hello 2018&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bye-2017&#34;&gt;Bye 2017&lt;/h2&gt;
&lt;h3 id=&#34;编程语言学习&#34;&gt;编程语言学习&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Golang：完成基本语法学习（官方文档和《Go 语言实战》），可以无障碍阅读 Golang 项目代码（《自己动手写 Java 虚拟机》），并且可手动完成简单 Golang 项目用 Python 重写，主要有 eureka client&lt;/li&gt;
&lt;li&gt;Kotlin：除协程外，完成官方文档中所有语言部分的学习内容，并使用 kotlin 开发了 2 个项目，其中一个是用 kotlin 重写了 &lt;a href=&#34;https://github.com/apereo/cas&#34;&gt;Aprereo CAS&lt;/a&gt; 的核心功能&lt;/li&gt;
&lt;li&gt;TypeScript：完成基本语法学习，目前没有实际应用的场景，希望从 2018 起，自己在需要写 JavaScript 的地方，全部用 TypeScript 来代替&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;书籍阅读&#34;&gt;书籍阅读&lt;/h3&gt;
&lt;p&gt;阅读量太少，希望在 2018 年里能增大阅读量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;技术类
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/27084306/&#34;&gt;《图说区块链》&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;严格讲不算技术类书籍&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26802084/&#34;&gt;《自己动手写 Java 虚拟机》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/27015617/&#34;&gt;《Go 语言实战》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26340992/&#34;&gt;《贝叶斯思维》&lt;/a&gt;未读完&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26647951/&#34;&gt;《Spark 高级数据分析》&lt;/a&gt;未读完&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26821357/&#34;&gt;《垃圾回收的算法和实现》&lt;/a&gt;未读完&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26708119/&#34;&gt;《机器学习》&lt;/a&gt;未读完&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文艺类
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://book.douban.com/subject/1770782/&#34;&gt;《追风筝的人》&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;今年读到最长的一篇小说， 从作者笔下故事了解了阿富汗的人文历史，很是感动和惊讶。另外就是觉得译者也很厉害，从头读到尾，除了人名，没觉得是在读一本英文翻译过来的书&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://book.douban.com/subject/2143732/&#34;&gt;《灿烂千阳》&lt;/a&gt;未读完&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://book.douban.com/subject/1467022/&#34;&gt;《上帝掷骰子吗》&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;感觉写这本书的作者应该是个天才，搜了一下，很神秘的作者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://book.douban.com/subject/26742663/&#34;&gt;《乡关何处》&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看着也挺有意思的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://book.douban.com/subject/4729583/&#34;&gt;《野火集》&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读晚了，读的大陆删节版，我觉得每一个人都应该读下这本书&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://book.douban.com/subject/11445548/&#34;&gt;《自私的基因》&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://book.douban.com/subject/27180566/&#34;&gt;《创业者的窘境》&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看完觉得最该读这本书的人应该是我老婆&lt;/li&gt;
&lt;li&gt;还有就是身边的亲密好友或同学&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://book.douban.com/subject/25985021/&#34;&gt;《人类简史》&lt;/a&gt;未读完&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kindle 版，用手机看的，亚马逊真牛逼，让我买了一个 kindle 放在家里吃灰&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;开源技术&#34;&gt;开源技术&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;计划搭建一个开源物联网平台，还没有想好具体要做的事情，所以没有什么进展&lt;/li&gt;
&lt;li&gt;整理了常用的 docker templates，docker 和 python 一样成为自己不可或缺的工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;家庭网络&#34;&gt;家庭网络&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;升级了硬件和软件，让家里无线网络有了更好的覆盖，并且让所有家庭联网设备都可以自由的访问互联网&lt;/li&gt;
&lt;li&gt;儿子最喜欢的应用是 Youtube Kids&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;区块链和比特币&#34;&gt;区块链和比特币&lt;/h2&gt;
&lt;p&gt;不记得是哪一天了，大约是在几个月之前，和同事在兰州料理吃午饭，这段时间大家都在讨论 ICO，区块链，交易所的事情，我突然想起自己在 2013 年的时候曾经关注过比特币和区块链，并且那个时候买了一些瑞波币，于是回去查了一下，私钥和地址都还在，并且由此莫名其妙赚到了人生的“第一桶金”。&lt;/p&gt;
&lt;p&gt;区块链（主要是数字货币、交易所和 ICO）在 2017 这一年全面爆发，各行各业的创业者都在想如何跟区块链技术搭上边，用区块链行业里的话来讲：区块链技术就是未来。但是大家谈论的最多的还是代币或者加密货币交易，比特币它自身就带着商业模式，大概只需要一个 DEMO 就可以大获成功。&lt;/p&gt;
&lt;p&gt;我比较认同 Coinbase 他们的&lt;a href=&#34;https://blog.coinbase.com/the-vision-mission-and-strategy-for-coinbase-944b79a64a7c&#34;&gt;愿景之一&lt;/a&gt;：为全世界的“低端人口”提供金融服务。不过 Coinbase 他们却把中国用户抛弃了。要是谈论金融服务，那又得思考，什么样的金融服务才是我等“低端人口”需要的。大家都在号称在做“普惠金融”，所以看看目前各类公司都在做什么，便可略知一二，很多时候，别人比我们自己还了解我们自己。&lt;/p&gt;
&lt;h2 id=&#34;人工智能ai&#34;&gt;人工智能（AI）&lt;/h2&gt;
&lt;p&gt;我想 2017 年的每一个技术人都应该从各种媒体渠道听说过 AlphaGo 的事迹，仿佛至此之后，人工智能变得特别的火，铺天盖地都是 AI 将要取代人类的信息。在 2017 年最后一个月里，有幸参加了 Google Developer Day 2017（GDD2017）大会，当然大会主题基本也都是 AI/IOT/Bigdata 相关的东西。记得李飞飞演讲中的这句话：The AI has changed the world，and who will change the AI？是的，Tensorflow API 工程师们，得好好思考一番了。&lt;/p&gt;
&lt;p&gt;另外有件事，我本人在读研期间是研究数据库方向，最近 Jeff Dean 的论文 &lt;a href=&#34;https://arxiv.org/abs/1712.01208&#34;&gt;《The Case for Learned Index Structures》&lt;/a&gt; 把机器学习带到了数据库研究领域，我想很快，类似思路就会出现在计算机科学相关领域，一下子仿佛又打开了一扇窗的感觉。对于我来讲，目前我希望自己弄清楚人工智能，机器学习，深度学习这几个名词之间的关系是怎样的，不至于在茶余饭后瞎扯淡时不知道别人在讨论什么就行。&lt;/p&gt;
&lt;h2 id=&#34;物联网大数据&#34;&gt;物联网大数据&lt;/h2&gt;
&lt;p&gt;把物联网和大数据放在一起应该是一个超热的话题了。在这两个领域，常见情景下技术方案已经没有任何所谓的技术壁垒。各大云厂商（Google，AWS，MS，Aliyun等等）都推出或者增强了自己的物联网平台以及配套设施，智能硬件门槛也变得非常的低，让创业者或者企业不用费太大力气就可以搭建数据采集平台。&lt;/p&gt;
&lt;p&gt;短板效应不在：除了厂商提供云服务外，自行搭建也不再是难题。各种开源软件和组件都已经经过了长期的验证，只要用好了这些软件或者服务，相当于全世界最牛的程序员都在为你“打工”。这也是我计划搭建开源物联网平台的初衷。&lt;/p&gt;
&lt;p&gt;2017 年，NB-IoT 的新闻也越来越多，万物相连的未来已经到来。&lt;/p&gt;
&lt;h2 id=&#34;insurtech-和-fintech&#34;&gt;Insurtech 和 Fintech&lt;/h2&gt;
&lt;p&gt;就我个人而言，头次把这两个词放在一起的是在一场面试上。我在前家公司工作的 4 年半时间里，公司发展得很慢，远远低于我的预期。从开始的智能硬件创业到最近（2017）的 Insurtech，业务虽然有转型，但是总能看到最初 UBI 车险的影子。保险是一个强监管的行业，里面水很深，但也到处都是机会。&lt;/p&gt;
&lt;p&gt;像金融服务一样，越来越多的人，在各种场景下都需要各类保险来增加自身抗风险的能力。2017 年是我深入了解保险业和保险科技，包括但不限于车险、运费险、健康险以及各类创新险的元年，也是我进入金融科技领域（互联网金融）的元年。&lt;/p&gt;
&lt;p&gt;到了今天，除了维持银行对我的用户等级的要求，一般情况下，我已经全部使用各类新兴的理财 APP 管理自己的血汗钱了，并且只需要在 APP 上简单的按几下，各类账户就自动开通，并且收益率很容易就可以跑赢 CPI。&lt;/p&gt;
&lt;p&gt;目前自己2017年自己用过的理财 APP（除银行/证券 APP 外） 有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理财通（在微信钱包九宫格里，总体年收益率 5%，组成：活期 74% + 基金 26% ）&lt;/li&gt;
&lt;li&gt;陆金所（各类抵用券大概有几百块，总体年收益率大约有 7.6%, 组成：定期（企业融资） 85% + 活期 5% + 基金 10%）&lt;/li&gt;
&lt;li&gt;挖财宝（刚刚开始用，目测第一个月投入 1w，大概会有 200 左右的收益）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;行业总是在不断的发展和变化的，自己也在不断的成长。&lt;/p&gt;
&lt;p&gt;2018 年希望理财方面能增加股票（主要是美股和港股）和指数型基金比例，稍微提高下自己对风险的耐受度。&lt;/p&gt;
&lt;h2 id=&#34;关于个人职业发展的思考&#34;&gt;关于个人职业发展的思考&lt;/h2&gt;
&lt;p&gt;前几天看到自己的母校天大发了文章列了 2012 年到 2017 年这 5 年学校的变化，我看完后大为感叹：明显这 5 年学校的发展变化大大超过了我待在学校的 8 年。跳出学校这个小群里，整个社会这 5 年也是变化特别大的：比如北上广深等城市房价的暴涨，车辆保有量的暴增；再看看看互联网行业：BAT 中 B 的掉队，以及无数新兴行业颠覆者的出现。自己虽身在其中却只能作为浪潮中一个好不起眼的存在，去看着别人战火烽烟，我希望自己也能真正的进入战场，有对手（或者别人把你当对手）拼个你死我活（一同成长）。&lt;/p&gt;
&lt;p&gt;带着这样的天马行空的梦想，自己从毕业到现在一直都在很小，甚至是微小的创业公司工作。刚好前几天在朋友圈看到一篇讲职业规划的文章（&lt;a href=&#34;https://mp.weixin.qq.com/s/39oRJN20kQkzRP5D9fXBMg&#34;&gt;牛人都需要职场规划指导，何况平凡如你我&lt;/a&gt;）, 自己看完后是有些感悟的。&lt;/p&gt;
&lt;p&gt;就这篇文章里来讲，我就是一个最好的反例。就像软件设计或者建筑设计一样，很多事情都是有范式的（或者模式），只要大家按照范式来做，一定不会差得太远。这件事，自己爱折腾的个性也就恰好体现出来了：我自以为范式是给一般人准备的，却没料想到自己其实就是一般人，而只是自己不太愿意承认而已。&lt;/p&gt;
&lt;p&gt;另外还有一个就是忽略了平台（大公司/明星公司）威力：一个好平台可能就是一条捷径或者是一个招牌。&lt;/p&gt;
&lt;p&gt;不过，我还是觉得选择是没有对和错的，也没有好和坏，只要知道自己要干什么就行。&lt;/p&gt;
&lt;h2 id=&#34;hello-2018&#34;&gt;Hello 2018&lt;/h2&gt;
&lt;p&gt;2018 希望自己能努力工作，努力学习，好好生活。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LVM 实战记录</title>
      <link>//lewang.dev/posts/2017-08-03-lvm-in-action/</link>
      <pubDate>Thu, 03 Aug 2017 23:55:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2017-08-03-lvm-in-action/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;阿里云云主机两块 100G 的云盘合一个逻辑卷（LV）来使用，单个的 100G 磁盘不够用，需要合在一起使用，并且方便以后扩容&lt;/p&gt;
&lt;h2 id=&#34;基本知识&#34;&gt;基本知识&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;磁盘 /dev/xvdb /dev/xvdc&lt;/li&gt;
&lt;li&gt;分区, 使用 fdisk 进行分区 fdisk &amp;gt; n &amp;gt; p &amp;gt; 1..4, 主分区最多只有4个&lt;/li&gt;
&lt;li&gt;准备分区后，将分区类型变为 LVM 分区，fdisk &amp;gt; t &amp;gt; 8e, 8e 是 LVM 类型 ID&lt;/li&gt;
&lt;li&gt;物理卷（PV），卷组（VG），逻辑卷（LV），从磁盘分区创建 PV，通过 PV 创建 VG 或者把 PV 加入已有的 VG，在 VG 上创建 LV，LV 看起来就是逻辑的上磁盘，使用和真实的磁盘没什么明显区别, 在 LV 上构建文件系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建&#34;&gt;创建&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;创建物理卷 pvcreate  /dev/xvdb1，对分区进行操作&lt;/li&gt;
&lt;li&gt;创建 vg0 卷组 vgcreate vg0 /dev/xvdb1&lt;/li&gt;
&lt;li&gt;查看卷组 vgdisplay， 可以看到卷组有多大&lt;/li&gt;
&lt;li&gt;在 vg0 上创建 data 逻辑卷 lvcreate -L 99G -n data vg0 或者 lvcreate -l 25556 -n data vg0&lt;/li&gt;
&lt;li&gt;创建文件系统 mkfs.ext4 /dev/vg0/data&lt;/li&gt;
&lt;li&gt;挂载到系统目录即可使用 mount /dev/vg0/data /mnt 或者在 /etc/fstab 添加一行，然后 mount -a&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;添加磁盘&#34;&gt;添加磁盘&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;创建物理卷 pvcreate  /dev/xvdc1，对分区进行操作&lt;/li&gt;
&lt;li&gt;添加到 vg0 卷组 vgextend vg0 /dev/xvdc1&lt;/li&gt;
&lt;li&gt;扩容逻辑卷  lvextend -L +99G /dev/vg0/data, 可以通过 vgdispaly 查看卷组剩余空间有多少&lt;/li&gt;
&lt;li&gt;扩容文件系统 resize2fs /dev/vg0/data, 不需要卸载逻辑卷，可以在线完成扩容&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;备注&#34;&gt;备注&lt;/h2&gt;
&lt;p&gt;过程中有一块磁盘已经在使用，需要 umount 后再加入 LVM，出现了 device is busy 的情况，系统提示使用 lsof 或者 fuser 查询哪些进程在使用这个磁盘或者目录，最后通过 fuser 查询到进程号后，kill -9 pid 后解决 fuser -m /mnt&lt;/p&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.evernote.com/l/ASu5A6WwxuZFLKavPy1lUAv_uixPNJDMP98&#34;&gt;Linux下LVM的配置详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://man.linuxde.net/resize2fs&#34;&gt;Linux 命令大全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>日志收集和分析系统架构</title>
      <link>//lewang.dev/posts/2017-07-23-log-processing-system/</link>
      <pubDate>Sun, 23 Jul 2017 22:30:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2017-07-23-log-processing-system/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;微服务，日志分散且种类多（php/java/python），用 docker 起应用，日志通过卷放在宿主机器指定目录下，服务有众多实例，metrics 数据也不仅相同，无论是日志还是 metrics 数据，都可以看作是时间序列数据&lt;/p&gt;
&lt;p&gt;分散主要表现为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个主机&lt;/li&gt;
&lt;li&gt;多个目录下多个文件&lt;/li&gt;
&lt;li&gt;应用开发所使用的技术栈不同日志格式不同&lt;/li&gt;
&lt;li&gt;web log（主要是 nginx）&lt;/li&gt;
&lt;li&gt;各类事件&lt;/li&gt;
&lt;li&gt;一些其它事务性的日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;日志为时间序列数据，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统日志: 各类系统产生的跟业务有关的日志或者与业务无关的日志&lt;/li&gt;
&lt;li&gt;web 服务器日志：如 access.log/error.log 等有固定格式的日志&lt;/li&gt;
&lt;li&gt;性能监控日志：打点记录各类服务的 metrics(全部为数值类型long/double/bool)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统日志&#34;&gt;系统日志&lt;/h2&gt;
&lt;p&gt;由时间戳、一些枚举值以及日志内容(变长字符串)组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志时间颗粒度：支持毫秒/秒&lt;/li&gt;
&lt;li&gt;枚举值包括：
&lt;ul&gt;
&lt;li&gt;[必选]主机名/host&lt;/li&gt;
&lt;li&gt;[必选]服务名/service&lt;/li&gt;
&lt;li&gt;[必选]实例编号/instance&lt;/li&gt;
&lt;li&gt;[必选]日记级别/level：info/debug/warn/trace/error 等&lt;/li&gt;
&lt;li&gt;[可选]异常名/exception: 如果是异常，把异常名作为枚举值记录&lt;/li&gt;
&lt;li&gt;[可选]线程名/thread:&lt;/li&gt;
&lt;li&gt;[可选]方法名/method：&lt;/li&gt;
&lt;li&gt;[可选]文件名/file：&lt;/li&gt;
&lt;li&gt;[可选]行号/line：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日志内容(变长字符串): 为实际记录的内容以及异常堆栈信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;web-服务器日志&#34;&gt;web 服务器日志&lt;/h2&gt;
&lt;p&gt;access log（nginx）
日志内容：主要是文本(string）或者一些系统 metrics 数据(数值类型long/double)&lt;/p&gt;
&lt;h2 id=&#34;日志存储和处理&#34;&gt;日志存储和处理：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数据磁带（1周）：kafka&lt;/li&gt;
&lt;li&gt;提供热数据检索（1个月）：solr(or lucence based on cassandra)&lt;/li&gt;
&lt;li&gt;日志存储（永久）：&lt;/li&gt;
&lt;li&gt;kariosdb/cassandra: 支持 double/long/string 类型，kariosdb 相当于在 cassandra 上面套了一个壳，这样简化了很多时间序列数据处理的操作&lt;/li&gt;
&lt;li&gt;数据展示：grafana，官方支持 kariosdb&lt;/li&gt;
&lt;li&gt;扩展：数据深度挖掘分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统架构&#34;&gt;系统架构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/old/system-arch.svg&#34; alt=&#34;架构图&#34;&gt;&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务现在，面向未来的架构（每层可单独升级或者替换技术栈）&lt;/li&gt;
&lt;li&gt;低入侵，原有系统日志不需要改造，使用 flume agent 收集&lt;/li&gt;
&lt;li&gt;整个系统无单点，保证可靠性&lt;/li&gt;
&lt;li&gt;层次清晰，好扩展，无论 Flume，kafka 还是 cassandra 都方便扩容，存储层使用 kafka 滚动存储数据，cassandra 存储所有日志数据和 metrics&lt;/li&gt;
&lt;li&gt;利用现有社区活跃的开源产品构建，除了 kalka 引入了 zk 外，没有其它依赖，整个存储层可以结合现有的资源&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;其它方案&#34;&gt;其它方案&lt;/h2&gt;
&lt;h3 id=&#34;elk&#34;&gt;ELK&lt;/h3&gt;
&lt;p&gt;ELK 技术栈在整体架构上与前面的比较接近（几乎差不多），将会引入数个与目前系统没有太大联系的产品（E/L），前面的架构不仅用于日志的处理，并且可扩展支持处理所有的事件（数据流）处理，更符合目前业务。ELK 优点是拆箱可用，经过一段时间的试用，目前是放弃状态&lt;/p&gt;
&lt;h3 id=&#34;其它非-jvm-解决方案没有在考虑范围之类包括但不限于&#34;&gt;其它非 JVM 解决方案没有在考虑范围之类，包括但不限于：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;scribe &lt;a href=&#34;https://github.com/facebookarchive&#34;&gt;https://github.com/facebookarchive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TICK Stack &lt;a href=&#34;https://www.influxdata.com/time-series-platform/&#34;&gt;https://www.influxdata.com/time-series-platform/&lt;/a&gt;, 比较适合收集服务器和各类服务的 metrics 数据，配合 grafana，可以替代 zabbix 的工作，其中日志存储（output）默认使用 influxdb，influxdb 目前开源只有单机版，但 telegraf 官方支持 output 到 cassandra/kafka/rabbit 等，所以存储也不是问题。前端可以 grafana（支持 kariosdb/influxdb/mysql/opentsdb 等作为数据源）。&lt;/li&gt;
&lt;li&gt;rsync 直接同步日志到指定机器，然后在机器上集中处理，使用 mysql/postgresql 等存储日志，目前的量是可以的，但是也需要做不少开发工作&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Log4j2 快速入门</title>
      <link>//lewang.dev/posts/2017-07-15-log4j2/</link>
      <pubDate>Sat, 15 Jul 2017 23:31:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2017-07-15-log4j2/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;Java 生态下的日志库太多，配置也不同，大多数情况下会使用  SLF4j (又引入了一个库)来抽象日志接口。在使用 Log4j2 后，发现可以不使用 SLF4j 了，并且配置变得更简单，可以使用 lombok 的 log4j2 注解等。&lt;/p&gt;
&lt;p&gt;需要搞清楚&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何设置哪些日志要记录下来&lt;/li&gt;
&lt;li&gt;日志记录到哪里去&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;level-日志级别&#34;&gt;LEVEL 日志级别：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;内置（有Fatal）：All &amp;lt; Trace &amp;lt; Debug &amp;lt; Info &amp;lt; Warn &amp;lt; Error &amp;lt; Fatal &amp;lt; OFF&lt;/li&gt;
&lt;li&gt;还可以自定义： &lt;a href=&#34;https://logging.apache.org/log4j/2.0/manual/customloglevels.html&#34;&gt;https://logging.apache.org/log4j/2.0/manual/customloglevels.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;appender-日志输出的目的地&#34;&gt;Appender: 日志输出的目的地&lt;/h2&gt;
&lt;p&gt;内置的目的地有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;console,&lt;/li&gt;
&lt;li&gt;files（FIle/RollingFile）,&lt;/li&gt;
&lt;li&gt;remote socket servers,&lt;/li&gt;
&lt;li&gt;Apache Flume,&lt;/li&gt;
&lt;li&gt;JMS,&lt;/li&gt;
&lt;li&gt;remote UNIX Syslog daemons,&lt;/li&gt;
&lt;li&gt;various database APIs&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Appender 在接受到日志以后，可以通过级别过滤选择记录日志，具体配置： &lt;a href=&#34;https://logging.apache.org/log4j/2.0/manual/appenders.html&#34;&gt;https://logging.apache.org/log4j/2.0/manual/appenders.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;logger-负责决定哪些日志要记录和发配日志&#34;&gt;Logger 负责决定哪些日志要记录和发配日志&lt;/h2&gt;
&lt;p&gt;哪些需要记日志，设置什么级别，并且配置日志输出到哪些个 Appender 中去都在 Logger 中配置。Logger 有类似继承的关系，名为 Root 的的 Logger &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; 为所有 Logger 的根，也就是说没有做特殊设置（additivity=false), 那么这个 Logger 的日志将会记录到自己指定的 Appender，并且也都会记录到自己所有“父” Logger 设置的 Appender 中去&lt;/p&gt;
&lt;p&gt;继承关系由 Logger 的名称推断出来，名称可以认为是 Logger 树的前序遍历打印的节点路径。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/old/logger-tree-view.svg&#34; alt=&#34;Logger Tree View&#34;&gt;&lt;/p&gt;
&lt;p&gt;Logger 定义&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Logger Name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;将会记录日志的 Logger&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Root&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Root&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;X&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Root, X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;X.Y&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Root, X, Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;X.Z&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Root, X,Z&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;M&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Root, M&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;filter-日志过滤器&#34;&gt;Filter 日志过滤器&lt;/h2&gt;
&lt;p&gt;DENY,ACCEPT,NEUTRAL 三个选项，所有进入当前 Appender 的所有日志，Filter 可以设置来选择日志是否要记录&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL 数据备份和不停机重新搭建主从同步</title>
      <link>//lewang.dev/posts/2017-06-06-xtrabackup/</link>
      <pubDate>Tue, 06 Jun 2017 12:15:07 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2017-06-06-xtrabackup/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;目前公司主要服务都是直接使用 MySQL 主服务器，从服务主要给离线数据分析服务使用，由于前期弄得比较简单的粗暴，从服务上还有一两个数据库在做生产使用, 并且从服数据已经不能和主服进行进行同步了，有大量错误，忽略都没有办法进行。此外，主服仅配置了三个核心数据的 binlog，随着业务的变化，其它数据库不能走主从这条路来同步数据，于是希望不停机的情形下重新调整主服配置，记录所有的数据库的 binlog，同时添加新的从服务器来同步数据&lt;/p&gt;
&lt;h2 id=&#34;方案1&#34;&gt;方案1&lt;/h2&gt;
&lt;p&gt;MySQL 的主从是通过同步 binlog 日志来实现数据同步的，于是需要想办法把从服数据先于主服同步，记录 binlog 的 pos 值，再配置从服从该 pos 处开始同步，考虑可以使用 mysqldump 导出所有 innodb 数据，使用 rsync 同步所有 myisam 数据文件，然后再开启主从同步。但是目前这种方案不适用，主服不能长时间停机&lt;/p&gt;
&lt;h2 id=&#34;方案2&#34;&gt;方案2&lt;/h2&gt;
&lt;p&gt;使用 xtrabackup 来完成目标&lt;/p&gt;
&lt;p&gt;主从服务器上都需要安装 xtrabackup（实际使用 xtrabackupex）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;yum install http://www.percona.com/downloads/percona-release/redhat/0.1-4/percona-release-0.1-4.noarch.rpm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;yum install -y percona-xtrabackup-24
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;主服&#34;&gt;主服：&lt;/h3&gt;
&lt;h4 id=&#34;备份数据&#34;&gt;备份数据&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# 注意数据库名称的转义，例如 - 号是 @002d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;innobackupex --defaults-file=/etc/my.cnf --socket=/var/lib/mysql/mysql.sock --user=root --password=xxxx  --parallel=2 --databases=&amp;#34;db1 db2&amp;#34; /data/backup/xtrabackup/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;保持事务一致&#34;&gt;保持事务一致&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;innobackupex --apply-log /data/backup/xtrabackup/2017-06-06_13-16-21/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;同步数据&#34;&gt;同步数据&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rsync -avHz 2017-06-06_13-16-21 sysops@cow:/data/backup
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;从服&#34;&gt;从服：&lt;/h3&gt;
&lt;p&gt;修改 my.cnf 相关配置，恢复备份数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# 关闭 MySQL Servier 后恢复数据
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;innobackupex --defaults-file=/etc/my.cnf --copy-back /data/backup/2017-06-06_13-16-21
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改数据权限&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chown -R mysql.mysql mysql
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;开启从服，登录 msyql 添加主从配置，并开启同步&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Master 上执行
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GRANT REPLICATION SLAVE ON *.* TO &amp;#39;repl&amp;#39;@&amp;#39;10.23.9.146&amp;#39; IDENTIFIED BY &amp;#39;password&amp;#39;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Slave 上执行
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[root@bull data]# cat backup/2018-04-26_21-27-31/xtrabackup_binlog_info
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mysql-bin.000058        103394265
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CHANGE MASTER TO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MASTER_HOST=&amp;#39;10.4.25.28&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MASTER_USER=&amp;#39;repl&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MASTER_PASSWORD=&amp;#39;password&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MASTER_PORT=3306,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MASTER_LOG_FILE=&amp;#39;mysql-bin.000058&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MASTER_LOG_POS=103394265;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;检查主从状态&#34;&gt;检查主从状态&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;show master status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;show slave status\G;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[percona-xtrabackup] (&lt;a href=&#34;https://www.percona.com/doc/percona-xtrabackup/LATEST/index.html&#34;&gt;https://www.percona.com/doc/percona-xtrabackup/LATEST/index.html&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[wsgzao.github.io/post/xtrabackup] (&lt;a href=&#34;https://wsgzao.github.io/post/xtrabackup/&#34;&gt;https://wsgzao.github.io/post/xtrabackup/&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Nginx 性能调优「译」</title>
      <link>//lewang.dev/posts/2014-10-16-tuning-nginx/</link>
      <pubDate>Thu, 16 Oct 2014 15:27:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2014-10-16-tuning-nginx/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这是一篇译文，原文链接：&lt;a href=&#34;http://nginx.com/blog/tuning-nginx/&#34;&gt;Tuning NGINX for Performance&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nginx 为人熟知的是在负载均衡、静态缓存和 WEB 服务器等方面的高性能，目前世界上最繁忙的站点中大约有 40% 在使用 Nginx。绝大多数情况下，大多数默认的 Nginx 和 Linux 配置都可以工作得非常好，但也需要做一些优化以获得最好的性能。本文将讨论在优化系统时需要考虑的 Nginx 和 Linux 的部分配置。可配置的选项有很多，但是本文只涵盖推荐大多数用户调整的配置选项。本文没有涵盖的配置选项，只有那些对 Nginx 和 Linux 有了深入的理解的人或者获得了 Nginx 技术支持和专业的服务团队的推荐建议后，才可以考虑调整。Nginx 专业服务器团队已经为世界上一些最繁忙的站点通过优化 Nginx 获得了最高水平的性能，并且可以为任何需要获得自己系统最大产出的客户服务。&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;本文假设读者对 Nginx 架构和配置的概念已有了基本的了解。Nginx 的文档内容将不会在本文中重复，但本文会提供各项配置简要的介绍和相关文档的链接。&lt;/p&gt;
&lt;p&gt;在性能调优时，要遵循一个好的规则：一次只修改一个配置选项，如果这个修改没有在性能方面带来优化，那么要再改回默认值。&lt;/p&gt;
&lt;p&gt;我们从 Linux 性能优化的讨论开始，因为 Linux 性能优化的一些值会影响到 Nginx 的一些配置。&lt;/p&gt;
&lt;h2 id=&#34;linux-配置&#34;&gt;Linux 配置&lt;/h2&gt;
&lt;p&gt;尽管现代 Linux 内核（2.6+）在各种配置情况下都工作得很好，但也有一些配置是想要修改的。如果操作系统的配置设置的太低，那内核日志将会有错误信息，从而得知哪些配置需要调整。Linux 性能优化可能涉及的配置有很多，这里我们只讨论那些优化达到正常工作负载最有可能涉及到的那些配置。调整这些配置请参考详细的 Linux
文档。&lt;/p&gt;
&lt;h3 id=&#34;backlog-队列&#34;&gt;Backlog 队列&lt;/h3&gt;
&lt;p&gt;下面的配置选项与网络连接和其排队方法直接相关。如果连入率很高（译者注：客户端发起的连接很多）且系统性能配置不匹配，例如一些连接表现得有所停顿，那么修改下面得配置将可能有用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;net.core.somaxconn: 设置等待 Nginx 接受的连接队列的大小。由于 Nginx 接受连接非常的快，这个值通常情况下不用设置得很大，但系统默认值可能比较小，所以对于流量比较大的站点，增大这个值是个不错的想法。如果这个值太小，在内核日志中应该会看到错误消息，那么就需要增大这个值，直到错误消失。注意：若将这个值设置为大于 512 的话，那么需要在 Nginx 配置中修改 listen 指令的 backlog 参数来匹配这个数字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;net.core.netdev_max_backlog: 设置数据包在被发送到 CPU 前可被网卡缓存的速率。对于带宽很大的机器来说，这个值需要增大。可以查阅网卡关于这项设置的建议文档或者查看内核日志中此项设置相关的错误。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文件描述符&#34;&gt;文件描述符&lt;/h3&gt;
&lt;p&gt;文件描述符是用于处理例如连接和打开的文件等的操作系统资源。Nginx 在一个连接中使用文件描述符可以达到两个，例如 Nginx 做代理，那文件描述符一个用于客户端连接，另外一个用于代理服务器，但如果开启 HTTP 保持连接，那这个比例将会很低。对于一个连接数量很大很大的系统来说，这个值可能需要调整：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sys.fs.file_max: 文件描述符的系统级限制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nofile: 文件描述符用户级限制，可以在 /etc/security/limits.conf 文件中修改。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;临时端口范围ephemeral-ports&#34;&gt;临时端口范围(Ephemeral ports)&lt;/h3&gt;
&lt;p&gt;当 Nginx 用作代理，每一个到后端服务器的连接都会短暂的、临时的使用一个端口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;net.ipv4.ip_local_port_range: 设置端口启始范围。如果观察到端口耗尽，那么需要增大这个范围。通常的端口范围设置是 1024 到 65000。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;net.ipv4.tcp_fin_timeout: 设置端口停止使用后可再次被其它连接使用所需要的时间。通常默认值是 60 秒，但通常减少到 30 秒或者 15 秒都是安全的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nginx-配置&#34;&gt;Nginx 配置&lt;/h2&gt;
&lt;p&gt;下面是一些影响系统性能的 Nginx 指令。前面已经说过，本文只讨论一些推荐给大多数人调整的指令。其它没有提到的任何指令，若没有 Nginx 团队的建议，推荐不要修改。&lt;/p&gt;
&lt;h3 id=&#34;工作进程&#34;&gt;工作进程&lt;/h3&gt;
&lt;p&gt;Nginx 可以运行多个工作进程，每一个都可以处理大量的连接。通过下面的指令可以控制运行工作进程的数量和每个进程处理连接的数量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://nginx.org/r/worker_processes&#34;&gt;worker_processes&lt;/a&gt;:控制 Nginx 运行工作进程的数量。多数情况下，每一个 CPU 核运行一个工作进程的方式可以很好的工作。可以通过设置指令的值为 &amp;ldquo;auto&amp;rdquo; 来达到这个效果。但也有需要增大这个数字的时候，例如工作进程需要做很多的磁盘 IO 操作。默认值是 1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://nginx.org/r/worker_connections&#34;&gt;worker_connections&lt;/a&gt;:这个值表示每一个工作进程可以同时处理连接的最大数目。默认是 512，但是大多数系统可以处理一个大得多的数字。这个值应该被设置成多少依赖与服务器的大小和网络流量的特征。通过具体的测试可以找到具体的值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;连接持久化keepalives&#34;&gt;连接持久化(Keepalives)&lt;/h3&gt;
&lt;p&gt;连接持久化可以在创建和关闭连接过程中降低 CPU 和网络开销，从而可对性能产生较大的影响。Nginx 会终止所有客户端连接以及和客户端连接分离开且独立的后端服务器连接。Nginx 支持客户端连接和后端服务器连接的持久化，可以通过下面的指令设置客户端连接持久化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://nginx.org/r/keepalive_requests&#34;&gt;keepalive_requests&lt;/a&gt;:一个客户端使用一个持久化连接发送的请求数，默认值是 100. 这个值可以设置得很大，尤其在在做压力测试过程中，单一客户端发送大量请求得情况下会特别有用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://nginx.org/r/keepalive_timeout&#34;&gt;keepalive_timeout&lt;/a&gt;: 连接一旦空闲后还会保持多长时间（也就是空闲多长时间以后被关闭）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面的指令可以设置后端服务器连接的持久化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nginx.org/r/keepalive&#34;&gt;keepalive&lt;/a&gt;: 为每一个工作进程开启的到后端服务器空闲持久化连接的数量。这个指令没有默认值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了启用 Nginx 到后端服务器的持久化连接，需要添加一下指令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;proxy_http_version 1.1;&lt;/li&gt;
&lt;li&gt;proxy_set_header Connection &amp;ldquo;&amp;rdquo;;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;访问日志&#34;&gt;访问日志&lt;/h3&gt;
&lt;p&gt;记录每个请求的访问日志会占用 CPU 和 I/O 周期，启用访问日志缓冲可以减小影响。启动访问日志缓冲会使得 Nginx 缓存一些列日志记录到缓存中，然后在同一时间将他们写到文件中，而不是分开的执行每一个写操作。启用访问日志缓存功能需要在 Nginx 配置文件的 access_log 指令中使用 &amp;ldquo;buffer=size&amp;rdquo; 选项。这个是设置将要使用的缓存大小。也可以设置 &amp;ldquo;flush=time&amp;rdquo; 选项来告诉 Nginx
多长时间来将缓存中的记录写到磁盘日志文件中。如果配置了这两个选项，那当日志放不进缓存（缓存满了）或者缓存中日志记录比 flush 参数设置的时间还要老时，Nginx 将会写日志记录到日志文件中。当工作进程重新打开日志文件或者工作进程被关闭时，日志记录都会被写到日志文件中。当然，完全关闭访问日志也是可以的。&lt;/p&gt;
&lt;h3 id=&#34;sendfile&#34;&gt;Sendfile&lt;/h3&gt;
&lt;p&gt;Sendfile 是一个可以在 Nginx 中使用的操作系统的特性。这个特性可以使 TCP 数据传输得更快：它通过在内核中从一个文件描述符拷贝数据到另一个文件描述符，通常可以达到零拷贝。
Nginx 可以利用它通过 socket 发送缓存的或者磁盘上的内容，并且不需要任何的用户空间的上下文切换，从而使得发送数据的过程非常的快并且使用更少的 CPU 开销。由于数据从不触及用户空间，在处理链中添加需要访问数据的过滤器是行不通的，所以无法使用任何会改变数据内容的 Nginx 过滤器，例如 gzip 过滤器。Sendfile 默认是不启用的。&lt;/p&gt;
&lt;h3 id=&#34;限制limits&#34;&gt;限制(Limits)&lt;/h3&gt;
&lt;p&gt;Nginx 和 Nginx Plus 允许设置一些列的限制项，可用于控制被客户端访问的资源，所以这些设置项会对系统性能产生影响，并且也会影响用户体验和安全。下面是其中的一些指令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://nginx.org/r/limit_conn&#34;&gt;limit_conn&lt;/a&gt;/&lt;a href=&#34;http://nginx.org/r/limit_conn_zone&#34;&gt;limit_conn_zone&lt;/a&gt;:这两个指令可用于限制 Nginx 允许的连接数目，例如限制单一的客户端 IP 地址。可以阻止单个客户端建立过多连接消耗过多资源的情况发生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://nginx.org/r/limit_rate&#34;&gt;limit_rate&lt;/a&gt;: 限制一个客户端单个连接的带宽大小。可以防止由特定的客户端造成系统高负载的情况发生，从而保证所有客户端都可以获得好质量的服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://nginx.org/r/limit_req&#34;&gt;limit_req&lt;/a&gt;/&lt;a href=&#34;http://nginx.org/r/limit_req_zone&#34;&gt;limit_req_zone&lt;/a&gt;:
这两个指令可以限制被 Nginx 处理的请求速率。和 limit_rate 一起使用 可以防止由特性的客户端造成系统高负载情况的发生，从而保证所有客户端都可以获得好质量的服务。这些指令可以用于改善系统安全，尤其是在登录页面，可以通过设置限制请求速率值，这个值完全胜任一个人类用户但又回减慢程序用户访问来提高系统的安全。（大概意思就是通过这个设置来限制机器程序的访问, 如爬虫）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://nginx.org/r/upstream&#34;&gt;max_conns&lt;/a&gt;: 设置允许同时连接到后端服务器组中一台服务器的最大连接数。这个设置可以防止后端服务器过载。默认值是 0， 表示无限制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://nginx.org/r/queue&#34;&gt;queue&lt;/a&gt;: 如果设置了 max_conns, 并且当一个请求由于没有可用的后端服务器或者后端服务器已到达 max_conns 上限而不能被处理时，此时发生什么就会交给 queue 指令来管理。这个指令设置存放到队列中请求数以及请求等待超时时间。如果这个指令没有设置，请求将不会出现排队的情形。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;附加配置&#34;&gt;附加配置&lt;/h2&gt;
&lt;p&gt;值得一提的是，Nginx 有一些附加的特性可以用来提高 Web 应用的性能，尽管他们不是真的属于调优的范畴，但对性能的影响也是显著的。下面将讨论其中的两个特性。&lt;/p&gt;
&lt;h3 id=&#34;缓存&#34;&gt;缓存&lt;/h3&gt;
&lt;p&gt;有一个用于负载均衡一组后端 Web 应用的 Nginx 实例，通过启用这个实例的缓存配置，将会显著的增加到客户端的响应时间，同时也会显著的降低后端服务器的负载。缓存本身就是一个主题，这里不再详细讨论。需要了解更多的关于配置 Nginx 缓存的信息，可以参考 &lt;a href=&#34;http://nginx.com/resources/admin-guide/caching/&#34;&gt;Nginx 管理指南 - 缓存篇&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;压缩&#34;&gt;压缩&lt;/h3&gt;
&lt;p&gt;压缩返回给客户端的数据可以大大减小返回数据的大小，从而需求更少的带宽，但压缩的操作需要占用 CPU 资源。所以在减少带宽有价值时使用压缩才是最好的。值得注意的还有不要压缩已经压缩过的对象， 譬如 jpeg 图片等。需要了解更多的关于配置 Nginx 压缩的信息，可以参考&lt;a href=&#34;http://nginx.com/resources/admin-guide/compression-and-decompression/&#34;&gt;Nginx 管理指南 - 压缩篇&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;更多阅读&#34;&gt;更多阅读&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://pages.nginx.com/2014_04_Website_Whitepaper_BenchmarkingNGINX_12014_04_Website_Whitepaper_BenchmarkingNGINXLandingPage.html&#34;&gt;Nginx 性能测试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nginx.org/en/docs/&#34;&gt;Nginx 文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nginx.com/products/feature-matrix/&#34;&gt;Nginx 和 Nginx Plus 特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nginx.com/products/technical-specs/&#34;&gt;Nginx Plus 技术规范&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Github Pages 服务的域名设置</title>
      <link>//lewang.dev/posts/2014-05-06-github-pages-dns-settings/</link>
      <pubDate>Tue, 06 May 2014 22:51:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2014-05-06-github-pages-dns-settings/</guid>
      <description>&lt;p&gt;这几天每次 Push 博客到 Github Pages 时总会收到一封邮件：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The page build completed successfully, but returned the following warning:&lt;/p&gt;
&lt;p&gt;GitHub Pages recently underwent some improvements (&lt;a href=&#34;https://github.com/blog/1715-faster-more-awesome-github-pages&#34;&gt;https://github.com/blog/1715-faster-more-awesome-github-pages&lt;/a&gt;) to make your site faster and more awesome, but we&amp;rsquo;ve noticed that iforget.info isn&amp;rsquo;t properly configured to take advantage of these new features. While your site will continue to work just fine, updating your domain&amp;rsquo;s configuration offers some additional speed and performance benefits. Instructions on updating your site&amp;rsquo;s IP address can be found at
&lt;a href=&#34;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages#step-2-configure-dns-records&#34;&gt;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages#step-2-configure-dns-records&lt;/a&gt;, and of course, you can always get in touch with a human at &lt;a href=&#34;mailto:support@github.com&#34;&gt;support@github.com&lt;/a&gt;. For the more technical minded folks who want to skip the help docs: your site&amp;rsquo;s DNS records are pointed to a deprecated IP address.&lt;/p&gt;
&lt;p&gt;For information on troubleshooting Jekyll see:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/using-jekyll-with-pages#troubleshooting&#34;&gt;https://help.github.com/articles/using-jekyll-with-pages#troubleshooting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you have any questions please contact us at &lt;a href=&#34;https://github.com/contact&#34;&gt;https://github.com/contact&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大概意思就是我们 Github Pages 服务最近做了升级，这个升级将会使你的博客访问起来快到碉堡了，赶快来配置(修改域名记录就可以)一下用上吧。&lt;/p&gt;
&lt;p&gt;之前 iforget.info 这个域名有两条记录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A 记录： iforget.info 到 207.97.227.245&lt;/li&gt;
&lt;li&gt;CNAME(Alias) 记录：www.iforget.info  到  iforget.info&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;207.97.227.245 是个美帝的 IP，所以速度比较慢。我还想着给 iforget.info 备个案，从此用上七牛的 CND 来加速了。好消息来了，Github Pages 支持全球 CDN 了，赶紧修改一下 DNS 记录(把之前的记录都删掉吧)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CNAME 记录: iforget.info 到 thisiswangle.github.io&lt;/li&gt;
&lt;li&gt;CNAME 记录: &lt;a href=&#34;https://www.iforget.info&#34;&gt;www.iforget.info&lt;/a&gt; 到 thisiswangle.github.io&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好了，静候 DNS 生效。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  ~  dig iforget.info +nostats +nocomments +nocmd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.8.3-P1 &amp;lt;&amp;lt;&amp;gt;&amp;gt; iforget.info +nostats +nocomments +nocmd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;; global options: +cmd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;iforget.info.                  IN      A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iforget.info.           30      IN      CNAME   thisiswangle.github.io.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;thisiswangle.github.io. 1976    IN      CNAME   github.map.fastly.net.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;github.map.fastly.net.  30      IN      A       103.245.222.133
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fastly.net.             73096   IN      NS      ns3.p04.dynect.net.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fastly.net.             73096   IN      NS      ns4.p04.dynect.net.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fastly.net.             73096   IN      NS      ns2.p04.dynect.net.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fastly.net.             73096   IN      NS      ns1.p04.dynect.net.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ns1.p04.dynect.net.     74973   IN      A       208.78.70.4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ns2.p04.dynect.net.     74756   IN      A       204.13.250.4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ns3.p04.dynect.net.     74789   IN      A       208.78.71.4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ns4.p04.dynect.net.     153     IN      A       204.13.251.4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;IP 变成了 103.245.222.133, 澳大利亚 IP ，进入亚洲组了。&lt;/p&gt;
&lt;p&gt;当同时设置了 iforget.info 和 &lt;a href=&#34;https://www.iforget.info&#34;&gt;www.iforget.info&lt;/a&gt;, 再添加一个 CNAME 文件到自己的博客根目录下。&lt;/p&gt;
&lt;p&gt;如果 CNAME 的内容是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;iforget.info&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;浏览器中输入 &lt;a href=&#34;https://www.iforget.info&#34;&gt;www.iforget.info&lt;/a&gt; 时，Github Pages 将会永久跳转(301)到 iforget.info, 反之亦然。&lt;/p&gt;
&lt;p&gt;如果你能看到本页，说明本站已经拿到了 GFW 认证。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>从域名和 CDN 来看网站架构</title>
      <link>//lewang.dev/posts/2014-03-06-arch-of-website-domain-cdn/</link>
      <pubDate>Thu, 06 Mar 2014 00:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2014-03-06-arch-of-website-domain-cdn/</guid>
      <description>&lt;p&gt;为了自己做好网站的架构，找了知乎，豆瓣，大众点评和百姓网来做参考。这里主要来看域名和CDN相关的部分，后台的架构也还是要边学便实践。&lt;/p&gt;
&lt;h2 id=&#34;大概情况&#34;&gt;大概情况&lt;/h2&gt;
&lt;p&gt;从前端分析了知乎的域名和 DNS 情况，同时对比了一下豆瓣、大众点评和百姓网。从域名、DNS、CDN等使用角度来说，他们之间大同小异。&lt;/p&gt;
&lt;h2 id=&#34;使用的分析工具&#34;&gt;使用的分析工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Chrome&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://whois.chinaz.com/&#34;&gt;WHOIS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://webscan.360.cn/tools/dnslookup&#34;&gt;DNSLookup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;非-cdn-使用&#34;&gt;非 CDN 使用&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;记录&lt;/th&gt;
&lt;th&gt;域名&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;路径&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;zhihu.com&lt;/td&gt;
&lt;td&gt;使用 301 跳转到 &lt;a href=&#34;https://www.zhuhu.com&#34;&gt;www.zhuhu.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;zhi.hu&lt;/td&gt;
&lt;td&gt;使用 302 跳转到 &lt;a href=&#34;https://www.zhihu.com&#34;&gt;www.zhihu.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;IP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.zhihu.com&#34;&gt;www.zhihu.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;IP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;comet.zhihu.com&lt;/td&gt;
&lt;td&gt;WebSocket 推送消息&lt;/td&gt;
&lt;td&gt;IP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;analytics.zhihu.com&lt;/td&gt;
&lt;td&gt;知乎自己的统计分析，同时使用了 Google Analytics&lt;/td&gt;
&lt;td&gt;IP&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;大部分都是用了 301 或者 302 跳转，注意他们的区别：301 是永久跳转(浏览器会做客户端端缓存)，而 302 是临时跳转。此外 baidu.com 到 &lt;a href=&#34;https://www.baidu.com&#34;&gt;www.baidu.com&lt;/a&gt; 并不是使用 301 或者 302 ，而是使用下面的一段 HTML 代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#000080&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#000080&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;http-equiv&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;refresh&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;0;url=http://www.baidu.com/&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#000080&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;相比而言，我觉得使用 301 更 Geek，更好一些。&lt;/p&gt;
&lt;h2 id=&#34;cdn-使用&#34;&gt;CDN 使用&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;记录&lt;/th&gt;
&lt;th&gt;域名&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;路径&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CNAME&lt;/td&gt;
&lt;td&gt;static.analytics.zhihu.com&lt;/td&gt;
&lt;td&gt;CDN, 看 CNAME 以为是七牛CDN，其实用了 ChinaNetCenter 的 CDN&lt;/td&gt;
&lt;td&gt;d.qiniudn.com &amp;gt; wsall.36tr.com.wscdns.com &amp;gt; 08911.xdwscache.glb0.lxdns.com &amp;gt; IP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CNAME&lt;/td&gt;
&lt;td&gt;static.zhihu.com&lt;/td&gt;
&lt;td&gt;网页资源文件cdn，包括css，js，image，不包括用户头像、用户发布的图片等&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CNAME&lt;/td&gt;
&lt;td&gt;p1.zhimg.com&lt;/td&gt;
&lt;td&gt;用户头像，用户发布的图片, 这里使用又拍云CDN&lt;/td&gt;
&lt;td&gt;zhcdn-img.b0.aicdn.com &amp;gt; ctn.b9.aicdn.com &amp;gt; IP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CNAME&lt;/td&gt;
&lt;td&gt;p2.zhimg.com&lt;/td&gt;
&lt;td&gt;用户头像，用户发布的图片，这里使用了七牛CDN&lt;/td&gt;
&lt;td&gt;zhimg0.qiniudn.com &amp;gt; 其它非七牛CDN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CNAME&lt;/td&gt;
&lt;td&gt;p3.zhimg.com&lt;/td&gt;
&lt;td&gt;与p1.zhimg.com相同&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CNAME&lt;/td&gt;
&lt;td&gt;p4.zhimg.com&lt;/td&gt;
&lt;td&gt;与p1.zhimg.com相同&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CNAME&lt;/td&gt;
&lt;td&gt;s1.zhimg.com&lt;/td&gt;
&lt;td&gt;视频片段等&lt;/td&gt;
&lt;td&gt;这里使用了七牛CDN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CNAME&lt;/td&gt;
&lt;td&gt;s2.zhimg.com&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;这里使用了七牛CDN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CNAME&lt;/td&gt;
&lt;td&gt;s3.zhimg.com&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;这里使用了七牛CDN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CNAME&lt;/td&gt;
&lt;td&gt;s4.zhimg.com&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;这里使用了七牛CDN&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;p1-p4， s1-s4  由知乎服务器端按照一定算法选择（有可能就是等概率随机）&lt;/p&gt;
&lt;p&gt;不得不有点疑问？为什么七牛CDN最后都直到别人的CDN服务器上去了，而又拍云全部是A记录到自己的服务器。又拍强调的自建机房就是这个意思？&lt;/p&gt;
&lt;h2 id=&#34;静态资源版本控制&#34;&gt;静态资源版本控制&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;知乎&lt;/td&gt;
&lt;td&gt;在文件名前添加类似 md5 的字符串，如 app.js, 发布版本为f853b06af5428ff5f78f66e3d09397e2.app.js&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;百姓网&lt;/td&gt;
&lt;td&gt;如gallery.js 发布版本为 gallery.f07b79d6.js&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;豆瓣&lt;/td&gt;
&lt;td&gt;将类似md5值放在路径中，如http://img3.douban.com/f/shire/55c9fe0e9ecb5725037e9839fc515504008dae74/js/ad.js&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;大众点评&lt;/td&gt;
&lt;td&gt;和百姓网类似，如发布版本为ga2.min.acd5dfe89e87135b4eef62dcf81ef849.js&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;由于CDN使用简单镜像＋缓存的功能，每一个缓存的文件有一定的时效性，而且基本都是静态文件，不支持 Query String （如 ?ver=201413），于是需要在源头控制将要被分发到 CDN 中文件的版本。最为简单的做法就是对开发人员透明，在发布项目的时候，通过计算文件的 hash 签名或者 md5 签名来做类 HTML 等文本代码的重构。&lt;/p&gt;
&lt;h2 id=&#34;dns-选择&#34;&gt;DNS 选择&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;域名&lt;/th&gt;
&lt;th&gt;DNS 服务商&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;zhihu.com&lt;/td&gt;
&lt;td&gt;DNSPOD 企业版&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zhimg.com&lt;/td&gt;
&lt;td&gt;DNSPOD 免费版&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;baixing.com&lt;/td&gt;
&lt;td&gt;DNSPOD 企业版&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;baixing.net&lt;/td&gt;
&lt;td&gt;DNSPOD 企业版&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dianping.com&lt;/td&gt;
&lt;td&gt;自建&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;douban.com&lt;/td&gt;
&lt;td&gt;自建&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>使用 Vagrant 构建开发环境</title>
      <link>//lewang.dev/posts/2014-03-03-building-devenv-by-vagrant/</link>
      <pubDate>Mon, 03 Mar 2014 23:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2014-03-03-building-devenv-by-vagrant/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt; 是一个构建虚拟开发环境的利器，它使得在团队中很容易共享开发环境，有了它，不必每个人都搭建一个自己的开发环境了。在没有使用 vagrant 之前，我在windows中安装了 virtualbox，然后在virtualbox中安装了一个ubuntu server。在 ubuntu 中安装了 mysql、jdk 等软件，并且设置了一个共享目录，以便于将工程代码直接共享给 ubuntu。在外部开发调试过程中（Java 项目），我需要在virtualbox中设置好几个端口映射，如 mysql，ssh等等。这样在 cygwin 里面就可以通过 ssh 登录 ubuntu server 了，为了使得ssh登录不用每次设置密码，还需要手动生成公钥私钥。换机器了，这一切我又得重新配置。新同事来了，他也得像我这样重新配置一遍。有可能他还会有问题说：为什么按照你的说明，代码在我这里却无法运行呢？&lt;/p&gt;
&lt;p&gt;一切都从 &lt;a href=&#34;http://yining.org&#34;&gt;Yining&lt;/a&gt; 告诉了我 vagrant 之后发生了变化，原来一切都这么简单。&lt;/p&gt;
&lt;h2 id=&#34;安装-virtualbox&#34;&gt;安装 VirtualBox&lt;/h2&gt;
&lt;p&gt;Vagrant 其实是对 virtualbox 做了一层包装，它让使用virtualbox作为虚拟机更为简单。当然也可以使用 vmware，使用vmware那得找一个license了。&lt;/p&gt;
&lt;p&gt;好吧，去&lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34;&gt;这里&lt;/a&gt; 下载 VirtualBox。我使用的是 4.3.8 for OSX&lt;/p&gt;
&lt;h2 id=&#34;安装-vagrant&#34;&gt;安装 Vagrant&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.vagrantup.com/downloads.html&#34;&gt;下载vagrant&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;添加虚拟机镜像到-vagrant&#34;&gt;添加虚拟机镜像到 Vagrant&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vagrant box add vdevenv ~/Workspace/vagrant/boxes/vdevenv-0.0.0.1.box
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;vagrant 的干净的镜像可以在这里下载:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://files.vagrantup.com/precise32.box&#34;&gt;Ubuntu precise 32 VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://files.vagrantup.com/precise64.box&#34;&gt;Ubuntu precise 64 VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vagrantbox.es/&#34;&gt;更多镜像&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在工作目录启动-vagrant&#34;&gt;在工作目录启动 Vagrant&lt;/h2&gt;
&lt;p&gt;进入自己的代码所在的目录，启动刚刚添加的虚拟机镜像&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vagrant init vdevenv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vagrant up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vagrant ssh  # 登录到虚拟机
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进入 /vagrant 目录，这里就是共享的目录，所有的代码都在这里。&lt;/p&gt;
&lt;h2 id=&#34;vagrant-设置&#34;&gt;Vagrant 设置&lt;/h2&gt;
&lt;p&gt;修改 Vagrantfile&lt;/p&gt;
&lt;h2 id=&#34;分享开发环境&#34;&gt;分享开发环境&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vagrant package
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行之后在工作目录下面会生成一个*.bax的文件，把这个文件拷给别人就可以了&lt;/p&gt;
&lt;h2 id=&#34;常用-vagrant-命令&#34;&gt;常用 Vagrant 命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vagrant ssh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vagrant status
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vagrant halt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vagrant up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Python on My rMBP</title>
      <link>//lewang.dev/posts/2014-03-02-python-on-my-rmbp/</link>
      <pubDate>Sun, 02 Mar 2014 21:16:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2014-03-02-python-on-my-rmbp/</guid>
      <description>&lt;p&gt;前几天入手了一台 Macbook Pro Retina，把 BIG 提到了很爽的地步。经过几天的折腾，可以和 windows，ubuntu desktop 说 Byebye 了。之前整整用了一年的 Ubuntu 来工作，我用它来写 C、Java 和 Python, 要是 windows 没有 cygwin, 没有 MacType，那该多么恐怖。后来用了一段时间的 MBP，让我坚定了以后要自己买一个 MBP。&lt;/p&gt;
&lt;p&gt;ubuntu 那么的惹人爱，因为它有个还挺好用的 GUI，从 debian 那继承过来的 apt-get, 一下子把一个从 redhat 9 用到 fedora 4 的穷学生拉到了 ubuntu 的阵营，至此，deskop 就被 ubuntu 占领了。在此之前，我还用段时间的 debian 和 gentoo。&lt;/p&gt;
&lt;p&gt;不得不说，debian 太伟大太牛逼了，有一次要在一个 MIPS 的小设备上编译安装 erlang， openssl，libcurl 等做一些实验, 要跨平台编译这些软件安装到小设备上去，费了半天终于把这些都编好了，还写了一个编译脚步，结果 erlang 运行的时候虚拟机总是报错，也不知道怎么回事。后来注意到 debian 居然有 MIPS，ARM 的源，后来在 MIPS 设备上安装软件做实验，我再也没有遇到问题，一切都用 apt-get 搞定了。&lt;/p&gt;
&lt;p&gt;除了 apt-get, 我想最令我惊喜还有 ubuntu 自带了 python 2.7，让我很容易在两台电脑之间拷贝文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;m SimpleHTTPServer
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;是不是很爽，rMBP 也带了 Python。不过传文件也不用 python 了，有更好用 Airdrop 可以用。&lt;/p&gt;
&lt;p&gt;rMBP 刚到手的时候，我创建了第一个目录是 Workspace，小四同学问我为啥第一个字母要大写，输入多不方便，我说我 home 目录下都是大写的，这样我 ls 会比较漂亮。&lt;/p&gt;
&lt;p&gt;其实我不想把我的系统变得很乱，我喜欢保持某些一致，让自己的心里觉得有点舒服。就像上学的时候，看到黑板上有点粉笔的字迹没有擦干净，就想伸手过去摸一下把它擦掉。&lt;/p&gt;
&lt;p&gt;我想，nodejs，ruby，python的粉丝里不少都是这样的吧，不然怎么会有 nvm，rvm，virtualenv。&lt;/p&gt;
&lt;p&gt;如果你也在用 python，而且还经常在 github 上面拉别人的代码过来玩，或者安装一些python lib, 我推荐你用 virtualenv:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo easy_install pip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo pip install virtualenv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来就可以在虚拟的环境里面随便折腾了，而且你的系统还会保持干干净净。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;virtualenv venv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每次使用 venv 这个虚拟环境时都要记得激活它，所以可以 alias 到 .bash_profile 里面去。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;. venv/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面那个点(dot/period) 是 source 的代名词, 相当于&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source venv/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来通过 pip 安装的东西都会在这个虚拟环境中了，是不是很好玩。&lt;/p&gt;
&lt;p&gt;Love my rMBP, Love my python.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>阿里云和 ucloud 云主机评测</title>
      <link>//lewang.dev/posts/2013-08-09-benchmark-of-aliyun-and-ucloud/</link>
      <pubDate>Fri, 09 Aug 2013 00:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2013-08-09-benchmark-of-aliyun-and-ucloud/</guid>
      <description>&lt;h2 id=&#34;总体说明&#34;&gt;总体说明&lt;/h2&gt;
&lt;p&gt;我使用联通 10M 光网，SSH 在多个时间段登录两个主机都是非常的快，但是阿里云的 SSH 有时会断开连接，需要重新登录(&lt;em&gt;一天遇到 n 次&lt;/em&gt;)，ucloud 一次都没有断开连接过。两者总体操作上都很流畅。平时我比较习惯于使用 ubuntu，于是在两个主机上都安装了 Ubuntu 12.04_64 的 Server 版本。在安装初始化系统过程中(测试过两次)，Ucloud 的速度要快于阿里云主机，粗略估计都是在 20s 以内，因此差别不大。&lt;/p&gt;
&lt;p&gt;阿里云主机安装过程中不需要人为参与，选好主机配置即可，主机一旦创建完成，用户名和口令会发送到测试者手机上，而且直接发送的是 root 账户口令。Ucloud 除了选择配置之外，还需要设置强登录密码，使用普通用户登录，感觉更 geek 一点。&lt;/p&gt;
&lt;p&gt;默认情况配置下，关闭重启服务器，Ucloud 会发送主机变化短信到手机，阿里云不会。阿里云在系统负载预警方面比较全面，ucloud 侧重于 server 上在线状态和相关服务的预警。&lt;/p&gt;
&lt;p&gt;在试用和测试过程中我主要偏向于静态的测试，后面还有一个好玩的 Super PI 测试。&lt;/p&gt;
&lt;p&gt;阿里云和 ucloud 都是主机，和实际的服务器使用上没有什么区别。另外阿里云有 paas，需要单独购买，目前支持 php 和 nodejs，一些基本的服务如 memcached 等都可直接使用。&lt;/p&gt;
&lt;p&gt;如果做互备，如果我们不使用这两个云平台各自特有的一些服务(主要是阿里云有一些如开放存储服务 OSS 等)，相互切换难度上应该是差不多的。&lt;/p&gt;
&lt;h2 id=&#34;主机概览&#34;&gt;主机概览&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;项目&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;阿里云&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;ucloud&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;按量付费&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持(不能升级或者调整主机配置&lt;!-- raw HTML omitted --&gt;*&lt;!-- raw HTML omitted --&gt;)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;包年包月&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;操作系统&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可重置&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可重装&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;CPU 升级&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持(需要关机)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持(需要关机)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;内存升级&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持(需要关机)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持(需要关机)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;磁盘扩容&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持，可以升级或者添加新的磁盘，最大为 2000G&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持，可以扩容最大到 1000G（与系统盘在同一个主机上），&amp;lt;/br/&amp;gt;或者添加新的网络磁盘 udisk&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;磁盘镜像&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;带宽升级&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;其它服务需要单独购买&#34;&gt;其它服务[需要单独购买]&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;项目&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;阿里云&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;ucloud&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;负载均衡服务&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持(目前免费)，需要两台主机以上&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持(目前免费)，需要两台主机以上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;关系型数据库服务&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持，mysql 和 sqlserver&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持，mysql 和 percona&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;特有的服务&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;开放存储服务 OSS、开放数据处理服务 ODPS、开放结构化数据服务 OTS&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;CDN、短信服务（可二次开发）、与又拍、DNSPod 和搜狐 SendCloud 直接绑定&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;&lt;!-- raw HTML omitted --&gt;*&lt;!-- raw HTML omitted --&gt;按量付费不支持更换操作系统；不支持配置变更功能（包括带宽升级、CPU 和内存升级、新增数据盘）;“包年包月“和”按量付费“不支持相互更换;1 台云服务器只能选择 1 种，无法同时选择&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;收费结构参考&#34;&gt;收费结构(参考)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;项目&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;阿里云&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;ucloud&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;价格动态计算&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;http://buy.aliyun.com/&#34;&gt;http://buy.aliyun.com/&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;http://www.ucloud.cn/price&#34;&gt;http://www.ucloud.cn/price&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 核 CPU/2GB 内存/100G 数据盘/10M 带宽&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8,620 元/年&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5,200 元/年&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2 核 CPU/4GB 内存/100G 数据盘/10M 带宽&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10,590 元/年&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6,900 元/年&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4 核 CPU/16GB 内存/1000G 数据盘/10M 带宽&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;24,030 元/年&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;19,800 元/年&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4 核 CPU/16GB 内存/1000G 数据盘/20M 带宽&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3,4030 元/年&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;24,900 元/年&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2 核 CPU/4GB 内存/100G 数据盘/20M 带宽&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;20,590 元/年&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;11,400 元/年&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4 核 CPU/8GB 内存/100G 数据盘/20M 带宽&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;24,530 元/年&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;14,800 元/年&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;……&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;……&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;……&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;试用情况&#34;&gt;试用情况&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;项目&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;阿里云&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;ucloud&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;主机名&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;aliyun-s1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ucloud-s1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用户名&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;root&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ubuntu[默认普通用户权限]&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;登录口令&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;自动生成默认密码，弱密码&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;必须设置强密码&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;数据中心&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;华东青岛 BGP&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;北京 BGP(2M)，客服推荐使用北京 BGP，另外还有华东双线可选&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;CPU&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2 核 Intel(R) Xeon(R) CPU E5-2420 0 @ 1.90GHz&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2 核 QEMU Virtual CPU version (cpu64-rhel6)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;内存&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1.5GB&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2GB&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;系统盘[ 免费]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;20GB&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;20GB&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;OS&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ubuntu 12.04 64 位[只有 64 位]，支持 Centos(5.7,5.8,6.3)、Debian 6.06、Ubuntu 12.04, RHEL(5.4,5.7)、Windows(2003,2008r2)等 64 位版本&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ubuntu 12.04 64 位，比阿里云支持更多的 OS，并且都有 32 位版本可选&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;uptime&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10:44:11 up 54 min, 1 user, load average: 0.00, 0.01, 0.04&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10:44:11 up 54 min, 1 user, load average: 0.00, 0.01, 0.04&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;监控&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;默认没有发送短信&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;默认情况下会发送主机状态变化到注册者手机&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;##监控和预警&lt;/p&gt;
&lt;p&gt;###站点可用性监控&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;项目&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;阿里云&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;ucloud&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ping&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;端口或协议&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持，傻瓜式，预制好了一些常用的，如 HTTP 监控、TCP 端口监控、UDP 监控、DNS 监控、POP3 监控、SMTP 监控、FTP 监控&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;需要自己定义端口和监控策略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;预警&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;短信或者邮件&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;短信或者邮件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;###服务器监控&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;项目&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;阿里云&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;ucloud&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;内容&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;CPU 利用率监控、内存利用率监控、磁盘利用率监控、网络流量监控、进程状态监控、进程数量监控、进程 CPU 资源监控、进程内存资源监控、TCP 连接数监控、Swap 利用率监控、CPU 负载(load)监控、Filesystem 可用性监控、服务监控、日志监控&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;无，有数据视图，需要登录查看系统负载状态&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ping-测试&#34;&gt;ping 测试&lt;/h2&gt;
&lt;h3 id=&#34;测试工具&#34;&gt;测试工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ping.chinaz.com/&#34;&gt;http://ping.chinaz.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测试结果&#34;&gt;测试结果&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;阿里云(IP:115.28.3.138)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;线路&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;最快节点&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;响应&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;最慢节点&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;响应&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;平均响应&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;所有线路&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;上海[电信]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;13 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;德国[海外]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;311 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;73 毫秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;电信&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;上海[电信]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;13 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;香港[电信]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;187 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;62 毫秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;多线&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;上海[多线]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;22 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;北京[多线]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;39 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;30 毫秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;联通&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;北京[联通]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;16 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;泉州[联通]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;65 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;38 毫秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;移动&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;上海[移动]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;22 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;河北[移动]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;68 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;38 毫秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;海外&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;香港[海外]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;46 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;德国[海外]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;311 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;165 毫秒&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;ucloud(IP:42.62.56.129)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;线路&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;最快节点&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;响应&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;最慢节点&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;响应&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;平均响应&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;所有线路&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;北京[联通]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;德国[海外]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;403 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;64 毫秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;电信&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;陕西西安[电信]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;21 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;四川绵阳[电信]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;53 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;35 毫秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;多线&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;北京[多线]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;河南郑州[多线]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;53 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;28 毫秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;联通&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;北京[联通]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;深圳[联通]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;73 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;33 毫秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;移动&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;河北[移动]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;26 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;福建厦门[移动]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;45 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;35 毫秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;海外&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;韩国[海外]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;49 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;德国[海外]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;403 毫秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;186 毫秒&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;经过多次 ping 测试，ucloud 要比阿里云快一些。这里使用的客服推荐的各自的 BGP 网络：阿里云华东青岛机房和 ucloud 北京 BGP 机房。&lt;/p&gt;
&lt;h2 id=&#34;下载测试&#34;&gt;下载测试&lt;/h2&gt;
&lt;p&gt;在各自主机上使用 wget 下载http://mirrors.163.com/ubuntu-releases/13.04/ubuntu-13.04-server-i386.iso&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;项目&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;阿里云&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;ucloud&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;解析后 IP&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;123.58.173.106&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;123.58.173.106&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;平均速度&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;913K/s&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5.41M/s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ucloud 下载速度达到了 5.41M/s，可能它和网易的镜像比较近吧。好吧，那来测试一下 scp 吧。
在各自服务器上都 dd 一个 100M 文件出来，然后分别使用 scp 上传和下载。之后搭建一个 Niginx Server 来测试一下 HTTP。
新建的 20G 数据盘情况(tune2fs -l /dev/vdb |grep Block)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;项目&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;阿里云&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;ucloud&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Block Size&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4096&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4096&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;使用 dd 创建 2000M 文件，block 大小为 8K&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dd if=/dev/zero of=file_8k bs=8k count=250k
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 dd 创建 2000M 文件，block 大小为 4K&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dd if=/dev/zero of=file_4k bs=4k count=500k
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;项目&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;阿里云&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;ucloud&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;file_8k&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;79.3401 s, 26.4 MB/s&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6.84755 s, 306 MB/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;file_4k&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;77.6012 s, 27.0 MB/s&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6.36673 s, 329 MB/s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;ucloud 数据盘是和系统盘在一起的，应该不是那种分布式存储，它的 udisk 估计和阿里云的数据盘比较类似，udisk 没有测。&lt;/em&gt;
&lt;strong&gt;使用 scp 主动拷贝文件&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;项目&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;阿里云-&amp;gt;ucloud&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;ucloud -&amp;gt;阿里云&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;file_8k&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;277.7KB/s&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;234.5KB/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;file_4k&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;288.8KB/s&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;242.4KB/s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;阿里云 ab 测试(n=1000, 4.1k 大小 html 文件)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;并发数&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;reqs/s&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;平均等待时间&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;平均处理时间&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3751.57&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.267 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.267 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8809.25&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1.135 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.114 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;20&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;9596.84&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2.084 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.104 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;50&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;9851.63&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;5.075 ms&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;0.102 ms&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;9382.89&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.658 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.107 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;150&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8800.88&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;17.044 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.114 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;200&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6666.13&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;30.002 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.150 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;500&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3740.30&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;133.679 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.267 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;ucloud ab 测试(n=1000, 4.1k 大小 html 文件)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;并发数&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;reqs/s&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;平均等待时间&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;平均处理时间&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6135.53&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.163 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.163 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10202.83&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.980 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.098 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;20&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;15624.27&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1.280 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.064 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;50&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;16508.19&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;3.029 ms&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;0.061 ms&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;14707.14&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6.799 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.068 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;150&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;14320.49&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.475 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.070 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;200&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10312.57&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;19.394 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.097 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;500&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3805.55&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;131.387 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.263 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;unixbench分数越高越好&#34;&gt;UnixBench(分数越高越好)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;项目&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;阿里云&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;ucloud&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;running 1 copy of tests&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;731.3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1150.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;running 2 parallel copies of tests&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1401.4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2310.9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;分值上两个主机的差别还是很明显，从报告的细节上来看，磁盘 IO、CPU 等方面差别也很明显。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux 共享库（动态链接库）相关的一些记录</title>
      <link>//lewang.dev/posts/2013-03-04-so-load-path-in-linux/</link>
      <pubDate>Mon, 04 Mar 2013 00:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2013-03-04-so-load-path-in-linux/</guid>
      <description>&lt;h2 id=&#34;相关的环境变量&#34;&gt;相关的环境变量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LD_LIBRARY_PATH&lt;/strong&gt; ld-linux.so寻找shared object的路径，优先加载出现在路径前面的shared object。如，export LD_LIBRARY_PATH=/home/user/lib:$LD_LIBRARY_PATH&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LD_PRELOAD&lt;/strong&gt; 指定优先供ld-linux.so加载的shared object。如，export LD_PRELAOD=/home/user/lib/glibc.so，可以使用这个变量来改变加载顺序，例如我们自定义的glibc.so中实现了新的strcmp之类的函数，那么可以使用这个变量来实现函数的替换，实现注入&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LD_DEBUG&lt;/strong&gt; 使用这个环境变量来debug载入shared object的情况。如，export LD_DEBUG=files,这样会打印所有所有加载shared object的记录&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一些工具&#34;&gt;一些工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如何查看一个程序或者shared object加载哪些shared object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ldd，可以查看程序或者.so，如，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldd ./foo_test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldd ./libfoo.so
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;对于已经运行的程序，可以这样&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat /proc/PID/maps | awk &amp;#39;{print $6}&amp;#39;| grep &amp;#39;\.so&amp;#39;| sort | uniq
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ lsof -p PID | awk &amp;#39;{print $9}&amp;#39; | grep &amp;#39;\.so&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;没有启动的程序可以这样&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ strace ./foo_test 2&amp;gt;&amp;amp;1 | grep &amp;#39;^open(&amp;#34;.*\.so&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以用上面提到的环境变量来看shared object的加载顺序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ export LD_DEBUG=files
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./foo_test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;顺便介绍下lsof&#34;&gt;顺便介绍下lsof&lt;/h2&gt;
&lt;p&gt;查看占用端口的进程&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;le@SH:~$ sudo lsof -i TCP:80
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nginx 1309 root 7u IPv4 8740 0t0 TCP *:http (LISTEN)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nginx 1310 www-data 7u IPv4 8740 0t0 TCP *:http (LISTEN)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nginx 1311 www-data 7u IPv4 8740 0t0 TCP *:http (LISTEN)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nginx 1312 www-data 7u IPv4 8740 0t0 TCP *:http (LISTEN)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nginx 1313 www-data 7u IPv4 8740 0t0 TCP *:http (LISTEN)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;具体的请&lt;strong&gt;man lsof&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;objdump-和-readelf&#34;&gt;objdump 和 readelf&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;objdump&lt;/strong&gt; 查看object的信息&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -t libfoo.so
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -s -j .rodata -t libfoo.so
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;readelf&lt;/strong&gt; 读elf的信息&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readelf -r  libfoo.so
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>再说 PHP 中 SimpleXML</title>
      <link>//lewang.dev/posts/2012-03-22-a-short-discuss-of-SimpleXML-of-php/</link>
      <pubDate>Thu, 22 Mar 2012 00:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2012-03-22-a-short-discuss-of-SimpleXML-of-php/</guid>
      <description>&lt;p&gt;前一篇帖子使用了xpath，后来了解到xpath的性能可能比较差，而且在遇到有命名空间的时候还有点小麻烦。这里都已豆瓣提供的API返回的xml为例。豆瓣返回的xml不是rss格式的，而是Atom格式，有很多的命名空间，如果习惯于操作rss格式的xml，那么可以直接把xml里面的命名空间的字符串都replace掉，这个方法貌似很简单很暴力，就不会遇到命名空间的问题了。&lt;/p&gt;
&lt;p&gt;从豆瓣API开始，点击这个链接 &lt;a href=&#34;http://api.douban.com/book/subjects?q=java&#34;&gt;http://api.douban.com/book/subjects?q=java&lt;/a&gt; 你就可以看到xml格式，由于返回的是Atom格式的xml，浏览器会自动帮你解析，所以应该这样&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 这样就可以得到一个java.xml文件。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget -O java.xml http://api.douban.com/book/subjects?q&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;java
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以得到一个 java.xml 文件，接下来使用 SimplePHP 处理这个文件。&lt;/p&gt;
&lt;p&gt;首先要创建一个SimpleXML对象&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//$content为xml的内容
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$xml = new SimpleXMLElement($content);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在要获取opensearch命名空间下的totalResults节点的文本，代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$children = $xml-&amp;gt;children(&amp;#39;http://a9.com/-/spec/opensearchrss/1.0/&amp;#39;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$totalResults = $children-&amp;gt;totalResults;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;处理所有xml文档中所有的entry节点&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//处理所有找到的记录
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$entries = $xml-&amp;gt;entry;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;foreach($entries as $entry){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//取命名空间下的孩子节点
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$entryChildren = $entry-&amp;gt;children(&amp;#39;http://www.douban.com/xmlns/&amp;#39;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好了，这里只是抛砖引玉，其它具体的操作还得参考 SimpleXML 的文档。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>我想做的东西可以不值钱，但是它必须‘酷’</title>
      <link>//lewang.dev/posts/2012-03-13-things-i-create-must-be-cool/</link>
      <pubDate>Tue, 13 Mar 2012 00:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2012-03-13-things-i-create-must-be-cool/</guid>
      <description>&lt;p&gt;这句话是FACEBOOK的马克·扎克伯格说的。&lt;/p&gt;
&lt;p&gt;我很认同，并且感觉自己也是这么做的。现在自己做得很多事情，从来没有考虑过它会不会值钱，只是感觉把自己的想法做出来，变成实物的过程就已经很酷。&lt;/p&gt;
&lt;p&gt;对于酷，我觉得至少有两方面的意义。&lt;/p&gt;
&lt;p&gt;一种酷，是一种自我实现的感觉，是一种认同感，成就感。比如自己把自己的不错的想法实现了，当自己看到自己作品的时候，肯定觉得这种感觉很酷。接着你的作品有很多人用了，看了，然后给与了肯定或者赞扬的评价，这时候感到酷，我觉得就应该是一种认同感和成就感。都是内心的感觉，一种推进自我完善的感觉。&lt;/p&gt;
&lt;p&gt;还有一种酷，那就是表面上的酷，比如你的网页效果做得很酷很炫，你实现的功能很酷。虽然这些是表面上的酷，但这些酷的背后却隐藏着无数的思考和磨练。这么表面上的酷，却恰恰可以给人带来内心上的酷。&lt;/p&gt;
&lt;p&gt;就拿摆摊网来说，小小的网站，做得很简单。但是为了实现页面小小的效果，还不得不去多学点东西多花些时间。我喜欢自己东西能弄得那种能给人至简至美的感觉，但是却不能因为简而不“美”了，这里的美是给人一种更好的感觉。所以自己总是在觉得不破坏简的前提下，尽量的让自己的应用让人使用的体验更好更酷。比如说发布书籍信息的页面，以前必须使用ISBN号，现在这里&lt;a href=&#34;http://baitan.sinaapp.com/Static/html/booksearch.html&#34;&gt;点击查看&lt;/a&gt;的将要改成 @林风琦 推荐的 chegg 的效果，是不是比豆瓣的书籍检索要酷很多。进一步思考，对于摆摊首页的检索，以后是不是应该结合用户的搜索习惯和本身的书籍物品数据也实现这种AutoComplete功能。还比如说摆摊还将开发Android手机客户端，到时候只要一拍，就可以把书信息扫下来了，看，多酷！&lt;/p&gt;
&lt;p&gt;现在自己的科研也是这样，能给自己带来一种很酷的感觉，但是就科研的实际应用来说，我觉得可以应用的范围很小。但是想着能把Jim Gray这位数据库大神[此大神已经被外星人带走了，详情看这里]负责的基于微软SQL Server的SDSS项目迁移到适合科学运算的数组模型的数据库上来，然后我们还有可能就性能PK一把，想想就觉得很酷。更酷的是，自己还想到了一种自动迁移的方法[还没有经过深思和验证]。反正就是觉得酷儿！&lt;/p&gt;
&lt;p&gt;为了更酷，继续努力！&lt;/p&gt;
&lt;p&gt;我是 A Lucky Apple，@小码哥&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>写给 2012 的摆摊</title>
      <link>//lewang.dev/posts/2012-01-09-for-baigetan-2012/</link>
      <pubDate>Mon, 09 Jan 2012 00:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2012-01-09-for-baigetan-2012/</guid>
      <description>&lt;p&gt;我期待2012的到来，这一年我将有一个新的开始，好期待。&lt;/p&gt;
&lt;p&gt;最近一直在忙着做实验，读论文，都没有什么时间来弄弄摆摊，自己心里的那种对于摆摊的激情也渐渐淡了很多，但是想想自己当初的想法，立马又有动力拾起摆摊。&lt;/p&gt;
&lt;p&gt;一个小小的网站，看起来确实很简单，也就是拿php连连数据库，做做一些简单的操作，可自己在写这个网站的时候总是很慢。时间少而且比较凌乱是一个原因，但是总的还是缺少一个全面完善细致的规划，自己大部分也是照着当初的设计，然后想到哪儿做到哪儿，如今的摆摊，已经和当初的相去甚远了。越写越复杂，问题也越来越多，停下来一想，还是挥起大刀把乱乱的东西都砍了吧，弄得越简单越好。&lt;/p&gt;
&lt;p&gt;加油！过几天就要回家了，不知道什么时候才能做好，让自己心里舒服一下。这几天赶紧将域名绑定好，将人人、新浪微博等的接入做好，大概就这个样子了。&lt;/p&gt;
&lt;p&gt;大家新年快乐！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SimpleXML使用xpath</title>
      <link>//lewang.dev/posts/2011-12-01-how-to-use-simplexml-of-php/</link>
      <pubDate>Thu, 01 Dec 2011 13:09:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2011-12-01-how-to-use-simplexml-of-php/</guid>
      <description>&lt;p&gt;这几天没心情看论文，于是开始写写摆摊网的代码。摆摊主要做高校二手书籍信息的分享，于是需要从豆瓣上获取图书信息，豆瓣提供了一个完整的xml来描述一本书，例如&lt;a href=&#34;http://api.douban.com/book/subject/isbn/9787543639136&#34;&gt;http://api.douban.com/book/subject/isbn/9787543639136&lt;/a&gt;，于是需要处理这个xml来获取相应信息，这里小码哥采用的是直接使用xpath来获取xml文档中相应的信息。摆摊使用了sae，于是使用SimpleXML来处理xml，加上自己还只是PHP的初学者，于是出现了一些问题。&lt;/p&gt;
&lt;p&gt;这里是一些学习资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xpath:http://www.w3school.com.cn/xpath/&lt;/li&gt;
&lt;li&gt;simplexml:http://cn2.php.net/manual/en/simplexmlelement.xpath.php&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新建SimpleXMLElement对象，xml文件内容在$content中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;$bookFromDouban&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt; SimpleXMLElement(&lt;span style=&#34;color:#008080&#34;&gt;$content&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;直接查询，在命名空间db下的所有attribute，且有name属性，以下xpath查询是没有问题的，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;$result&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;$bookFromDouban&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;xpath&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;//db:attribute[@name]&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是，这条查询就有问题了，如下，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;$result&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;$bookFromDouban&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;xpath&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;//link[@rel=&amp;#39;self&amp;#39;]|//link[@rel=&amp;#39;image&amp;#39;]&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的代码表示在默认的命名空间里面查询link节点，但是在php 5.0以上却不能查出数据。需要这样操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//获取这个xml的所有的命名空间
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;$namespaces&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;$bookFromDouban&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getNamespaces&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//注册默认的命名空间为&amp;#39;d&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;$bookFromDouban&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;registerXPathNamespace&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#008080&#34;&gt;$namespaces&lt;/span&gt;[&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//现在这个查询就ok了
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;$result&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;$bookFromDouban&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;xpath&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;//d:link[@rel=&amp;#39;self&amp;#39;]|//d:link[@rel=&amp;#39;image&amp;#39;]&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对$result遍历就简单了，这里也给出一个简单的例子，遍历完，变量就初始化了。PS：代码写的不优雅，欢迎拍砖。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;translator &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;array&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;$author&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;array&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008080&#34;&gt;$i&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;$j&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#008080&#34;&gt;$result&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;$item&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;foreach&lt;/span&gt;(&lt;span style=&#34;color:#008080&#34;&gt;$item&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;attributes&lt;/span&gt;() &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;$val&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#008080&#34;&gt;$val&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; str_replace(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#008080&#34;&gt;$val&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#008080&#34;&gt;$val&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;author&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#008080&#34;&gt;$author&lt;/span&gt;[&lt;span style=&#34;color:#008080&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;$item&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#008080&#34;&gt;$val&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;translator&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            translator[&lt;span style=&#34;color:#008080&#34;&gt;$j&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;$item&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#008080&#34;&gt;$$val&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;$item&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>jquery $.ajax() 中 datatype 为 json 时的问题</title>
      <link>//lewang.dev/posts/2011-12-01-when-datatype-is-json/</link>
      <pubDate>Thu, 01 Dec 2011 00:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2011-12-01-when-datatype-is-json/</guid>
      <description>&lt;p&gt;最近在为摆摊写点前端 js 的时候，在使用 jquery 的 $.ajax()这个方法的时候，当datatype设置为json时，总是不执行success回调，而是执行error回调。而将datatype设置成text，就可以执行success回调了，摆摊使用的是jQuery JavaScript Library v1.6.2，查看jQuery文档可知：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“json”: Evaluates the response as JSON and returns a JavaScript object. In jQuery 1.4 the JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. (See json.org for more information on proper JSON formatting.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我用php产生的字符串是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{‘isbn’&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&amp;#39;&lt;/span&gt;ISBN号码格式不正确，应为10位或者13位的字符串’}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;很明显，json.org规则使用的是双引号，而不是单引号，jQuery1.4 以后都要求更为严格的 json 格式&lt;/p&gt;
&lt;p&gt;对于以上单引号的字符串，可以使用datatype为text，然后使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//content = {‘isbn’:&amp;#39;ISBN号码格式不正确，应为10位或者13位的字符串’}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;var&lt;/span&gt; json &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;eval&lt;/span&gt;(‘(‘&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; content &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt;’)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>关于摆摊的一些思考</title>
      <link>//lewang.dev/posts/2011-11-08-think-of-baigetan/</link>
      <pubDate>Tue, 08 Nov 2011 00:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2011-11-08-think-of-baigetan/</guid>
      <description>&lt;p&gt;今天是十一假期归来的第一天，实验室也启用了新的管理制度，坐在北洋楼的实验室也有一会儿了，刚发了一会儿呆，对摆摊又有了一些新的思考。&lt;/p&gt;
&lt;p&gt;我的目标是想把摆摊做成高校的网上交易平台，也就是类似淘宝，但是作为摆摊网的初期是不合适的，因为这个交易平台太大太复杂。&lt;/p&gt;
&lt;p&gt;所以摆摊的第一步还是做交易信息的发布和检索，主打高校的书籍和物品交易信息，交易还是线下完成，这样，初期的摆摊应该就和赶集、百姓、58等类似了，而且这样摆摊的实现难度也会大大降低，在加上SNS和LBS，摆摊就可以提供比赶集、百姓、58等更精准的信息服务了。&lt;/p&gt;
&lt;p&gt;这几天只是做了一些准备工作，熟悉了sae的环境，网站的架构也基本完成，页面上的设计也差不多了，接下来就是定下摆摊网的初步方向，确定第一阶段的核心功能，将其业务逻辑实现了。&lt;/p&gt;
&lt;p&gt;加油！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>摆摊网页面设计</title>
      <link>//lewang.dev/posts/2011-11-07-design-of-baigetan/</link>
      <pubDate>Mon, 07 Nov 2011 00:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2011-11-07-design-of-baigetan/</guid>
      <description>&lt;p&gt;从泰山回来这几天，抽得空把摆摊网的页面做了出来，包括css和html的编写等，现在可以从baitan.sinaapp.com看到页面效果了，目前兼容ie8、ff、chrome、safari等。&lt;/p&gt;
&lt;p&gt;baitan001.com也在备案之中，应该很快就可以使用baitan001.com域名访问了。&lt;/p&gt;
&lt;p&gt;有同学想练习js，php等web技术的，不妨联系我，我肯定能让你参与进来！&lt;/p&gt;
&lt;p&gt;我是小码哥&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>摆摊的一些进展</title>
      <link>//lewang.dev/posts/2011-10-21-process-of-baigetan/</link>
      <pubDate>Fri, 21 Oct 2011 13:11:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2011-10-21-process-of-baigetan/</guid>
      <description>&lt;p&gt;这段时间都在进行密集的笔试面试，但还是没有停下摆摊网的开发进程。目前摆摊网已经由&lt;a href=&#34;http://weibo.com/wujiangchuan&#34;&gt;吴江川&lt;/a&gt;同学设计好了产品的原型，我也在原型的基础上做好了全部页面的设计工作，接下来就是开始后台逻辑的开发。&lt;/p&gt;
&lt;p&gt;目前后台数据库部分已经设计完毕。&lt;/p&gt;
&lt;p&gt;加油！&lt;/p&gt;
&lt;p&gt;我是&lt;a href=&#34;http://weibo.com/xiaomg&#34;&gt;小码哥&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>//lewang.dev/about/</link>
      <pubDate>Wed, 28 Sep 2011 03:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/about/</guid>
      <description>&lt;p&gt;小碼哥，或樂哥&lt;/p&gt;
&lt;h2 id=&#34;过往与向往&#34;&gt;过往与向往&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;兲朝哏都&lt;a href=&#34;http://www.tju.edu.cn&#34;&gt;七里台职业技术学院&lt;/a&gt;相声专业(CS)硕士毕业&lt;/li&gt;
&lt;li&gt;混迹六七八三个里台八年，走了一条学生、老师、学生曲折漫长的校园之路，除了一纸文凭之外，更是收获了爱情、友情和师生情&lt;/li&gt;
&lt;li&gt;喜折腾，瞎折腾，机缘巧合来到魔都并定居在此&lt;/li&gt;
&lt;li&gt;技校授得一技之长，努力成为一名匠人&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;联系方式&#34;&gt;联系方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Email: lewang.dev{{at}}gmail.com&lt;/li&gt;
&lt;li&gt;微博: &lt;a href=&#34;https://weibo.com/xiaomg&#34;&gt;@小码哥&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/lewangdev&#34;&gt;@lewangdev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/lewangdev&#34;&gt;@lewangdev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;gpg-key&#34;&gt;GPG Key&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://pgp.mit.edu/pks/lookup?op=get&amp;amp;search=0xA1D0BEAD740F69DE&#34;&gt;GPG Public Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fingerprint: 535B 1620 1E5F 16DC 1DF1  59FA A1D0 BEAD 740F 69DE&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关于本站&#34;&gt;关于本站&lt;/h2&gt;
&lt;p&gt;本网站使用 &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; 静态博客生成器构建，托管在 &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt; 服务上，本站 GitHub 仓库地址是 &lt;a href=&#34;https://github.com/lewangdev/lewangdev.github.io&#34;&gt;lewangdev.github.io&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>摆摊网</title>
      <link>//lewang.dev/posts/2011-09-28-hello-baigetan/</link>
      <pubDate>Wed, 28 Sep 2011 03:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2011-09-28-hello-baigetan/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;点评：留在这里，让自己可以看到以往无知的自己&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一转眼，20 年就过去了，终于要和自己 20 年的学生身份说拜拜了。&lt;/p&gt;
&lt;p&gt;那天去图书馆借书，回来的路上敬业湖桥边的那棵树的时候，心不由得感叹起来，这棵树，我已经拍下了它的春夏秋冬，它叶枯叶落，相似年年，只因它生根于此，我是要走的。&lt;/p&gt;
&lt;p&gt;去图书馆，边走边想，就想到了前几天在&lt;a href=&#34;http://www.zhihu.com&#34;&gt;知乎&lt;/a&gt;上看到的社会化图书馆网站，感觉很不错(而且UI做的很不错，想借鉴一下)。想着自己买了好多书，都闲在书架上，是不是也可以搞一个校园图书馆，把同学校的闲书都利用起来。然后又马上否定了自己，因为我自己其实并不愿意把自己买的书借给别人看。这个想法就此作罢。&lt;/p&gt;
&lt;p&gt;想想自己倒是有不少二手书带不走了，得卖掉，还有一些小物件，也带不走了，扔了还挺可惜，也可以卖掉。于是想找找哪里去买，学校BBS感觉还可以，但是信息没有分类，不易于检索，而且用户体验很不好。百姓、赶集、58同城确实可以发布二手信息，但是信息又接近海量，不能针对目标人群——学生，比如我想找同专业学长学姐的书，那就不好找了，再比如我要找我考研学校的资料，那也不好找了，除非去相应的论坛，不然也是很难找。还有个大学生C2C，这个网站感觉心太大，不靠谱，而且用户体验很差。而且到学生毕业的时候，将会有大量的二手信息，是不是可以考虑搭建一个大学生专用的二手物品交易平台，而且融入校园SNS和LBS元素，主打二手书籍的交易呢。综合考虑以上，我觉得这挺靠谱的。&lt;/p&gt;
&lt;p&gt;于是我打算开发一个这样的平台——摆摊网&lt;/p&gt;
&lt;p&gt;天大每年有6000多的毕业生，如果有30%的毕业生能使用，那就将近 2000 人，融入 SNS 元素之后，用户会不会爆炸是增加？我觉得流量肯定会有的。&lt;/p&gt;
&lt;p&gt;于是立马动手，先是在美橙互联上注册了域名 &lt;a href=&#34;http://baitan.sinaapp.com&#34;&gt;baitan001.com&lt;/a&gt; (正宗的开心网也是 kaixin001.com )，然后找了几个同学听了他们意见，同时还邀请了两个同学一起来做这个小项目。&lt;/p&gt;
&lt;p&gt;感谢新浪SAE给了我实现自己的这个小小梦想的机会，前段时间参加新浪微博应用大赛，对SAE也有了一些了解，综合考虑之后，决定就在 SAE 平台上来做摆摊网的开发。&lt;/p&gt;
&lt;p&gt;花了昨天一晚上加上今天一下午，结合以往自己用过的 PHP 框架代码，而且动手折腾出了 Baitan 0.0.1 版本 PHP 框架，兼容 SAE 平台，接下来就是一步一步的把摆摊做出来了。&lt;/p&gt;
&lt;p&gt;这段时间一直忙于找工作，参加各种笔试面试，然后被各种鄙视，当然也收获了不少，短短不到一个月，也已经有了好几个巨头互联网公司的 offer 了，自己的工作也大概就这么定下来了。自己在大学和研究生阶段也折腾过不少东西了，但是还是没有做出一个让自己满意的东西，我想把摆摊网做好，即使没人用，我也自己去维护去完善，当做是自己在种地吧。我有梦想，但最开心的还是有个她愿意倾听我。&lt;/p&gt;
&lt;p&gt;今天把&lt;a href=&#34;http://baitan.sinaapp.com&#34;&gt;baitan001.com&lt;/a&gt;做了域名备案，申请了腾讯的企业邮箱，Baitan 0.0.1 框架的相关测试也已经基本完成，敬请期待摆摊网的到来吧！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewangdev/picb0/main/oh-my-blog/old/baigetan_face.jpg&#34; alt=&#34;Baitan Face&#34; title=&#34;Baitan Face&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>//lewang.dev/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/archives/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>