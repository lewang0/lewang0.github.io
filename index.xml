<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小碼哥</title>
    <link>//lewang.dev/</link>
    <description>Recent content on 小碼哥</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 27 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="//lewang.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>机房不能访问互联网，轻松搞定系统部署</title>
      <link>//lewang.dev/posts/2020-11-27-go-through-the-system-firewall/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2020-11-27-go-through-the-system-firewall/</guid>
      <description>创业这段时间以来，我们的 IoT 系统已经在不少客户的机房做了私有化部署，客户大多都是机加工厂、商业大楼、医院和大学实验室等，客户的机房都有一个相同的特点：私有云，与外网隔离，不能访问互联网。或者更为准确的说，是我们部署的服务器不能访问互联网，在没有互联网访问权限的情况下，系统的包管理工</description>
    </item>
    
    <item>
      <title>大象（Gradle）的故事：一见如故</title>
      <link>//lewang.dev/posts/2020-02-22-hello-gradle-1/</link>
      <pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2020-02-22-hello-gradle-1/</guid>
      <description>小码哥：“与大象（Gradle）一见如故？你就是 Gradle？” 大象：“对，我就是那个用来构建 Java 项目的 Gradle 大象。 ” 小码哥：“我好像天天都在用你啊。看，我的项目都是用你构建的。” 大象：“但你不一定真的认识我，你每次修改点构建代码时是不是都要问下谷哥哥（Google）或溢栈哥哥（Sta</description>
    </item>
    
    <item>
      <title>WireGuard 使用简介</title>
      <link>//lewang.dev/posts/2019-10-30-wireguard-go-setup/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2019-10-30-wireguard-go-setup/</guid>
      <description>背景 搭建 VPN 方便连接无公网 IP 云主机进行开发，WireGuard 配置比 OpenVPN 要简单很多，WireGuard 是通过 Linux 内核模块的方式实现的，这样性能最好，但是只能用在 Linux 系统上。本文使用的 wireguard-go， 则是使用 Golang 实现的 WireGuard 协议，属于用户空间(User Space)的实现，性能没有内核模</description>
    </item>
    
    <item>
      <title>树莓派系统日志配置</title>
      <link>//lewang.dev/posts/2019-09-19-rpi-log-config/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2019-09-19-rpi-log-config/</guid>
      <description>背景 树莓派 raspbian 系统日志默认的配置会导致日志过大而占用太多的存储空间，并且频繁写日志也可能减短 EMMC 和 SD 卡的寿命，需要重新配置来满足项目的需求。 日志位置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 /var/log /var/log/syslog /var/log/daemon.log /var/log/mail.info /var/log/mail.warn /var/log/mail.err /var/log/mail.log /var/log/kern.log /var/log/auth.log /var/log/user.log /var/log/lpr.log /var/log/cron.log /var/log/debug /var/log/messages 配置 rsyslog 与 logrotate rsyslog 的配置文件为 /etc/rsyslog.conf, 找到其中 RULES 段 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ############### #### RULES #### ############### #</description>
    </item>
    
    <item>
      <title>如何修改 Linux 用户的 UID 和组的 GID</title>
      <link>//lewang.dev/posts/2019-07-16-change-uid-gid-in-linux/</link>
      <pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2019-07-16-change-uid-gid-in-linux/</guid>
      <description>问题 在使用 Docker 或者 NFS 的时候，需要文件系统挂在到不同的系统中拥有正确的读写权限，需要指定文件所属用户和组的 uid 和 gid。在创建用户和组的时候，系统会自动分配对应的值，这导致在不同的系统中很容易造成 uid 和 gid 不一样而造成读写权限混乱。 例如在系统 A 中，用户 git 的 uid 和组 git 的gid 如下: 1 2 [sysops@cn-bj-aliyun-3 ~]$ id git</description>
    </item>
    
    <item>
      <title>CentOS 7 上使用 pyenv 安装 Python 3.7.3</title>
      <link>//lewang.dev/posts/2019-05-29-centos7-pyenv-install-python-3/</link>
      <pubDate>Wed, 29 May 2019 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2019-05-29-centos7-pyenv-install-python-3/</guid>
      <description>概要 本文记录了在 CentOS 7.6 系统上通过 pyenv 安装 Python 3.7.3 的过程。 环境 CentOS Linux release 7.6.1810 (Core) Kernel 3 3.10.0-957.el7.x86_64 Pyenv 1.2.11 安装 pyenv 1 $ curl https://pyenv.run | bash 然后根据提示把以下内容放到 ~/.bashrc 文件末尾 1 2 3 4 5 6 # Load pyenv automatically by adding # the following to ~/.bashrc: export PATH=&amp;#34;/root/.pyenv/bin:$PATH&amp;#34; eval &amp;#34;$(pyenv init -)&amp;#34; eval &amp;#34;$(pyenv virtualenv-init -)&amp;#34; 安装 Python 3.7.3 准备 1 $ sudo yum -y install xz bzip2 bzip2-devel sqlite-devel gcc openssl-devel readline-devel zlib-devel libffi-devel 安装 1 pyenv install 3.7.3 验证 1 2 3 $ pyenv versions * system (set by /root/.pyenv/version) 3.7.3 参考 https://github.com/pyenv/pyenv/issues/1183 https://github.com/pyenv/pyenv-installer https://github.com/pyenv/pyenv</description>
    </item>
    
    <item>
      <title>Java 进阶要点</title>
      <link>//lewang.dev/posts/2019-03-06-keynotes-of-new-java/</link>
      <pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2019-03-06-keynotes-of-new-java/</guid>
      <description>[填坑]自己学习 Java 和用 Java 过程中的理解和备忘的主要的点, 后续会准备一些列文章来说明。 JDK 11 Oracle 不在免费提供 LTS 版本了，包括 JDK 8 ZGC, 可伸缩的、低延迟的垃圾收集器，STW 时间不超过 10ms Nashorn 标记为 Deprecate 了 JDK 9 module try-catch 简化 _ 为保留关键字 var 将在 JDK 10 中作为关键字, 作为本地变量类型推断关键字 字符串相关，主要是 Compact String, 用</description>
    </item>
    
    <item>
      <title>树莓派 CM3/CM3&#43; 刷写系统</title>
      <link>//lewang.dev/posts/2019-03-01-rpi-cm3-emmc-flashing/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2019-03-01-rpi-cm3-emmc-flashing/</guid>
      <description>准备 阅读Flashing the Compute Module eMMC 准备一个可以刷系统的底板，我用的是微雪Compute-Module-IO-Board-Plus 步骤(Linux 系统下刷系统，可以使用树莓派来刷机) sudo apt install git libusb-1.0-0-dev git clone --depth=1 https://github.com/raspberrypi/usbboot &amp;amp;&amp;amp; cd usbboot &amp;amp;&amp;amp; make sudo ./rpiboot 连好线，跳线部分见各自底板的手册 拔掉 USB SLAVE 1/2/3/4 拔掉 SELECT 跳线帽 将 BOOT ENABLE USB SLAVE 跳线帽</description>
    </item>
    
    <item>
      <title>使用 Docker 方式安装 Gitlab，没你想得那么简单</title>
      <link>//lewang.dev/posts/2018-12-18-gitlab-docker-install/</link>
      <pubDate>Tue, 18 Dec 2018 23:25:20 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2018-12-18-gitlab-docker-install/</guid>
      <description>为什么要写这篇文章？ 曾经几年前在 Docker 还没有广泛应用的时候，在公司使用过源码的方式安装和升级过 Gitlab，虽远没有 Docker 方便，因为自己对 Linux 系统的理解，所以整体上感觉还是挺简单的。这几年随着 Docker 的普及，使得安装 Gitlab 更加的容易，不仅方便了我这样的老鸟，也更方便了小白用户们。但是 Gitlab 官方的 Docker 安装文</description>
    </item>
    
    <item>
      <title>有关 2017 流水账和胡思乱想的记录</title>
      <link>//lewang.dev/posts/2017-12-31-year-end-reviews-of-2017/</link>
      <pubDate>Sun, 31 Dec 2017 00:08:25 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2017-12-31-year-end-reviews-of-2017/</guid>
      <description>好久没有写过文字了，前几篇文也是自己从 Google Doc 中摘出来的工作日志，拿来凑凑数，刷新下 Github 的时间线，有点儿不太像话。看看自己书桌上叠起来超过一尺高的新书才知道，想看的还没来得及看完，想学的也还没来得及学会，想做的也没有做得很好，一年就过去了。2017 是我来魔都的第 5 年，回想这 5 年，自己的</description>
    </item>
    
    <item>
      <title>LVM 实战记录</title>
      <link>//lewang.dev/posts/2017-08-03-lvm-in-action/</link>
      <pubDate>Thu, 03 Aug 2017 23:55:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2017-08-03-lvm-in-action/</guid>
      <description>背景 阿里云云主机两块 100G 的云盘合一个逻辑卷（LV）来使用，单个的 100G 磁盘不够用，需要合在一起使用，并且方便以后扩容 基本知识 磁盘 /dev/xvdb /dev/xvdc 分区, 使用 fdisk 进行分区 fdisk &amp;gt; n &amp;gt; p &amp;gt; 1..4, 主分区最多只有4个 准备分区后，将分区类型变为 LVM 分区，fdisk &amp;gt; t &amp;gt; 8e, 8e 是 LVM 类型 ID 物理卷（PV），卷组（VG），逻辑卷（</description>
    </item>
    
    <item>
      <title>日志收集和分析系统架构</title>
      <link>//lewang.dev/posts/2017-07-23-log-processing-system/</link>
      <pubDate>Sun, 23 Jul 2017 22:30:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2017-07-23-log-processing-system/</guid>
      <description>背景 微服务，日志分散且种类多（php/java/python），用 docker 起应用，日志通过卷放在宿主机器指定目录下，服务有众多实例，metrics 数据也不仅相同，无论是日志还是 metrics 数据，都可以看作是时间序列数据 分散主要表现为： 多个主机 多个目录下多个文件 应用开发所使用的技术栈不同日志格式不</description>
    </item>
    
    <item>
      <title>Log4j2 快速入门</title>
      <link>//lewang.dev/posts/2017-07-15-log4j2/</link>
      <pubDate>Sat, 15 Jul 2017 23:31:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2017-07-15-log4j2/</guid>
      <description>背景 Java 生态下的日志库太多，配置也不同，大多数情况下会使用 SLF4j (又引入了一个库)来抽象日志接口。在使用 Log4j2 后，发现可以不使用 SLF4j 了，并且配置变得更简单，可以使用 lombok 的 log4j2 注解等。 需要搞清楚 如何设置哪些日志要记录下来 日志记录到哪里去 LEVEL 日志级别： 内置（有Fatal）：All &amp;lt; Trace &amp;lt; Debug &amp;lt; Info &amp;lt; Warn &amp;lt; Error &amp;lt;</description>
    </item>
    
    <item>
      <title>MySQL 数据备份和不停机重新搭建主从同步</title>
      <link>//lewang.dev/posts/2017-06-06-xtrabackup/</link>
      <pubDate>Tue, 06 Jun 2017 12:15:07 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2017-06-06-xtrabackup/</guid>
      <description>背景 目前公司主要服务都是直接使用 MySQL 主服务器，从服务主要给离线数据分析服务使用，由于前期弄得比较简单的粗暴，从服务上还有一两个数据库在做生产使用, 并且从服数据已经不能和主服进行进行同步了，有大量错误，忽略都没有办法进行。此外，主服仅配置了三个核心数据的 binlog，随着业务的变化，</description>
    </item>
    
    <item>
      <title>Nginx 性能调优「译」</title>
      <link>//lewang.dev/posts/2014-10-16-tuning-nginx/</link>
      <pubDate>Thu, 16 Oct 2014 15:27:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2014-10-16-tuning-nginx/</guid>
      <description>这是一篇译文，原文链接：Tuning NGINX for Performance Nginx 为人熟知的是在负载均衡、静态缓存和 WEB 服务器等方面的高性能，目前世界上最繁忙的站点中大约有 40% 在使用 Nginx。绝大多数情况下，大多数默认的 Nginx 和 Linux 配置都可以工作得非常好，但也需要做一些优化以获得最好的性能。本文将讨论在优化系统时需要考虑的 Nginx</description>
    </item>
    
    <item>
      <title>Github Pages 服务的域名设置</title>
      <link>//lewang.dev/posts/2014-05-06-github-pages-dns-settings/</link>
      <pubDate>Tue, 06 May 2014 22:51:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2014-05-06-github-pages-dns-settings/</guid>
      <description>这几天每次 Push 博客到 Github Pages 时总会收到一封邮件： The page build completed successfully, but returned the following warning: GitHub Pages recently underwent some improvements (https://github.com/blog/1715-faster-more-awesome-github-pages) to make your site faster and more awesome, but we&amp;rsquo;ve noticed that iforget.info isn&amp;rsquo;t properly configured to take advantage of these new features. While your site will continue to work just fine, updating your domain&amp;rsquo;s configuration offers some additional speed and performance benefits. Instructions on updating your site&amp;rsquo;s IP address can be found at https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages#step-2-configure-dns-records, and of course, you can always get in touch with a human at support@github.com. For the more technical minded folks who want to skip the help docs: your site&amp;rsquo;s DNS records are pointed to a deprecated IP address. For information on troubleshooting Jekyll see: https://help.github.com/articles/using-jekyll-with-pages#troubleshooting If you</description>
    </item>
    
    <item>
      <title>从域名和 CDN 来看网站架构</title>
      <link>//lewang.dev/posts/2014-03-06-arch-of-website-domain-cdn/</link>
      <pubDate>Thu, 06 Mar 2014 00:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2014-03-06-arch-of-website-domain-cdn/</guid>
      <description>为了自己做好网站的架构，找了知乎，豆瓣，大众点评和百姓网来做参考。这里主要来看域名和CDN相关的部分，后台的架构也还是要边学便实践。 大概情况 从前端分析了知乎的域名和 DNS 情况，同时对比了一下豆瓣、大众点评和百姓网。从域名、DNS、CDN等使用角度来说，他们之间大同小异。 使用的分析工具</description>
    </item>
    
    <item>
      <title>使用 Vagrant 构建开发环境</title>
      <link>//lewang.dev/posts/2014-03-03-building-devenv-by-vagrant/</link>
      <pubDate>Mon, 03 Mar 2014 23:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2014-03-03-building-devenv-by-vagrant/</guid>
      <description>Vagrant 是一个构建虚拟开发环境的利器，它使得在团队中很容易共享开发环境，有了它，不必每个人都搭建一个自己的开发环境了。在没有使用 vagrant 之前，我在windows中安装了 virtualbox，然后在virtualbox中安装了一个ubuntu server。在 ubuntu 中安装了 mysql、jdk 等软件，</description>
    </item>
    
    <item>
      <title>Python on My rMBP</title>
      <link>//lewang.dev/posts/2014-03-02-python-on-my-rmbp/</link>
      <pubDate>Sun, 02 Mar 2014 21:16:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2014-03-02-python-on-my-rmbp/</guid>
      <description>前几天入手了一台 Macbook Pro Retina，把 BIG 提到了很爽的地步。经过几天的折腾，可以和 windows，ubuntu desktop 说 Byebye 了。之前整整用了一年的 Ubuntu 来工作，我用它来写 C、Java 和 Python, 要是 windows 没有 cygwin, 没有 MacType，那该多么恐怖。后来用了一段时间的 MBP，让我坚定了以后要自己买一个 MBP。 ubuntu 那</description>
    </item>
    
    <item>
      <title>阿里云和 ucloud 云主机评测</title>
      <link>//lewang.dev/posts/2013-08-09-benchmark-of-aliyun-and-ucloud/</link>
      <pubDate>Fri, 09 Aug 2013 00:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2013-08-09-benchmark-of-aliyun-and-ucloud/</guid>
      <description>总体说明 我使用联通10M光网，SSH在多个时间段登录两个主机都是非常的快，但是阿里云的SSH有时会断开连接，需要重新登录(一天遇到n次)，ucloud一次都没有断开连接过。两者总体操作上都很流畅。平时我比较习惯于使用ubuntu，于是在两个主机上都安装了Ubuntu 12.04_6</description>
    </item>
    
    <item>
      <title>Linux 共享库（动态链接库）相关的一些记录</title>
      <link>//lewang.dev/posts/2013-03-04-so-load-path-in-linux/</link>
      <pubDate>Mon, 04 Mar 2013 00:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2013-03-04-so-load-path-in-linux/</guid>
      <description>相关的环境变量 LD_LIBRARY_PATH ld-linux.so寻找shared object的路径，优先加载出现在路径前面的shared object。如，export LD_LIBRARY_PATH=/home/user/lib:$LD_LIBRARY_PATH LD_PRELOAD 指定优先供ld-linux.so加载的shared object。如，export LD_PRELAOD=/home/user/lib/gl</description>
    </item>
    
    <item>
      <title>再说 PHP 中 SimpleXML</title>
      <link>//lewang.dev/posts/2012-03-22-a-short-discuss-of-SimpleXML-of-php/</link>
      <pubDate>Thu, 22 Mar 2012 00:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2012-03-22-a-short-discuss-of-SimpleXML-of-php/</guid>
      <description>前一篇帖子使用了xpath，后来了解到xpath的性能可能比较差，而且在遇到有命名空间的时候还有点小麻烦。这里都已豆瓣提供的API返回的xml为例。豆瓣返回的xml不是rss格式的，而是Atom格式，有很多的命名空间，如果习惯于操作rss格式的xml，那么可以直接把xml里面的命</description>
    </item>
    
    <item>
      <title>我想做的东西可以不值钱，但是它必须‘酷’</title>
      <link>//lewang.dev/posts/2012-03-13-things-i-create-must-be-cool/</link>
      <pubDate>Tue, 13 Mar 2012 00:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2012-03-13-things-i-create-must-be-cool/</guid>
      <description>这句话是FACEBOOK的马克·扎克伯格说的。 我很认同，并且感觉自己也是这么做的。现在自己做得很多事情，从来没有考虑过它会不会值钱，只是感觉把自己的想法做出来，变成实物的过程就已经很酷。 对于酷，我觉得至少有两方面的意义。 一种酷，是一种自我实现的感觉，是一种认同感，成就感。比如自己</description>
    </item>
    
    <item>
      <title>写给 2012 的摆摊</title>
      <link>//lewang.dev/posts/2012-01-09-for-baigetan-2012/</link>
      <pubDate>Mon, 09 Jan 2012 00:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2012-01-09-for-baigetan-2012/</guid>
      <description>我期待2012的到来，这一年我将有一个新的开始，好期待。 最近一直在忙着做实验，读论文，都没有什么时间来弄弄摆摊，自己心里的那种对于摆摊的激情也渐渐淡了很多，但是想想自己当初的想法，立马又有动力拾起摆摊。 一个小小的网站，看起来确实很简单，也就是拿php连连数据库，做做一些简单的操作</description>
    </item>
    
    <item>
      <title>SimpleXML使用xpath</title>
      <link>//lewang.dev/posts/2011-12-01-how-to-use-simplexml-of-php/</link>
      <pubDate>Thu, 01 Dec 2011 13:09:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2011-12-01-how-to-use-simplexml-of-php/</guid>
      <description>这几天没心情看论文，于是开始写写摆摊网的代码。摆摊主要做高校二手书籍信息的分享，于是需要从豆瓣上获取图书信息，豆瓣提供了一个完整的xml来描述一本书，例如http://api.douban.com/book/subject/isbn/9787543639136，于是需要处理这个x</description>
    </item>
    
    <item>
      <title>jquery $.ajax() 中 datatype 为 json 时的问题</title>
      <link>//lewang.dev/posts/2011-12-01-when-datatype-is-json/</link>
      <pubDate>Thu, 01 Dec 2011 00:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2011-12-01-when-datatype-is-json/</guid>
      <description>最近在为摆摊写点前端 js 的时候，在使用 jquery 的 $.ajax()这个方法的时候，当datatype设置为json时，总是不执行success回调，而是执行error回调。而将datatype设置成text，就可以执行success回调了，摆摊使用的是jQuery JavaScript Library v1.6.2，查看jQ</description>
    </item>
    
    <item>
      <title>关于摆摊的一些思考</title>
      <link>//lewang.dev/posts/2011-11-08-think-of-baigetan/</link>
      <pubDate>Tue, 08 Nov 2011 00:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2011-11-08-think-of-baigetan/</guid>
      <description>今天是十一假期归来的第一天，实验室也启用了新的管理制度，坐在北洋楼的实验室也有一会儿了，刚发了一会儿呆，对摆摊又有了一些新的思考。 我的目标是想把摆摊做成高校的网上交易平台，也就是类似淘宝，但是作为摆摊网的初期是不合适的，因为这个交易平台太大太复杂。 所以摆摊的第一步还是做交易信息的</description>
    </item>
    
    <item>
      <title>摆摊网页面设计</title>
      <link>//lewang.dev/posts/2011-11-07-design-of-baigetan/</link>
      <pubDate>Mon, 07 Nov 2011 00:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2011-11-07-design-of-baigetan/</guid>
      <description>从泰山回来这几天，抽得空把摆摊网的页面做了出来，包括css和html的编写等，现在可以从baitan.sinaapp.com看到页面效果了，目前兼容ie8、ff、chrome、safari等。 baitan001.com也在备案之中，应该很快就可以使用baitan001.com域名</description>
    </item>
    
    <item>
      <title>摆摊的一些进展</title>
      <link>//lewang.dev/posts/2011-10-21-process-of-baigetan/</link>
      <pubDate>Fri, 21 Oct 2011 13:11:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2011-10-21-process-of-baigetan/</guid>
      <description>这段时间都在进行密集的笔试面试，但还是没有停下摆摊网的开发进程。目前摆摊网已经由吴江川同学设计好了产品的原型，我也在原型的基础上做好了全部页面的设计工作，接下来就是开始后台逻辑的开发。 目前后台数据库部分已经设计完毕。 加油！ 我是小码哥</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>//lewang.dev/about/</link>
      <pubDate>Wed, 28 Sep 2011 03:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/about/</guid>
      <description>小碼哥，或樂哥 过往与向往 兲朝哏都七里台职业技术学院相声专业(CS)硕士毕业 混迹六七八三个里台八年，走了一条学生、老师、学生曲折漫长的校园之路，除了一纸文凭之外，更是收获了爱情、友情和师生情 喜折腾，瞎折腾，机缘巧合来到魔都并定居在此 技校授得一技之长，努力成为一名匠人 联系方式 Email: lewang.dev{{at}}gmail.com 微博</description>
    </item>
    
    <item>
      <title>摆摊网</title>
      <link>//lewang.dev/posts/2011-09-28-hello-baigetan/</link>
      <pubDate>Wed, 28 Sep 2011 03:40:00 +0000</pubDate>
      
      <guid>//lewang.dev/posts/2011-09-28-hello-baigetan/</guid>
      <description>点评：留在这里，让自己可以看到以往无知的自己 一转眼，20 年就过去了，终于要和自己 20 年的学生身份说拜拜了。 那天去图书馆借书，回来的路上敬业湖桥边的那棵树的时候，心不由得感叹起来，这棵树，我已经拍下了它的春夏秋冬，它叶枯叶落，相似年年，只因它生根于此，我是要走的。 去图书馆，边走边想，</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>//lewang.dev/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//lewang.dev/archives/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
