<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 小码哥的博客</title>
    <link>https://127.0.0.1/posts/</link>
    <description>Recent content in Posts on 小码哥的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 18 Dec 2018 23:25:20 +0000</lastBuildDate>
    
	<atom:link href="https://127.0.0.1/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 Docker 方式安装 Gitlab，没你想得那么简单</title>
      <link>https://127.0.0.1/posts/2018-12-18-gitlab-docker-install/</link>
      <pubDate>Tue, 18 Dec 2018 23:25:20 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2018-12-18-gitlab-docker-install/</guid>
      <description>为什么要写这篇文章？ 曾经几年前在 Docker 还没有广泛应用的时候，在公司使用过源码的方式安装和升级过 Gitlab，虽远没有 Docker 方便，因为自己对 Linux 系统的理解，所以整体上感觉还是挺简单的。这几年随着 Docker 的普及，使得安装 Gitlab 更加的容易，不仅方便了我这样的老鸟，也更方便了小白用户们。但是 Gitlab 官方的 Docker 安装文档并没有写得很完善, 除了官方文档之外，检索出来的安装文档也是人云亦云，东拼西凑，结果也就是能运行起来，凑合着能用而已。
我希望每做一件小事的时候也都能抱着“知其然知其所以然”的心态对待，用 Docker 方式安装 Gitlab，说简单来说就是一行命令的事儿，但是这样就够了吗？我看是不够的，所以就有了这篇文档。
本文需要达成的事项  在 CentOS 7 系统中安装 Docker 使用 Docker 方式安装中文版 Gitlab 和宿主机器共用 22(SSH) 端口 支持 SSH(22)/HTTPS(443) 方式推拉仓库 使用 SMTP 方式配置通知邮箱(腾讯企业邮箱) 改写默认的项目标签(Labels)  在 CentOS 7 系统中安装 Docker 这部分参考 Docker 的官方文档, 罗列一下安装步骤, 细节请看 Docker 的官方文档。如果使用 root 用户安装，sudo 可以去掉。
1. 删除老版本 Docker $ sudo yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-selinux \ docker-engine-selinux \ docker-engine  2.</description>
    </item>
    
    <item>
      <title>有关 2017 流水账和胡思乱想的记录</title>
      <link>https://127.0.0.1/posts/2017-12-31-year-end-reviews-of-2017/</link>
      <pubDate>Sun, 31 Dec 2017 00:08:25 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2017-12-31-year-end-reviews-of-2017/</guid>
      <description>好久没有写过文字了，前几篇文也是自己从 Google Doc 中摘出来的工作日志，拿来凑凑数，刷新下 Github 的时间线，有点儿不太像话。看看自己书桌上叠起来超过一尺高的新书才知道，想看的还没来得及看完，想学的也还没来得及学会，想做的也没有做得很好，一年就过去了。2017 是我来魔都的第 5 年，回想这 5 年，自己的成长还是很多的，但 2017 这一年，好像与 2016 并没有什么大的不同，这让自己感到很担忧。
在 2017 年的最后几天，终于离开了自己熟悉的工作环境，从自己的舒适空间加入了一个新的环境，我想这就是改变的开始，一个新的起点。
2017 是平淡的，可能和未来的每一年也不会有太大差别，尽管我不希望这样。元旦假期这 3 天有空的时候都在回想，但是又想不起有那些特别印象深刻的事情，以至于总结都不太好写下去。我想那不如就回想几个和自己有关系的场景，做一个清单好了：
 Bye 2017 区块链和比特币 人工智能（AI） 物联网大数据 Insurtech 和 Fintech 关于个人职业发展的思考 Hello 2018  Bye 2017 编程语言学习  Golang：完成基本语法学习（官方文档和《Go 语言实战》），可以无障碍阅读 Golang 项目代码（《自己动手写 Java 虚拟机》），并且可手动完成简单 Golang 项目用 Python 重写，主要有 eureka client Kotlin：除协程外，完成官方文档中所有语言部分的学习内容，并使用 kotlin 开发了 2 个项目，其中一个是用 kotlin 重写了 Aprereo CAS 的核心功能 TypeScript：完成基本语法学习，目前没有实际应用的场景，希望从 2018 起，自己在需要写 JavaScript 的地方，全部用 TypeScript 来代替  书籍阅读 阅读量太少，希望在 2018 年里能增大阅读量。</description>
    </item>
    
    <item>
      <title>LVM 实战记录</title>
      <link>https://127.0.0.1/posts/2017-08-03-lvm-in-action/</link>
      <pubDate>Thu, 03 Aug 2017 23:55:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2017-08-03-lvm-in-action/</guid>
      <description>背景 阿里云云主机两块 100G 的云盘合一个逻辑卷（LV）来使用，单个的 100G 磁盘不够用，需要合在一起使用，并且方便以后扩容
基本知识  磁盘 /dev/xvdb /dev/xvdc 分区, 使用 fdisk 进行分区 fdisk &amp;gt; n &amp;gt; p &amp;gt; 1..4, 主分区最多只有4个 准备分区后，将分区类型变为 LVM 分区，fdisk &amp;gt; t &amp;gt; 8e, 8e 是 LVM 类型 ID 物理卷（PV），卷组（VG），逻辑卷（LV），从磁盘分区创建 PV，通过 PV 创建 VG 或者把 PV 加入已有的 VG，在 VG 上创建 LV，LV 看起来就是逻辑的上磁盘，使用和真实的磁盘没什么明显区别, 在 LV 上构建文件系统  创建  创建物理卷 pvcreate /dev/xvdb1，对分区进行操作 创建 vg0 卷组 vgcreate vg0 /dev/xvdb1 查看卷组 vgdisplay， 可以看到卷组有多大 在 vg0 上创建 data 逻辑卷 lvcreate -L 99G -n data vg0 或者 lvcreate -l 25556 -n data vg0 创建文件系统 mkfs.</description>
    </item>
    
    <item>
      <title>日志收集和分析系统架构</title>
      <link>https://127.0.0.1/posts/2017-07-23-log-processing-system/</link>
      <pubDate>Sun, 23 Jul 2017 22:30:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2017-07-23-log-processing-system/</guid>
      <description>背景 微服务，日志分散且种类多（php/java/python），用 docker 起应用，日志通过卷放在宿主机器指定目录下，服务有众多实例，metrics 数据也不仅相同，无论是日志还是 metrics 数据，都可以看作是时间序列数据
分散主要表现为：
 多个主机 多个目录下多个文件 应用开发所使用的技术栈不同日志格式不同 web log（主要是 nginx） 各类事件 一些其它事务性的日志  日志为时间序列数据，包括：
 系统日志: 各类系统产生的跟业务有关的日志或者与业务无关的日志 web 服务器日志：如 access.log/error.log 等有固定格式的日志 性能监控日志：打点记录各类服务的 metrics(全部为数值类型long/double/bool)  系统日志 由时间戳、一些枚举值以及日志内容(变长字符串)组成
 日志时间颗粒度：支持毫秒/秒 枚举值包括：  [必选]主机名/host [必选]服务名/service [必选]实例编号/instance [必选]日记级别/level：info/debug/warn/trace/error 等 [可选]异常名/exception: 如果是异常，把异常名作为枚举值记录 [可选]线程名/thread: [可选]方法名/method： [可选]文件名/file： [可选]行号/line：  日志内容(变长字符串): 为实际记录的内容以及异常堆栈信息  web 服务器日志 access log（nginx） 日志内容：主要是文本(string）或者一些系统 metrics 数据(数值类型long/double)
日志存储和处理：  数据磁带（1周）：kafka 提供热数据检索（1个月）：solr(or lucence based on cassandra) 日志存储（永久）： kariosdb/cassandra: 支持 double/long/string类型，kariosdb 相当于在 cassandra 上面套了一个壳，这样简化了很多时间序列数据处理的操作 数据展示：grafana，官方支持 kariosdb 扩展：数据深度挖掘分析  系统架构 特点：</description>
    </item>
    
    <item>
      <title>Log4j2 配置</title>
      <link>https://127.0.0.1/posts/2017-07-15-log4j2/</link>
      <pubDate>Sat, 15 Jul 2017 23:31:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2017-07-15-log4j2/</guid>
      <description>背景 Java 生态下的日志库太多，配置也不同，大多数情况下会使用 SLF4j (又引入了一个库)来抽象日志接口。在使用 Log4j2 后，发现可以不使用 SLF4j 了，并且配置变得更简单，可以使用 lombok 的 log4j2 注解等。
需要搞清楚
 如何设置哪些日志要记录下来 日志记录到哪里去  LEVEL 日志级别：  内置（有Fatal）：All &amp;lt; Trace &amp;lt; Debug &amp;lt; Info &amp;lt; Warn &amp;lt; Error &amp;lt; Fatal &amp;lt; OFF 还可以自定义： https://logging.apache.org/log4j/2.0/manual/customloglevels.html  Appender: 日志输出的目的地 内置的目的地有：
 console, files（FIle/RollingFile）, remote socket servers, Apache Flume, JMS, remote UNIX Syslog daemons, various database APIs &amp;hellip;  Appender 在接受到日志以后，可以通过级别过滤选择记录日志，具体配置： https://logging.apache.org/log4j/2.0/manual/appenders.html
Logger 负责决定哪些日志要记录和发配日志 哪些需要记日志，设置什么级别，并且配置日志输出到哪些个 Appender 中去都在 Logger 中配置。Logger 有类似继承的关系，名为 Root 的的 Logger  为所有 Logger 的根，也就是说没有做特殊设置（additivity=false), 那么这个 Logger 的日志将会记录到自己指定的 Appender，并且也都会记录到自己所有“父” Logger 设置的 Appender 中去</description>
    </item>
    
    <item>
      <title>MySQL 数据备份和不停机重新搭建主从同步</title>
      <link>https://127.0.0.1/posts/2017-06-06-xtrabackup/</link>
      <pubDate>Tue, 06 Jun 2017 12:15:07 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2017-06-06-xtrabackup/</guid>
      <description>背景 目前公司主要服务都是直接使用 MySQL 主服务器，从服务主要给离线数据分析服务使用，由于前期弄得比较简单的粗暴，从服务上还有一两个数据库在做生产使用, 并且从服数据已经不能和主服进行进行同步了，有大量错误，忽略都没有办法进行。此外，主服仅配置了三个核心数据的 binlog，随着业务的变化，其它数据库不能走主从这条路来同步数据，于是希望不停机的情形下重新调整主服配置，记录所有的数据库的 binlog，同时添加新的从服务器来同步数据
方案1 MySQL 的主从是通过同步 binlog 日志来实现数据同步的，于是需要想办法把从服数据先于主服同步，记录 binlog 的 pos 值，再配置从服从该 pos 处开始同步，考虑可以使用 mysqldump 导出所有 innodb 数据，使用 rsync 同步所有 myisam 数据文件，然后再开启主从同步。但是目前这种方案不适用，主服不能长时间停机
方案2 使用 xtrabackup 来完成目标
主从服务器上都需要安装 xtrabackup（实际使用 xtrabackupex）：
yum install http://www.percona.com/downloads/percona-release/redhat/0.1-4/percona-release-0.1-4.noarch.rpm yum install -y percona-xtrabackup-24  主服： 备份数据 # 注意数据库名称的转义，例如 - 号是 @002d innobackupex --defaults-file=/etc/my.cnf --socket=/var/lib/mysql/mysql.sock --user=root --password=xxxx --parallel=2 --databases=&amp;quot;db1 db2&amp;quot; /data/backup/xtrabackup/  保持事务一致 innobackupex --apply-log /data/backup/xtrabackup/2017-06-06_13-16-21/  同步数据 rsync -avHz 2017-06-06_13-16-21 sysops@cow:/data/backup  从服： 修改 my.</description>
    </item>
    
    <item>
      <title>办理机动车临牌</title>
      <link>https://127.0.0.1/posts/2016-01-28-banlinpai/</link>
      <pubDate>Thu, 28 Jan 2016 11:55:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2016-01-28-banlinpai/</guid>
      <description>  政策已变，目前只能办理有效期为 15 天的临牌，并且最多只能办理两次
 问题 外地户口，上海购车办理机动车(出省)临牌(出省和不出省的临牌办理方法一样,出省临牌有效期是30天，不出省的是15天)
文档记录状态 可用
发生时间 2016年01月28日9:00至9:30
体验得分 90
办理地点 黄浦公安分局交警支队，地址上海黄浦区陆家浜路88号（地铁4号线南浦大桥站1号出口200米处）
可办理时间 周一至周六 8:30-17:00
需要材料  车辆合格证原件和复印件 购车发票原件和复印件 交强险保单原件和复印件 身份证原件和正反面复印件 零钱5元  办理流程记录  进入大厅后跟保安说办理机动车临牌，拿一张《申请办理机动车临时号牌单》，然后坐在椅子上排队并填好临时号牌单 等待办理, 交警会打印两张临牌出来 恭喜你，没有第3步，可以拿着临牌走了  提高效率的小提示  自带黑色签字笔一支 原件和复印件分开成两份  </description>
    </item>
    
    <item>
      <title>驾照转入换证</title>
      <link>https://127.0.0.1/posts/2015-10-15-huanzheng/</link>
      <pubDate>Thu, 15 Oct 2015 11:55:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2015-10-15-huanzheng/</guid>
      <description> 问题 外地户口＋上海居住证，外地驾照即将到期，需要将外地驾照转入上海并且进行驾照到期换证。
可用状态 可用
发生时间 2015年10月15日8:00至10:00
体验得分 90
办理地点 车辆管理所三分所，地址浦东新区沪南公路2638 号
可办理时间 周一至周五 9:00-17:00
办理流程记录  前往4号楼的3层填表缴费并拍照，缴费需要排队，人较多，费用 25 元 拍好照片并拿到照片和表格后前往4号楼2层填表缴费并体检，缴费需要排队，人较多，费用 60 元  缴完体检费进去之后，需要填表并且贴好照片，体检项都是分开进行，主要体检内容包括视力，听力，身高体重，色盲等检测，其他项都是医生随手填上去的，哪个人少就先去体检哪个。我体检的顺序依次是视力，听力，身高体重，色盲检测。 每项体检完，看下体检表格，看看体检项有没有空的，如果没有就直接去出口处，把表格交上去，然后等报告 拿到体检报告后，直接去1号楼一层大厅门口右手处工作人员拿号，号码那张纸要保存好，最后一步领证还需要使用。  叫号后前往柜台管理，跟工作人员确认下需要办理的内容。我这里是办理转入和到期换证。这里会使用照片一张，工作人员会提供剪刀。办理过程大约需要5分钟 前往缴费处缴费，注意看下缴费窗口的号码，缴费处在大厅另外一侧，费用 10 元 前往发证处等待叫号领证  提高效率的小提示  8点30之前到达4号楼3层排队, 尽管 9 点才开始 自带黑色签字笔一支 身份证复印件和居住证复印件各一份  </description>
    </item>
    
    <item>
      <title>Nginx 性能调优「译」</title>
      <link>https://127.0.0.1/posts/2014-10-16-tuning-nginx/</link>
      <pubDate>Thu, 16 Oct 2014 15:27:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2014-10-16-tuning-nginx/</guid>
      <description>这是一篇译文，原文链接：Tuning NGINX for Performance
 Nginx 为人熟知的是在负载均衡、静态缓存和 WEB 服务器等方面的高性能，目前世界上最繁忙的站点中大约有 40% 在使用 Nginx。绝大多数情况下，大多数默认的 Nginx 和 Linux 配置都可以工作得非常好，但也需要做一些优化以获得最好的性能。本文将讨论在优化系统时需要考虑的 Nginx 和 Linux 的部分配置。可配置的选项有很多，但是本文只涵盖推荐大多数用户调整的配置选项。本文没有涵盖的配置选项，只有那些对 Nginx 和 Linux 有了深入的理解的人或者获得了 Nginx 技术支持和专业的服务团队的推荐建议后，才可以考虑调整。Nginx 专业服务器团队已经为世界上一些最繁忙的站点通过优化 Nginx 获得了最高水平的性能，并且可以为任何需要获得自己系统最大产出的客户服务。
简介 本文假设读者对 Nginx 架构和配置的概念已有了基本的了解。Nginx 的文档内容将不会在本文中重复，但本文会提供各项配置简要的介绍和相关文档的链接。
在性能调优时，要遵循一个好的规则：一次只修改一个配置选项，如果这个修改没有在性能方面带来优化，那么要再改回默认值。
我们从 Linux 性能优化的讨论开始，因为 Linux 性能优化的一些值会影响到 Nginx 的一些配置。
Linux 配置 尽管现代 Linux 内核（2.6+）在各种配置情况下都工作得很好，但也有一些配置是想要修改的。如果操作系统的配置设置的太低，那内核日志将会有错误信息，从而得知哪些配置需要调整。Linux 性能优化可能涉及的配置有很多，这里我们只讨论那些优化达到正常工作负载最有可能涉及到的那些配置。调整这些配置请参考详细的 Linux 文档。
Backlog 队列 下面的配置选项与网络连接和其排队方法直接相关。如果连入率很高（译者注：客户端发起的连接很多）且系统性能配置不匹配，例如一些连接表现得有所停顿，那么修改下面得配置将可能有用。
 net.core.somaxconn: 设置等待 Nginx 接受的连接队列的大小。由于 Nginx 接受连接非常的快，这个值通常情况下不用设置得很大，但系统默认值可能比较小，所以对于流量比较大的站点，增大这个值是个不错的想法。如果这个值太小，在内核日志中应该会看到错误消息，那么就需要增大这个值，直到错误消失。注意：若将这个值设置为大于 512 的话，那么需要在 Nginx 配置中修改 listen 指令的 backlog 参数来匹配这个数字。</description>
    </item>
    
    <item>
      <title>Github Pages 服务的域名设置</title>
      <link>https://127.0.0.1/posts/2014-05-06-github-pages-dns-settings/</link>
      <pubDate>Tue, 06 May 2014 22:51:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2014-05-06-github-pages-dns-settings/</guid>
      <description>这几天每次 Push 博客到 Github Pages 时总会收到一封邮件：
 The page build completed successfully, but returned the following warning:
GitHub Pages recently underwent some improvements (https://github.com/blog/1715-faster-more-awesome-github-pages) to make your site faster and more awesome, but we&amp;rsquo;ve noticed that iforget.info isn&amp;rsquo;t properly configured to take advantage of these new features. While your site will continue to work just fine, updating your domain&amp;rsquo;s configuration offers some additional speed and performance benefits. Instructions on updating your site&amp;rsquo;s IP address can be found at https://help.</description>
    </item>
    
    <item>
      <title>悟性</title>
      <link>https://127.0.0.1/posts/2014-04-26-power-of-understanding/</link>
      <pubDate>Sat, 26 Apr 2014 01:11:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2014-04-26-power-of-understanding/</guid>
      <description>“悟性”是一个很虚的东西吗？
前段时间和同学聊天，聊如何从众多的各方面初步看起来差不多应聘者中去做选择？聊来聊去最终落到了“悟性”上。我自己在突然想到悟性这个词的时候脑子几乎一片空白，不知道如何去判断一个人的悟性，或者说悟性到底是怎么样的，凭什么说一个人悟性好或者悟性差。
昨天下午有个年龄不小的同学过来面试，聊了一个小时以后，向老板 汇报面试意见时，这同学各方面都很不错，但是总觉得有些地方不对，找不到词来形容自己内心当时的想法，于是结结巴巴的说，这种情况下，我要看一个人有没有悟性，接着我举了一个例子来说明什么时悟性：
 假如一个人，被安排了事情 A，我觉得有悟性的人，可能在做 A 事情的时候，把相关的事情 B、C 都做了，或者要求时做到A，但是主动把结果做成 A++
 说完后，我觉得不妥：这可能不是一个人有没有悟性的问题，而是这个人主动不主动、有没有热情的问题。
到底什么怎样才能通过一些具体的例子体会悟性这个词的含义？
佛家讲究悟性。《心经》仅有 260 个字，有悟性的人才可以写出《心经与生活智慧》，甚至心经和量子物理都有关系，你看了之后，才发现：哦，原来心经是说这些的啊。
道家也讲究悟性。当年菩提老祖在孙猴子头上敲三下的时候，要是孙猴子没有悟性只有兽性的话，估计就没有后面的孙悟空了。
自己之前团队中有个新同事，年龄比我长，团队之间大家相互做 Code Review，且不说代码质量， 从代码风格上我就对此人无语了：从不注意已有代码在变量、函数、文件命名上的一些基本的规范，别人不告诉他，就不会意识到这个问题。一些看得见的东西不一定非要教条式的写到文件里，然后去专门花时间去学,去强制。有些问题，还是自己意识到比较好，从别人口里说出来，那就不好玩了。
一句话说得好：
 不怕狼一样的对手，就怕猪一样的队友。
 不多说了，不强求，悟性有可能就是天生的。做不了大师兄，做二师弟也不赖。</description>
    </item>
    
    <item>
      <title>成长</title>
      <link>https://127.0.0.1/posts/2014-04-25-grow-up/</link>
      <pubDate>Fri, 25 Apr 2014 00:40:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2014-04-25-grow-up/</guid>
      <description>成长就是看自己以前写的东西（包括微博、博客、说说等等）的时候觉得以前自己很 SB, 然后迫切地想把它们删掉
 这句话不止一次看到，反思自己，确实是那么回事儿，不能太赞同哦（我了个去上海腔了呢）。
先前早些时候，把新浪博客和人人删的一干二净，也就是过把自己过去的所有文字的创造付之一炬，说没有一点惋惜，那是不可能的，想想当年自己顶着农村小孩黝黑皮肤初来乍到大城市，牛流不分，不怕喝不上牛奶只能喝豆浆的尴尬，给学校里各个杂志投稿，现在读来那些稿件，莫不觉得自己二逼。还好是些低年级学生玩的校办杂志，没多少人，为了回忆二逼的岁月，我特地还留了一本，没有其他人变态一样也留了一本吧。
哦，对了，如果你想删掉所有的 SNS 平台的日志，不如学门编程的手艺，使用他们所谓的开放接口删了他们。不知道人人网的 3g.renren.com, 如果还能访问那可以试试小码哥几年前弄的人人自杀小工具 xiaomg.sinaapp.com，如果恰好能帮你删掉所有的东西，那么就是人人网的不对了，这么多年了，一点进步都没有，还有几个人在山寨机上开个ucweb访问你的3g网站。小工具的代码就不要看了，惨不忍闻，套用前面的话，写得太二逼了。说不定哪天就会被删掉，就像删这些日志一样。
感性的文字都已经被删掉了，这下子没人看的得到我过去的无知，也只有我自己知道自己过去的无畏。
准备把散落在各处的技术博文都挪到这里来，二逼 SB 可能不大适合形容一个人的手艺，但是菜鸟二字恰如其分。
又一个菜鸟来了。大牛们见笑了。</description>
    </item>
    
    <item>
      <title>谁是德布罗意</title>
      <link>https://127.0.0.1/posts/2014-03-13-who-is-de-broglie/</link>
      <pubDate>Thu, 13 Mar 2014 21:16:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2014-03-13-who-is-de-broglie/</guid>
      <description>这张照片很多人应该都见过，名副其实的二十世纪最伟大科学家们的合影。爱因斯坦占据了最明显的位置，德布罗意也在其中。
这里是摘自百度百科的一些内容：
 在光具有波粒二象性的启发下，法国物理学家德布罗意（1892～1987）在 1924 年提出一个假说，指出波粒二象性不只是光子才有，一切微观粒子，包括电子和质子、中子，都有波粒二象性。他把光子的动量与波长的关系式 p=h/λ 推广到一切微观粒子上，指出：具有质量 m 和速度 v 的运动粒子也具有波动性，这种波的波长等于普朗克恒量 h 跟粒子动量 mv 的比，即 λ=h/(mv)。这个关系式后来就叫做德布罗意公式。
从德布罗意公式很容易算出运动粒子的波长。
例如，电子的电荷是 1.6×10^-19 库，质量是 0.91×10^-30 千克，经过 200 伏电势差加速的电子获得的能量 E=Ue=200×1.6×10-19 焦 =3.2×10-17 焦。这个能量就是电子的动能，即0.5mv^2=3.2×10^-17 焦，因此 v=8.39*10^6 米/秒。于是，按照德布罗意公式这运动电子的波长是 λ=h/(mv)=6.63*10^-34/(9.1*10^-31*8.39*10^6)=8.7×10-11 米，或者 0.87 埃。
我们看到，这个波长与伦琴射线的波长相仿。前面讲过，这样短的波长，只有用晶体做衍射光栅才能观察到衍射现象。后来人们的确用这种办法观察到了电子的衍射，从而证明了德布罗意假说的正确性。
 是不是有点印象了，这就是高中物理课本里面的内容吧。
前几天和公司几个童鞋一起吃饭，先是有人说《水知道答案》，且先不说它是不是伪科普，我们试图用一些我们想得到的知识来说明一些问题，于是我想到了物质波，也就是德布罗意波。让我惊愕的是，那三位同学一致表示他们完全不知道什么是德布罗意波，搞得我仿佛穿越了，穿越到阿西莫夫的基地里去了。
一定是在耍我。
如果德布罗意波都不知道，那肯定也错过了德布罗意本人和他那篇博士论文的八卦故事了。不多说了，还是偷着乐吧。
哈哈</description>
    </item>
    
    <item>
      <title>从域名和 CDN 来看网站架构</title>
      <link>https://127.0.0.1/posts/2014-03-06-arch-of-website-domain-cdn/</link>
      <pubDate>Thu, 06 Mar 2014 00:40:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2014-03-06-arch-of-website-domain-cdn/</guid>
      <description>为了自己做好网站的架构，找了知乎，豆瓣，大众点评和百姓网来做参考。这里主要来看域名和CDN相关的部分，后台的架构也还是要边学便实践。
大概情况 从前端分析了知乎的域名和 DNS 情况，同时对比了一下豆瓣、大众点评和百姓网。从域名、DNS、CDN等使用角度来说，他们之间大同小异。
使用的分析工具  Chrome WHOIS DNSLookup  非 CDN 使用    记录 域名 用途 路径     A zhihu.com 使用 301 跳转到 www.zhuhu.com IP   A zhi.hu 使用 302 跳转到 www.zhihu.com IP   A www.zhihu.com  IP   A comet.zhihu.com WebSocket 推送消息 IP   A analytics.zhihu.com 知乎自己的统计分析，同时使用了 Google Analytics IP    大部分都是用了 301 或者 302 跳转，注意他们的区别：301 是永久跳转(浏览器会做客户端端缓存)，而 302 是临时跳转。此外 baidu.</description>
    </item>
    
    <item>
      <title>使用 Vagrant 构建开发环境</title>
      <link>https://127.0.0.1/posts/2014-03-03-building-devenv-by-vagrant/</link>
      <pubDate>Mon, 03 Mar 2014 23:40:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2014-03-03-building-devenv-by-vagrant/</guid>
      <description>Vagrant 是一个构建虚拟开发环境的利器，它使得在团队中很容易共享开发环境，有了它，不必每个人都搭建一个自己的开发环境了。在没有使用 vagrant 之前，我在windows中安装了 virtualbox，然后在virtualbox中安装了一个ubuntu server。在 ubuntu 中安装了 mysql、jdk 等软件，并且设置了一个共享目录，以便于将工程代码直接共享给 ubuntu。在外部开发调试过程中（Java 项目），我需要在virtualbox中设置好几个端口映射，如 mysql，ssh等等。这样在 cygwin 里面就可以通过 ssh 登录 ubuntu server 了，为了使得ssh登录不用每次设置密码，还需要手动生成公钥私钥。换机器了，这一切我又得重新配置。新同事来了，他也得像我这样重新配置一遍。有可能他还会有问题说：为什么按照你的说明，代码在我这里却无法运行呢？
一切都从 Yining 告诉了我 vagrant 之后发生了变化，原来一切都这么简单。
安装 VirtualBox Vagrant 其实是对 virtualbox 做了一层包装，它让使用virtualbox作为虚拟机更为简单。当然也可以使用 vmware，使用vmware那得找一个license了。
好吧，去这里 下载 VirtualBox。我使用的是 4.3.8 for OSX
安装 Vagrant 下载vagrant
添加虚拟机镜像到 Vagrant vagrant box add vdevenv ~/Workspace/vagrant/boxes/vdevenv-0.0.0.1.box  vagrant 的干净的镜像可以在这里下载:
 Ubuntu precise 32 VirtualBox Ubuntu precise 64 VirtualBox 更多镜像  在工作目录启动 Vagrant 进入自己的代码所在的目录，启动刚刚添加的虚拟机镜像
vagrant init vdevenv vagrant up vagrant ssh # 登录到虚拟机  进入 /vagrant 目录，这里就是共享的目录，所有的代码都在这里。</description>
    </item>
    
    <item>
      <title>Python on My rMBP</title>
      <link>https://127.0.0.1/posts/2014-03-02-python-on-my-rmbp/</link>
      <pubDate>Sun, 02 Mar 2014 21:16:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2014-03-02-python-on-my-rmbp/</guid>
      <description>前几天入手了一台 Macbook Pro Retina，把 BIG 提到了很爽的地步。经过几天的折腾，可以和 windows，ubuntu desktop 说 Byebye 了。之前整整用了一年的 Ubuntu 来工作，我用它来写 C、Java 和 Python, 要是 windows 没有 cygwin, 没有 MacType，那该多么恐怖。后来用了一段时间的 MBP，让我坚定了以后要自己买一个 MBP。
ubuntu 那么的惹人爱，因为它有个还挺好用的 GUI，从 debian 那继承过来的 apt-get, 一下子把一个从 redhat 9 用到 fedora 4 的穷学生拉到了 ubuntu 的阵营，至此，deskop 就被 ubuntu 占领了。在此之前，我还用段时间的 debian 和 gentoo。
不得不说，debian 太伟大太牛逼了，有一次要在一个 MIPS 的小设备上编译安装 erlang， openssl，libcurl 等做一些实验, 要跨平台编译这些软件安装到小设备上去，费了半天终于把这些都编好了，还写了一个编译脚步，结果 erlang 运行的时候虚拟机总是报错，也不知道怎么回事。后来注意到 debian 居然有 MIPS，ARM 的源，后来在 MIPS 设备上安装软件做实验，我再也没有遇到问题，一切都用 apt-get 搞定了。
除了 apt-get, 我想最令我惊喜还有 ubuntu 自带了 python 2.7，让我很容易在两台电脑之间拷贝文件：</description>
    </item>
    
    <item>
      <title>阿里云和 ucloud 云主机评测</title>
      <link>https://127.0.0.1/posts/2013-08-09-benchmark-of-aliyun-and-ucloud/</link>
      <pubDate>Fri, 09 Aug 2013 00:40:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2013-08-09-benchmark-of-aliyun-and-ucloud/</guid>
      <description>总体说明 我使用联通10M光网，SSH在多个时间段登录两个主机都是非常的快，但是阿里云的SSH有时会断开连接，需要重新登录(一天遇到n次)，ucloud一次都没有断开连接过。两者总体操作上都很流畅。平时我比较习惯于使用ubuntu，于是在两个主机上都安装了Ubuntu 12.04_64的Server版本。在安装初始化系统过程中(测试过两次)，Ucloud的速度要快于阿里云主机，粗略估计都是在20s以内，因此差别不大。
阿里云主机安装过程中不需要人为参与，选好主机配置即可，主机一旦创建完成，用户名和口令会发送到测试者手机上，而且直接发送的是root账户口令。Ucloud除了选择配置之外，还需要设置强登录密码，使用普通用户登录，感觉更geek一点。
默认情况配置下，关闭重启服务器，Ucloud会发送主机变化短信到手机，阿里云不会。阿里云在系统负载预警方面比较全面，ucloud侧重于server上在线状态和相关服务的预警。
在试用和测试过程中我主要偏向于静态的测试，后面还有一个好玩的 Super PI 测试。
阿里云和ucloud都是主机，和实际的服务器使用上没有什么区别。另外阿里云有paas，需要单独购买，目前支持php和nodejs，一些基本的服务如memcached等都可直接使用。
如果做互备，如果我们不使用这两个云平台各自特有的一些服务(主要是阿里云有一些如开放存储服务OSS等)，相互切换难度上应该是差不多的。
主机概览    项目 阿里云 ucloud     按量付费 支持(不能升级或者调整主机配置*) 不支持   包年包月 支持 支持   操作系统 可重置 可重装   CPU升级 支持(需要关机) 支持(需要关机)   内存升级 支持(需要关机) 支持(需要关机)   磁盘扩容 支持，可以升级或者添加新的磁盘，最大为2000G 支持，可以扩容最大到1000G（与系统盘在同一个主机上），或者添加新的网络磁盘udisk   磁盘镜像 支持 支持   带宽升级 支持 支持    其它服务[需要单独购买]    项目 阿里云 ucloud     负载均衡服务 支持(目前免费)，需要两台主机以上 支持(目前免费)，需要两台主机以上   关系型数据库服务 支持，mysql和sqlserver 支持，mysql和percona   特有的服务 开放存储服务 OSS、开放数据处理服务 ODPS、开放结构化数据服务 OTS CDN、短信服务（可二次开发）、与又拍、DNSPod和搜狐SendCloud直接绑定    *按量付费不支持更换操作系统；不支持配置变更功能（包括带宽升级、CPU和内存升级、新增数据盘）;“包年包月“和”按量付费“不支持相互更换;1台云服务器只能选择1种，无法同时选择</description>
    </item>
    
    <item>
      <title>Linux 共享库（动态链接库）相关的一些记录</title>
      <link>https://127.0.0.1/posts/2013-03-04-so-load-path-in-linux/</link>
      <pubDate>Mon, 04 Mar 2013 00:40:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2013-03-04-so-load-path-in-linux/</guid>
      <description>相关的环境变量  LD_LIBRARY_PATH ld-linux.so寻找shared object的路径，优先加载出现在路径前面的shared object。如，export LD_LIBRARY_PATH=/home/user/lib:$LD_LIBRARY_PATH LD_PRELOAD 指定优先供ld-linux.so加载的shared object。如，export LD_PRELAOD=/home/user/lib/glibc.so，可以使用这个变量来改变加载顺序，例如我们自定义的glibc.so中实现了新的strcmp之类的函数，那么可以使用这个变量来实现函数的替换，实现注入 LD_DEBUG 使用这个环境变量来debug载入shared object的情况。如，export LD_DEBUG=files,这样会打印所有所有加载shared object的记录  一些工具  如何查看一个程序或者shared object加载哪些shared object  ldd，可以查看程序或者.so，如，
$ ldd ./foo_test $ ldd ./libfoo.so   对于已经运行的程序，可以这样  $ cat /proc/PID/maps | awk &#39;{print $6}&#39;| grep &#39;\.so&#39;| sort | uniq $ lsof -p PID | awk &#39;{print $9}&#39; | grep &#39;\.so&#39;   没有启动的程序可以这样  $ strace ./foo_test 2&amp;gt;&amp;amp;1 | grep &#39;^open(&amp;quot;.*\.so&#39;  也可以用上面提到的环境变量来看shared object的加载顺序</description>
    </item>
    
    <item>
      <title>再说 PHP 中 SimpleXML</title>
      <link>https://127.0.0.1/posts/2012-03-22-a-short-discuss-of-simplexml-of-php/</link>
      <pubDate>Thu, 22 Mar 2012 00:40:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2012-03-22-a-short-discuss-of-simplexml-of-php/</guid>
      <description>前一篇帖子使用了xpath，后来了解到xpath的性能可能比较差，而且在遇到有命名空间的时候还有点小麻烦。这里都已豆瓣提供的API返回的xml为例。豆瓣返回的xml不是rss格式的，而是Atom格式，有很多的命名空间，如果习惯于操作rss格式的xml，那么可以直接把xml里面的命名空间的字符串都replace掉，这个方法貌似很简单很暴力，就不会遇到命名空间的问题了。
从豆瓣API开始，点击这个链接 http://api.douban.com/book/subjects?q=java 你就可以看到xml格式，由于返回的是Atom格式的xml，浏览器会自动帮你解析，所以应该这样
# 这样就可以得到一个java.xml文件。 $ wget -O java.xml http://api.douban.com/book/subjects?q=java  这样就可以得到一个 java.xml 文件，接下来使用 SimplePHP 处理这个文件。
首先要创建一个SimpleXML对象
//$content为xml的内容 $xml = new SimpleXMLElement($content);  现在要获取opensearch命名空间下的totalResults节点的文本，代码如下：
$children = $xml-&amp;gt;children(&#39;http://a9.com/-/spec/opensearchrss/1.0/&#39;); $totalResults = $children-&amp;gt;totalResults;  处理所有xml文档中所有的entry节点
//处理所有找到的记录 $entries = $xml-&amp;gt;entry; foreach($entries as $entry){ //取命名空间下的孩子节点 $entryChildren = $entry-&amp;gt;children(&#39;http://www.douban.com/xmlns/&#39;); //... }  好了，这里只是抛砖引玉，其它具体的操作还得参考 SimpleXML 的文档。</description>
    </item>
    
    <item>
      <title>我想做的东西可以不值钱，但是它必须‘酷’</title>
      <link>https://127.0.0.1/posts/2012-03-13-things-i-create-must-be-cool/</link>
      <pubDate>Tue, 13 Mar 2012 00:40:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2012-03-13-things-i-create-must-be-cool/</guid>
      <description>这句话是FACEBOOK的马克·扎克伯格说的。
我很认同，并且感觉自己也是这么做的。现在自己做得很多事情，从来没有考虑过它会不会值钱，只是感觉把自己的想法做出来，变成实物的过程就已经很酷。
对于酷，我觉得至少有两方面的意义。
一种酷，是一种自我实现的感觉，是一种认同感，成就感。比如自己把自己的不错的想法实现了，当自己看到自己作品的时候，肯定觉得这种感觉很酷。接着你的作品有很多人用了，看了，然后给与了肯定或者赞扬的评价，这时候感到酷，我觉得就应该是一种认同感和成就感。都是内心的感觉，一种推进自我完善的感觉。
还有一种酷，那就是表面上的酷，比如你的网页效果做得很酷很炫，你实现的功能很酷。虽然这些是表面上的酷，但这些酷的背后却隐藏着无数的思考和磨练。这么表面上的酷，却恰恰可以给人带来内心上的酷。
就拿摆摊网来说，小小的网站，做得很简单。但是为了实现页面小小的效果，还不得不去多学点东西多花些时间。我喜欢自己东西能弄得那种能给人至简至美的感觉，但是却不能因为简而不“美”了，这里的美是给人一种更好的感觉。所以自己总是在觉得不破坏简的前提下，尽量的让自己的应用让人使用的体验更好更酷。比如说发布书籍信息的页面，以前必须使用ISBN号，现在这里点击查看的将要改成 @林风琦 推荐的 chegg 的效果，是不是比豆瓣的书籍检索要酷很多。进一步思考，对于摆摊首页的检索，以后是不是应该结合用户的搜索习惯和本身的书籍物品数据也实现这种AutoComplete功能。还比如说摆摊还将开发Android手机客户端，到时候只要一拍，就可以把书信息扫下来了，看，多酷！
现在自己的科研也是这样，能给自己带来一种很酷的感觉，但是就科研的实际应用来说，我觉得可以应用的范围很小。但是想着能把Jim Gray这位数据库大神[此大神已经被外星人带走了，详情看这里]负责的基于微软SQL Server的SDSS项目迁移到适合科学运算的数组模型的数据库上来，然后我们还有可能就性能PK一把，想想就觉得很酷。更酷的是，自己还想到了一种自动迁移的方法[还没有经过深思和验证]。反正就是觉得酷儿！
为了更酷，继续努力！
我是 A Lucky Apple，@小码哥</description>
    </item>
    
    <item>
      <title>在这安静的夜里</title>
      <link>https://127.0.0.1/posts/2012-03-10-at-a-late-night/</link>
      <pubDate>Sat, 10 Mar 2012 00:40:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2012-03-10-at-a-late-night/</guid>
      <description>今天组会不用开了，报告也不用做了，感觉比较爽，于是晚上的时候决定给摆摊写一些新的东西。
于是刚刚给摆摊的首页添加了一个小小的功能，就是能够随机的选取5本书在首页上循环展示，另外修正了一些网友提出的问题。
首页图片轮换是用jquery实现的，做法也很简单，当然实现的功能和效果还是比较弱的，这里是我用到一些资料。 CSS定位：http://www.haozi.cn/code/position-static-relative-absolute-float/
好了，摆摊这几天暂时就这个样子了，得放下心思继续去搞自己的科研了。
过段时间一定要好好总结一下，写一些关于数组数据库系列的文章。</description>
    </item>
    
    <item>
      <title>写给 2012 的摆摊</title>
      <link>https://127.0.0.1/posts/2012-01-09-for-baigetan-2012/</link>
      <pubDate>Mon, 09 Jan 2012 00:40:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2012-01-09-for-baigetan-2012/</guid>
      <description>我期待2012的到来，这一年我将有一个新的开始，好期待。
最近一直在忙着做实验，读论文，都没有什么时间来弄弄摆摊，自己心里的那种对于摆摊的激情也渐渐淡了很多，但是想想自己当初的想法，立马又有动力拾起摆摊。
一个小小的网站，看起来确实很简单，也就是拿php连连数据库，做做一些简单的操作，可自己在写这个网站的时候总是很慢。时间少而且比较凌乱是一个原因，但是总的还是缺少一个全面完善细致的规划，自己大部分也是照着当初的设计，然后想到哪儿做到哪儿，如今的摆摊，已经和当初的相去甚远了。越写越复杂，问题也越来越多，停下来一想，还是挥起大刀把乱乱的东西都砍了吧，弄得越简单越好。
加油！过几天就要回家了，不知道什么时候才能做好，让自己心里舒服一下。这几天赶紧将域名绑定好，将人人、新浪微博等的接入做好，大概就这个样子了。
大家新年快乐！</description>
    </item>
    
    <item>
      <title>SimpleXML使用xpath</title>
      <link>https://127.0.0.1/posts/2011-12-01-how-to-use-simplexml-of-php/</link>
      <pubDate>Thu, 01 Dec 2011 13:09:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2011-12-01-how-to-use-simplexml-of-php/</guid>
      <description>这几天没心情看论文，于是开始写写摆摊网的代码。摆摊主要做高校二手书籍信息的分享，于是需要从豆瓣上获取图书信息，豆瓣提供了一个完整的xml来描述一本书，例如http://api.douban.com/book/subject/isbn/9787543639136，于是需要处理这个xml来获取相应信息，这里小码哥采用的是直接使用xpath来获取xml文档中相应的信息。摆摊使用了sae，于是使用SimpleXML来处理xml，加上自己还只是PHP的初学者，于是出现了一些问题。
这里是一些学习资料：
 xpath:http://www.w3school.com.cn/xpath/ simplexml:http://cn2.php.net/manual/en/simplexmlelement.xpath.php  新建SimpleXMLElement对象，xml文件内容在$content中
$bookFromDouban = new SimpleXMLElement($content);  直接查询，在命名空间db下的所有attribute，且有name属性，以下xpath查询是没有问题的，
$result = $bookFromDouban-&amp;gt;xpath(&amp;quot;//db:attribute[@name]&amp;quot;);  但是，这条查询就有问题了，如下，
$result = $bookFromDouban-&amp;gt;xpath(&amp;quot;//link[@rel=&#39;self&#39;]|//link[@rel=&#39;image&#39;]&amp;quot;);  上面的代码表示在默认的命名空间里面查询link节点，但是在php 5.0以上却不能查出数据。需要这样操作
//获取这个xml的所有的命名空间 $namespaces = $bookFromDouban-&amp;gt;getNamespaces(); //注册默认的命名空间为&#39;d&#39; $bookFromDouban-&amp;gt;registerXPathNamespace(&#39;d&#39;, $namespaces[&#39;&#39;]); //现在这个查询就ok了 $result = $bookFromDouban-&amp;gt;xpath(&amp;quot;//d:link[@rel=&#39;self&#39;]|//d:link[@rel=&#39;image&#39;]&amp;quot;);  对$result遍历就简单了，这里也给出一个简单的例子，遍历完，变量就初始化了。PS：代码写的不优雅，欢迎拍砖。
translator = array(); $author = array(); $i = $j = 0; foreach($result as $item) { foreach($item-&amp;gt;attributes() as $val) { $val = str_replace(&#39;-&#39;,&#39;_&#39;,$val); if($val == &#39;author&#39;) { $author[$i++] = &#39;&#39;.$item; } else if($val == &#39;translator&#39;) translator[$j++] = &#39;&#39;.</description>
    </item>
    
    <item>
      <title>jquery $.ajax() 中 datatype 为 json 时的问题</title>
      <link>https://127.0.0.1/posts/2011-12-01-when-datatype-is-json/</link>
      <pubDate>Thu, 01 Dec 2011 00:40:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2011-12-01-when-datatype-is-json/</guid>
      <description>最近在为摆摊写点前端 js 的时候，在使用 jquery 的 $.ajax()这个方法的时候，当datatype设置为json时，总是不执行success回调，而是执行error回调。而将datatype设置成text，就可以执行success回调了，摆摊使用的是jQuery JavaScript Library v1.6.2，查看jQuery文档可知：
 “json”: Evaluates the response as JSON and returns a JavaScript object. In jQuery 1.4 the JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. (See json.org for more information on proper JSON formatting.)
 我用php产生的字符串是
{‘isbn’:&#39;ISBN号码格式不正确，应为10位或者13位的字符串’}  很明显，json.org规则使用的是双引号，而不是单引号，jQuery1.4 以后都要求更为严格的 json 格式
对于以上单引号的字符串，可以使用datatype为text，然后使用
//content = {‘isbn’:&#39;ISBN号码格式不正确，应为10位或者13位的字符串’} var json = eval(‘(‘+ content +’)&#39;)  </description>
    </item>
    
    <item>
      <title>未来是个未知数</title>
      <link>https://127.0.0.1/posts/2011-11-09-future-is-unknown/</link>
      <pubDate>Wed, 09 Nov 2011 13:09:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2011-11-09-future-is-unknown/</guid>
      <description>未来是个未知数，自己的未来自己都不知道会是什么样子，问别人，别人又怎么会知道你的未来。
不要忘了自己心中想要的东西，即使是为了养家糊口而从事自己不喜欢的工作，也不要忘记自己希望做什么，静静的准备着，迟早有一天会爆发的。
单纯的做着自己的业余爱好，业余爱好也就会发展成职业的。但是我不会忘了我心中想要去做什么，我会为之而积累准备。
未来是个未知数，没有方程组能解开这个未知数，只能去试，试试才会知道。
摆摊网的未来也是个未知数，很大的可能就是被淹没在数以亿计的小小站点之中，被互联网大潮一扫而过，什么也不会留下，但是，这就是我的爱好，我喜欢把自己的想法实现，不管别人喜不喜欢用，但是，我喜欢摆摊网，它是我想法的一个实体，我每次尝试的一个印记。
自己的工作也定下来了，有接着研究自己的课题，但这几天不能安静下来搞自己的课题，总想着摆摊网还没有做好，于是拿出了两天，把摆摊的页面都做了出来，接下来就要做网站的逻辑部分了。
网站很简单，但是要做好做的精致做得完美做得好用也是很不容易的。自己还是慢慢来搞，每天写点代码吧，还是要干些要紧的事儿，后天又得做报告了，得赶论文ppt了。
期待有同学加入，一起来开发摆摊网，让摆摊网早点上线！！！
要开始为了毕业而忙碌了。
我是小码哥（新浪微博）</description>
    </item>
    
    <item>
      <title>关于摆摊的一些思考</title>
      <link>https://127.0.0.1/posts/2011-11-08-think-of-baigetan/</link>
      <pubDate>Tue, 08 Nov 2011 00:40:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2011-11-08-think-of-baigetan/</guid>
      <description>今天是十一假期归来的第一天，实验室也启用了新的管理制度，坐在北洋楼的实验室也有一会儿了，刚发了一会儿呆，对摆摊又有了一些新的思考。
我的目标是想把摆摊做成高校的网上交易平台，也就是类似淘宝，但是作为摆摊网的初期是不合适的，因为这个交易平台太大太复杂。
所以摆摊的第一步还是做交易信息的发布和检索，主打高校的书籍和物品交易信息，交易还是线下完成，这样，初期的摆摊应该就和赶集、百姓、58等类似了，而且这样摆摊的实现难度也会大大降低，在加上SNS和LBS，摆摊就可以提供比赶集、百姓、58等更精准的信息服务了。
这几天只是做了一些准备工作，熟悉了sae的环境，网站的架构也基本完成，页面上的设计也差不多了，接下来就是定下摆摊网的初步方向，确定第一阶段的核心功能，将其业务逻辑实现了。
加油！</description>
    </item>
    
    <item>
      <title>摆摊网页面设计</title>
      <link>https://127.0.0.1/posts/2011-11-07-design-of-baigetan/</link>
      <pubDate>Mon, 07 Nov 2011 00:40:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2011-11-07-design-of-baigetan/</guid>
      <description>从泰山回来这几天，抽得空把摆摊网的页面做了出来，包括css和html的编写等，现在可以从baitan.sinaapp.com看到页面效果了，目前兼容ie8、ff、chrome、safari等。
baitan001.com也在备案之中，应该很快就可以使用baitan001.com域名访问了。
有同学想练习js，php等web技术的，不妨联系我，我肯定能让你参与进来！
我是小码哥</description>
    </item>
    
    <item>
      <title>冬天来了</title>
      <link>https://127.0.0.1/posts/2011-10-27-winter-is-coming/</link>
      <pubDate>Thu, 27 Oct 2011 13:10:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2011-10-27-winter-is-coming/</guid>
      <description>前几天一场大降温，把我给冻着了，肚子疼了好几天，还发烧，还好有个小盆友给我“打针喂药”，使得我这几天才得以康复，重现往日风采。
本来这周五得做论文的报告，于是这周基本都在看论文。谁知这周又冒出了几个公司让我去面试，论文的报告又就此作罢，挪到下周。
自己的外语很烂，基本没有投什么外企，昨天参加了微策略的面试之后，反而对自己的外语变得有些自信，最后和那位印度面试官聊天，他说我外语挺好，可是小盆友却说他那是在说客套话，不管客套不客套，反正我觉得挺开心，哈哈。。。
这周末还有几个知名互联网公司的笔试面试，加油！
关于摆摊，我还是抽出了一些时间来做了一些开发工作。先是看了赶集网吴石展杭州Qcon的关于MySQL数据库开发的三十六条军规，然后立马按照这些军规，对摆摊的数据库结构做了一些更改。此外，还开发了用户注册模块，只是页面还没有美化。
还是一点一点的来，事情太多，还要搞科研毕业，加油！
我是小码哥（新浪微博）</description>
    </item>
    
    <item>
      <title>摆摊的一些进展</title>
      <link>https://127.0.0.1/posts/2011-10-21-process-of-baigetan/</link>
      <pubDate>Fri, 21 Oct 2011 13:11:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2011-10-21-process-of-baigetan/</guid>
      <description>这段时间都在进行密集的笔试面试，但还是没有停下摆摊网的开发进程。目前摆摊网已经由吴江川同学设计好了产品的原型，我也在原型的基础上做好了全部页面的设计工作，接下来就是开始后台逻辑的开发。
目前后台数据库部分已经设计完毕。
加油！
我是小码哥</description>
    </item>
    
    <item>
      <title>十一掠影</title>
      <link>https://127.0.0.1/posts/2011-10-01-snapshot-of-10-1/</link>
      <pubDate>Sat, 01 Oct 2011 00:40:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2011-10-01-snapshot-of-10-1/</guid>
      <description>早上睡到9点才起床，然后下楼载着小盆友去学三吃了早饭，一人吃了六个小包子，出了食堂发现天气真好，决定去拍些照片，然后又载着小盆友回到宿舍拿了相机。
今天天气真好，微微的风，蓝蓝的天，枝头的树叶也变成了整片整片的金黄，好美！
东西都已经收拾好了，明天一早出发，去泰山，看日出。
我是小码哥</description>
    </item>
    
    <item>
      <title>摆摊网</title>
      <link>https://127.0.0.1/posts/2011-09-28-hello-baigetan/</link>
      <pubDate>Wed, 28 Sep 2011 03:40:00 +0000</pubDate>
      
      <guid>https://127.0.0.1/posts/2011-09-28-hello-baigetan/</guid>
      <description>点评：留在这里，让自己可以看到以往无知的自己
 一转眼，20 年就过去了，终于要和自己 20 年的学生身份说拜拜了。
那天去图书馆借书，回来的路上敬业湖桥边的那棵树的时候，心不由得感叹起来，这棵树，我已经拍下了它的春夏秋冬，它叶枯叶落，相似年年，只因它生根于此，我是要走的。
去图书馆，边走边想，就想到了前几天在知乎上看到的社会化图书馆网站，感觉很不错(而且UI做的很不错，想借鉴一下)。想着自己买了好多书，都闲在书架上，是不是也可以搞一个校园图书馆，把同学校的闲书都利用起来。然后又马上否定了自己，因为我自己其实并不愿意把自己买的书借给别人看。这个想法就此作罢。
想想自己倒是有不少二手书带不走了，得卖掉，还有一些小物件，也带不走了，扔了还挺可惜，也可以卖掉。于是想找找哪里去买，学校BBS感觉还可以，但是信息没有分类，不易于检索，而且用户体验很不好。百姓、赶集、58同城确实可以发布二手信息，但是信息又接近海量，不能针对目标人群——学生，比如我想找同专业学长学姐的书，那就不好找了，再比如我要找我考研学校的资料，那也不好找了，除非去相应的论坛，不然也是很难找。还有个大学生C2C，这个网站感觉心太大，不靠谱，而且用户体验很差。而且到学生毕业的时候，将会有大量的二手信息，是不是可以考虑搭建一个大学生专用的二手物品交易平台，而且融入校园SNS和LBS元素，主打二手书籍的交易呢。综合考虑以上，我觉得这挺靠谱的。
于是我打算开发一个这样的平台——摆摊网
天大每年有6000多的毕业生，如果有30%的毕业生能使用，那就将近 2000 人，融入 SNS 元素之后，用户会不会爆炸是增加？我觉得流量肯定会有的。
于是立马动手，先是在美橙互联上注册了域名 baitan001.com (正宗的开心网也是 kaixin001.com )，然后找了几个同学听了他们意见，同时还邀请了两个同学一起来做这个小项目。
感谢新浪SAE给了我实现自己的这个小小梦想的机会，前段时间参加新浪微博应用大赛，对SAE也有了一些了解，综合考虑之后，决定就在 SAE 平台上来做摆摊网的开发。
花了昨天一晚上加上今天一下午，结合以往自己用过的 PHP 框架代码，而且动手折腾出了 Baitan 0.0.1 版本 PHP 框架，兼容 SAE 平台，接下来就是一步一步的把摆摊做出来了。
这段时间一直忙于找工作，参加各种笔试面试，然后被各种鄙视，当然也收获了不少，短短不到一个月，也已经有了好几个巨头互联网公司的 offer 了，自己的工作也大概就这么定下来了。自己在大学和研究生阶段也折腾过不少东西了，但是还是没有做出一个让自己满意的东西，我想把摆摊网做好，即使没人用，我也自己去维护去完善，当做是自己在种地吧。我有梦想，但最开心的还是有个她愿意倾听我。
今天把baitan001.com做了域名备案，申请了腾讯的企业邮箱，Baitan 0.0.1 框架的相关测试也已经基本完成，敬请期待摆摊网的到来吧！</description>
    </item>
    
  </channel>
</rss>