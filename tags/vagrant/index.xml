<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vagrant on 小码哥的技术干货</title>
    <link>//thisiswangle.com/tags/vagrant/</link>
    <description>Recent content in Vagrant on 小码哥的技术干货</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 03 Mar 2014 23:40:00 +0000</lastBuildDate>
    
	<atom:link href="//thisiswangle.com/tags/vagrant/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 Vagrant 构建开发环境</title>
      <link>//thisiswangle.com/posts/2014-03-03-building-devenv-by-vagrant/</link>
      <pubDate>Mon, 03 Mar 2014 23:40:00 +0000</pubDate>
      
      <guid>//thisiswangle.com/posts/2014-03-03-building-devenv-by-vagrant/</guid>
      <description> Vagrant 是一个构建虚拟开发环境的利器，它使得在团队中很容易共享开发环境，有了它，不必每个人都搭建一个自己的开发环境了。在没有使用 vagrant 之前，我在windows中安装了 virtualbox，然后在virtualbox中安装了一个ubuntu server。在 ubuntu 中安装了 mysql、jdk 等软件，并且设置了一个共享目录，以便于将工程代码直接共享给 ubuntu。在外部开发调试过程中（Java 项目），我需要在virtualbox中设置好几个端口映射，如 mysql，ssh等等。这样在 cygwin 里面就可以通过 ssh 登录 ubuntu server 了，为了使得ssh登录不用每次设置密码，还需要手动生成公钥私钥。换机器了，这一切我又得重新配置。新同事来了，他也得像我这样重新配置一遍。有可能他还会有问题说：为什么按照你的说明，代码在我这里却无法运行呢？
一切都从 Yining 告诉了我 vagrant 之后发生了变化，原来一切都这么简单。
安装 VirtualBox Vagrant 其实是对 virtualbox 做了一层包装，它让使用virtualbox作为虚拟机更为简单。当然也可以使用 vmware，使用vmware那得找一个license了。
好吧，去这里 下载 VirtualBox。我使用的是 4.3.8 for OSX
安装 Vagrant 下载vagrant
添加虚拟机镜像到 Vagrant vagrant box add vdevenv ~/Workspace/vagrant/boxes/vdevenv-0.0.0.1.box  vagrant 的干净的镜像可以在这里下载:
 Ubuntu precise 32 VirtualBox Ubuntu precise 64 VirtualBox 更多镜像  在工作目录启动 Vagrant 进入自己的代码所在的目录，启动刚刚添加的虚拟机镜像
vagrant init vdevenv vagrant up vagrant ssh # 登录到虚拟机  进入 /vagrant 目录，这里就是共享的目录，所有的代码都在这里。
Vagrant 设置 修改 Vagrantfile
分享开发环境 vagrant package  执行之后在工作目录下面会生成一个*.bax的文件，把这个文件拷给别人就可以了
常用 Vagrant 命令 vagrant ssh vagrant status vagrant halt vagrant up  </description>
    </item>
    
  </channel>
</rss>